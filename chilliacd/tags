!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACDSRC	Makefile	/^ACDSRC = .\/src\/$/;"	m
ACDVERSION	Makefile	/^ACDVERSION=1.0.0.0$/;"	m
ATTRIBUTE_NAME	src/tinyxml2.h	/^        ATTRIBUTE_NAME		            	= 0,$/;"	e	enum:tinyxml2::StrPair::__anon1
ATTRIBUTE_VALUE	src/tinyxml2.h	/^        ATTRIBUTE_VALUE		            	= NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon1
ATTRIBUTE_VALUE_LEAVE_ENTITIES	src/tinyxml2.h	/^        ATTRIBUTE_VALUE_LEAVE_ENTITIES  	= NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon1
Accept	src/tinyxml2.cpp	/^bool XMLComment::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLComment
Accept	src/tinyxml2.cpp	/^bool XMLDeclaration::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLDeclaration
Accept	src/tinyxml2.cpp	/^bool XMLDocument::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLDocument
Accept	src/tinyxml2.cpp	/^bool XMLElement::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLElement
Accept	src/tinyxml2.cpp	/^bool XMLText::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLText
Accept	src/tinyxml2.cpp	/^bool XMLUnknown::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLUnknown
AddHeader	src/HttpRequest.h	/^	void AddHeader(const std::string & key, const std::string & value)$/;"	f	class:HttpRequest
AddHeader	src/unused/HttpRequest.h	/^	void AddHeader(const std::string & key, const std::string & value)$/;"	f	class:HttpRequest
AddItem	src/cfgFile.cpp	/^int32_t CTCfgFile::AddItem (char Type, const char *pText)$/;"	f	class:CTCfgFile
AddItem	src/unused/cfgFile.cpp	/^int32_t CTCfgFile::AddItem (char Type, const char *pText)$/;"	f	class:CTCfgFile
AddItemAt	src/cfgFile.cpp	/^int32_t CTCfgFile::AddItemAt (struct CFGIENTRY *pEntryAt, char Mode, const char *pText)$/;"	f	class:CTCfgFile
AddItemAt	src/unused/cfgFile.cpp	/^int32_t CTCfgFile::AddItemAt (struct CFGIENTRY *pEntryAt, char Mode, const char *pText)$/;"	f	class:CTCfgFile
AddKey	src/cfgFile.cpp	/^void CTCfgFile::AddKey (struct CFGIENTRY *pSecEntry, const char *pKey, const char *pValue)$/;"	f	class:CTCfgFile
AddKey	src/unused/cfgFile.cpp	/^void CTCfgFile::AddKey (struct CFGIENTRY *pSecEntry, const char *pKey, const char *pValue)$/;"	f	class:CTCfgFile
AddSectionAndKey	src/cfgFile.cpp	/^int32_t CTCfgFile::AddSectionAndKey (const char *pSection, const char *pKey, const char *pValue)$/;"	f	class:CTCfgFile
AddSectionAndKey	src/unused/cfgFile.cpp	/^int32_t CTCfgFile::AddSectionAndKey (const char *pSection, const char *pKey, const char *pValue)$/;"	f	class:CTCfgFile
AddSectionEx	src/cfgFile.cpp	/^int32_t CTCfgFile::AddSectionEx(const char * pSection,const char *lpString)$/;"	f	class:CTCfgFile
AddSectionEx	src/unused/cfgFile.cpp	/^int32_t CTCfgFile::AddSectionEx(const char * pSection,const char *lpString)$/;"	f	class:CTCfgFile
AddSubscribeEvent	src/SiaSession.cpp	/^void TSessionLua::AddSubscribeEvent(const char * event_name, const char *function_name)$/;"	f	class:TSessionLua
AddTimer	src/SiaManager.cpp	/^void CSIATimer::AddTimer()$/;"	f	class:CSIATimer
Alarm	src/SiaTcpMonitor.cpp	/^void SiaTcpMonitor::Alarm(const std::string & sessionid, const std::string & level, const std::string & content)$/;"	f	class:SiaTcpMonitor
Alloc	src/tinyxml2.h	/^    virtual void* Alloc() {$/;"	f	class:tinyxml2::MemPoolT
ArePtrValid	src/cfgFile.h	37;"	d
ArePtrValid	src/unused/cfgFile.h	37;"	d
Args	include/json/value.h	/^  typedef std::vector<PathArgument> Args;$/;"	t	class:Json::Path
ArrayIndex	include/json/forwards.h	/^typedef unsigned int ArrayIndex;$/;"	t	namespace:Json
ArrayIndex	include/json/value.h	/^  typedef Json::ArrayIndex ArrayIndex;$/;"	t	class:Json::Value
AssociateSessionByCallId	src/SiaManager.cpp	/^void TSiaManager::AssociateSessionByCallId(SESSIONIDTYPE sessionId, const char * callid)$/;"	f	class:TSiaManager
AsynHttpRequest	src/HttpClientModule.cpp	/^	AsynHttpRequest(TSiaManager * own, const std::string & sessionId, http_method method, const std::string &uri, const std::string & cmd, const std::string & data = "", int timeout = 0, HttpClientModule * mhttp = nullptr) :$/;"	f	class:AsynHttpRequest
AsynHttpRequest	src/HttpClientModule.cpp	/^class AsynHttpRequest : public HttpRequest{$/;"	c	file:
AsynHttpRequest	src/unused/HttpClientModule.cpp	/^	AsynHttpRequest(TSiaManager * own, const std::string & sessionId, http_method method, const std::string &uri, const std::string & cmd, const std::string & data = "", int timeout = 0, HttpClientModule * mhttp = nullptr) :$/;"	f	class:AsynHttpRequest
AsynHttpRequest	src/unused/HttpClientModule.cpp	/^class AsynHttpRequest : public HttpRequest{$/;"	c	file:
Attribute	src/tinyxml2.cpp	/^const char* XMLElement::Attribute( const char* name, const char* value ) const$/;"	f	class:tinyxml2::XMLElement
BINDIR	Makefile	/^BINDIR = .\/bin\/$/;"	m
BUF_SIZE	src/tinyxml2.h	/^        BUF_SIZE = 200$/;"	e	enum:tinyxml2::XMLPrinter::__anon7
BUF_SIZE	src/tinyxml2.h	/^    enum { BUF_SIZE = 200 };$/;"	e	enum:tinyxml2::XMLAttribute::__anon4
BUF_SIZE	src/tinyxml2.h	/^    enum { BUF_SIZE = 200 };$/;"	e	enum:tinyxml2::XMLElement::__anon6
BZF_MD5_H	src/unused/MD5.h	35;"	d
Block	src/tinyxml2.h	/^    struct Block {$/;"	s	class:tinyxml2::MemPoolT
BoolAttribute	src/tinyxml2.h	/^    bool	 BoolAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement
BoolValue	src/tinyxml2.h	/^    bool	 BoolValue() const				{$/;"	f	class:tinyxml2::XMLAttribute
CARRIAGE_RETURN	src/tinyxml2.cpp	/^static const char CARRIAGE_RETURN		= (char)0x0d;			\/\/ CR gets filtered out$/;"	v	file:
CC_ARGHACK	acdd.h	17;"	d
CC_CURSOR	acdd.h	19;"	d
CC_EOF	acdd.h	16;"	d
CC_ERROR	acdd.h	20;"	d
CC_FATAL	acdd.h	21;"	d
CC_NEWLINE	acdd.h	15;"	d
CC_NORM	acdd.h	14;"	d
CC_REDISPLAY	acdd.h	22;"	d
CC_REFRESH	acdd.h	18;"	d
CC_REFRESH_BEEP	acdd.h	23;"	d
CData	src/tinyxml2.h	/^    bool CData() const						{$/;"	f	class:tinyxml2::XMLText
CEventBuffer	src/CEventBuffer.h	/^	explicit CEventBuffer(unsigned long maxBuffer = 1024*1024*1024):MAXBUFFER(maxBuffer){$/;"	f	class:helper::CEventBuffer
CEventBuffer	src/CEventBuffer.h	/^class CEventBuffer$/;"	c	namespace:helper
CFGEFIND	src/cfgFile.h	/^} CFGEFIND;$/;"	t	typeref:struct:__anon11
CFGEFIND	src/unused/cfgFile.h	/^} CFGEFIND;$/;"	t	typeref:struct:__anon10
CFGFILE_H	src/cfgFile.h	2;"	d
CFGFILE_H	src/unused/cfgFile.h	2;"	d
CFGIENTRY	src/cfgFile.h	/^struct CFGIENTRY$/;"	s
CFGIENTRY	src/unused/cfgFile.h	/^struct CFGIENTRY$/;"	s
CFLAGS	Makefile	/^CFLAGS = -D__LINUX__ -DLUA_USE_LINUX -DSIGTSTP -DSIGQUIT -DACDVERSION=$(ACDVERSION) -c -Wall -g -static -O0 -Wl,-rpath=.\/libs$/;"	m
CLEAR_OP	acdd.h	28;"	d
CLOSED	src/tinyxml2.h	/^        CLOSED,		\/\/ <foo\/>$/;"	e	enum:tinyxml2::XMLElement::__anon5
CLOSING	src/tinyxml2.h	/^        CLOSING		\/\/ <\/foo>$/;"	e	enum:tinyxml2::XMLElement::__anon5
CMD_BUFLEN	acdd.cpp	23;"	d	file:
CMessage	src/CMessage.h	/^	CMessage() {$/;"	f	class:CMessage
CMessage	src/CMessage.h	/^	CMessage(CMessage&& other)$/;"	f	class:CMessage
CMessage	src/CMessage.h	/^	CMessage(uint32_t _sender, uint32_t _receiver):sender(_sender),receiver(_receiver) {$/;"	f	class:CMessage
CMessage	src/CMessage.h	/^	CMessage(uint32_t _sender, uint32_t _receiver, const std::string & _cmd) : cmd(_cmd), sender(_sender), receiver(_receiver) {$/;"	f	class:CMessage
CMessage	src/CMessage.h	/^class CMessage {$/;"	c
COLLAPSE_WHITESPACE	src/tinyxml2.h	/^        COLLAPSE_WHITESPACE	                = 0x04,$/;"	e	enum:tinyxml2::StrPair::__anon1
COLLAPSE_WHITESPACE	src/tinyxml2.h	/^    COLLAPSE_WHITESPACE$/;"	e	enum:tinyxml2::Whitespace
COMMENT	src/tinyxml2.h	/^        COMMENT				        = NEEDS_NEWLINE_NORMALIZATION$/;"	e	enum:tinyxml2::StrPair::__anon1
COMPILE	Makefile	/^COMPILE = g++$/;"	m
COMPILECC	Makefile	/^COMPILECC = gcc$/;"	m
CONFIG	src/ACDReadConfig.h	/^enum CONFIG {$/;"	g
CONNECT_DELAY	src/TcpClientModule.cpp	15;"	d	file:
CONNECT_TIMEOUT	src/TcpClientModule.cpp	14;"	d	file:
CONNECT_TIMEOUT	src/TcpServerModule.cpp	22;"	d	file:
COUNT	src/tinyxml2.h	/^    enum { COUNT = (4*1024)\/SIZE }; \/\/ Some compilers do not accept to use COUNT in private part if COUNT is private$/;"	e	enum:tinyxml2::MemPoolT::__anon3
CPPTL_AUTOLINK_DLL	include/json/autolink.h	18;"	d
CPPTL_AUTOLINK_DLL	include/json/autolink.h	20;"	d
CPPTL_AUTOLINK_NAME	include/json/autolink.h	17;"	d
CPPTL_JSON_ALLOCATOR_H_INCLUDED	include/json/allocator.h	7;"	d
CPPTL_JSON_ASSERTIONS_H_INCLUDED	include/json/assertions.h	7;"	d
CPPTL_JSON_FEATURES_H_INCLUDED	include/json/features.h	7;"	d
CPPTL_JSON_H_INCLUDED	include/json/value.h	7;"	d
CPPTL_JSON_READER_H_INCLUDED	include/json/reader.h	7;"	d
CR	src/tinyxml2.cpp	/^static const char CR = CARRIAGE_RETURN;$/;"	v	file:
CSIATimer	src/SiaManager.h	/^	explicit CSIATimer(TSiaManager* aSender):m_theSender(aSender), m_Base(nullptr),m_timerId(1)$/;"	f	class:CSIATimer
CSIATimer	src/SiaManager.h	/^class CSIATimer$/;"	c
CStr	src/tinyxml2.h	/^    const char* CStr() const {$/;"	f	class:tinyxml2::XMLPrinter
CStrSize	src/tinyxml2.h	/^    int CStrSize() const {$/;"	f	class:tinyxml2::XMLPrinter
CTCfgFile	src/cfgFile.cpp	/^CTCfgFile::CTCfgFile (void)$/;"	f	class:CTCfgFile
CTCfgFile	src/cfgFile.h	/^class CTCfgFile$/;"	c
CTCfgFile	src/unused/cfgFile.cpp	/^CTCfgFile::CTCfgFile (void)$/;"	f	class:CTCfgFile
CTCfgFile	src/unused/cfgFile.h	/^class CTCfgFile$/;"	c
CT_intFALSE	src/cfgFile.h	17;"	d
CT_intFALSE	src/unused/cfgFile.h	17;"	d
CT_intTRUE	src/cfgFile.h	16;"	d
CT_intTRUE	src/unused/cfgFile.h	16;"	d
CTimerElement	src/SiaManager.h	/^	CTimerElement(CSIATimer* CTimer, uint32_t id, uint32_t value, uint32_t interval):m_CTimer(CTimer)$/;"	f	class:CTimerElement
CTimerElement	src/SiaManager.h	/^class CTimerElement$/;"	c
CTimerElementPtr	src/SiaManager.h	/^typedef CTimerElement* CTimerElementPtr;$/;"	t
CXXFLAGS	Makefile	/^CXXFLAGS = $(CFLAGS) -std=gnu++0x$/;"	m
CZString	include/json/value.h	/^  class CZString {$/;"	c	class:Json::Value
CallNum	src/ACDCallNum.h	/^struct CallNum {$/;"	s
CallNumPool	src/ACDCallNum.h	/^struct CallNumPool {$/;"	s
CallNumPoolCallNum	src/ACDCallNum.h	/^struct CallNumPoolCallNum {$/;"	s
CallNumSipGateway	src/ACDCallNum.h	/^struct CallNumSipGateway {$/;"	s
Capacity	src/tinyxml2.h	/^    int Capacity() const				{$/;"	f	class:tinyxml2::DynArray
Char	include/json/reader.h	/^  typedef char Char;$/;"	t	class:Json::Reader
CharReader	include/json/reader.h	/^class JSON_API CharReader {$/;"	c	namespace:Json
CharReaderBuilder	include/json/reader.h	/^class JSON_API CharReaderBuilder : public CharReader::Factory {$/;"	c	namespace:Json
Chunk	src/tinyxml2.h	/^    union Chunk {$/;"	u	class:tinyxml2::MemPoolT
Clear	src/tinyxml2.cpp	/^void XMLDocument::Clear()$/;"	f	class:tinyxml2::XMLDocument
Clear	src/tinyxml2.h	/^    void Clear() {$/;"	f	class:tinyxml2::DynArray
Clear	src/tinyxml2.h	/^    void Clear() {$/;"	f	class:tinyxml2::MemPoolT
ClearBuffer	src/tinyxml2.h	/^    void ClearBuffer() {$/;"	f	class:tinyxml2::XMLPrinter
ClearEventToStateMap	src/SiaSession.cpp	/^void TSessionLua::ClearEventToStateMap()$/;"	f	class:TSessionLua
Close	src/TcpClientModule.cpp	/^void TcpClientModule::Close()$/;"	f	class:TcpClientModule
Close	src/TcpServerModule.cpp	/^void TcpClient::Close()$/;"	f	class:TcpClient
Close	src/cfgFile.cpp	/^void CTCfgFile::Close(void)$/;"	f	class:CTCfgFile
Close	src/unused/cfgFile.cpp	/^void CTCfgFile::Close(void)$/;"	f	class:CTCfgFile
CloseElement	src/tinyxml2.cpp	/^void XMLPrinter::CloseElement( bool compactMode )$/;"	f	class:tinyxml2::XMLPrinter
ClosingType	src/tinyxml2.h	/^    int ClosingType() const {$/;"	f	class:tinyxml2::XMLElement
Cmd_StartFlow	src/CMessage.h	5;"	d
CollapseWhitespace	src/tinyxml2.cpp	/^void StrPair::CollapseWhitespace()$/;"	f	class:tinyxml2::StrPair
Comment	src/cfgFile.h	/^   char          Comment [255];$/;"	m	struct:__anon11
Comment	src/unused/cfgFile.h	/^   char          Comment [255];$/;"	m	struct:__anon10
CommentPlacement	include/json/value.h	/^enum CommentPlacement {$/;"	g	namespace:Json
Comments	include/json/value.h	/^  class Comments {$/;"	c	class:Json::Value
CompactMode	src/tinyxml2.h	/^	virtual bool CompactMode( const XMLElement& )	{ return _compactMode; }$/;"	f	class:tinyxml2::XMLPrinter
ConfigObject	src/ACDReadConfig.cpp	/^ConfigObject::ConfigObject()$/;"	f	class:ConfigObject
ConfigObject	src/ACDReadConfig.h	/^class ConfigObject {$/;"	c
ConsoleType	acdd.h	/^enum ConsoleType {$/;"	g
ConvertUTF32ToUTF8	src/tinyxml2.cpp	/^void XMLUtil::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:tinyxml2::XMLUtil
CurrentAllocs	src/tinyxml2.h	/^    int CurrentAllocs() const		{$/;"	f	class:tinyxml2::MemPoolT
DEBUG	src/tinyxml2.h	56;"	d
DEBUG_TYPE	acdd.h	/^	DEBUG_TYPE,$/;"	e	enum:ConsoleType
DELETE_REFRESH_OP	acdd.h	29;"	d
DICT_ERR	include/hiredis/dict.h	40;"	d
DICT_HT_INITIAL_SIZE	include/hiredis/dict.h	76;"	d
DICT_NOTUSED	include/hiredis/dict.h	43;"	d
DICT_OK	include/hiredis/dict.h	39;"	d
DONT_HAVE_STRUPR	src/cfgFile.h	8;"	d
DONT_HAVE_STRUPR	src/unused/cfgFile.h	8;"	d
DOUBLE_QUOTE	src/tinyxml2.cpp	/^static const char DOUBLE_QUOTE			= '\\"';$/;"	v	file:
DataBase	src/MySql.cpp	/^namespace DataBase {$/;"	n	file:
DataBase	src/MySql.h	/^namespace DataBase{$/;"	n
DataBase	src/MySqlModule.cpp	/^namespace DataBase {$/;"	n	namespace:chilli	file:
DataBase	src/MySqlModule.h	/^namespace DataBase{$/;"	n
DelayRequest	src/HttpClientModule.cpp	/^void HttpClientModule::DelayRequest(HttpRequestPtr req)$/;"	f	class:HttpClientModule
DelayRequest	src/unused/HttpClientModule.cpp	/^void HttpClientModule::DelayRequest(HttpRequestPtr req)$/;"	f	class:HttpClientModule
DeleteAttribute	src/tinyxml2.cpp	/^void XMLElement::DeleteAttribute( XMLAttribute* attribute )$/;"	f	class:tinyxml2::XMLElement
DeleteAttribute	src/tinyxml2.cpp	/^void XMLElement::DeleteAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement
DeleteChild	src/tinyxml2.cpp	/^void XMLNode::DeleteChild( XMLNode* node )$/;"	f	class:tinyxml2::XMLNode
DeleteChildren	src/tinyxml2.cpp	/^void XMLNode::DeleteChildren()$/;"	f	class:tinyxml2::XMLNode
DeleteKey	src/cfgFile.cpp	/^int32_t CTCfgFile::DeleteKey (const char *pSection, const char *pKey)$/;"	f	class:CTCfgFile
DeleteKey	src/unused/cfgFile.cpp	/^int32_t CTCfgFile::DeleteKey (const char *pSection, const char *pKey)$/;"	f	class:CTCfgFile
DeleteKeyOfSection	src/cfgFile.cpp	/^int32_t	CTCfgFile::DeleteKeyOfSection (const char *pSection)$/;"	f	class:CTCfgFile
DeleteKeyOfSection	src/unused/cfgFile.cpp	/^int32_t	CTCfgFile::DeleteKeyOfSection (const char *pSection)$/;"	f	class:CTCfgFile
DeleteNode	src/tinyxml2.cpp	/^void XMLNode::DeleteNode( XMLNode* node )$/;"	f	class:tinyxml2::XMLNode
DeleteNode	src/tinyxml2.h	/^    void DeleteNode( XMLNode* node )	{$/;"	f	class:tinyxml2::XMLDocument
DispatchThreadMessage	src/SiaManager.cpp	/^void TSiaManager::DispatchThreadMessage(std::shared_ptr<CMessage>& tranInfo, SESSIONIDTYPE & sessionId)$/;"	f	class:TSiaManager
DoubleAttribute	src/tinyxml2.h	/^    double 	 DoubleAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement
DoubleValue	src/tinyxml2.h	/^    double 	 DoubleValue() const			{$/;"	f	class:tinyxml2::XMLAttribute
DuplicationPolicy	include/json/value.h	/^    enum DuplicationPolicy { noDuplication = 0, duplicate, duplicateOnCopy };$/;"	g	class:Json::Value::CZString
DynArray	src/tinyxml2.h	/^    DynArray< T, INIT >() {$/;"	f	class:tinyxml2::DynArray
DynArray	src/tinyxml2.h	/^class DynArray$/;"	c	namespace:tinyxml2
ENTITY_RANGE	src/tinyxml2.h	/^        ENTITY_RANGE = 64,$/;"	e	enum:tinyxml2::XMLPrinter::__anon7
EPOLLEVENTS	src/server.cpp	18;"	d	file:
ERROR_TYPE	acdd.h	/^	ERROR_TYPE$/;"	e	enum:ConsoleType
Empty	src/tinyxml2.h	/^    bool Empty() const					{$/;"	f	class:tinyxml2::DynArray
Empty	src/tinyxml2.h	/^    bool Empty() const {$/;"	f	class:tinyxml2::StrPair
EnsureCapacity	src/tinyxml2.h	/^    void EnsureCapacity( int cap ) {$/;"	f	class:tinyxml2::DynArray
Entity	src/tinyxml2.cpp	/^struct Entity {$/;"	s	namespace:tinyxml2	file:
Error	src/tinyxml2.h	/^    bool Error() const {$/;"	f	class:tinyxml2::XMLDocument
ErrorID	src/tinyxml2.h	/^    XMLError  ErrorID() const {$/;"	f	class:tinyxml2::XMLDocument
ErrorInfo	include/json/reader.h	/^  class ErrorInfo {$/;"	c	class:Json::Reader
ErrorName	src/tinyxml2.cpp	/^const char* XMLDocument::ErrorName() const$/;"	f	class:tinyxml2::XMLDocument
Errors	include/json/reader.h	/^  typedef std::deque<ErrorInfo> Errors;$/;"	t	class:Json::Reader
Evt_CallCleared	src/CMessage.h	8;"	d
Evt_Manager_Stop	src/CMessage.h	20;"	d
Evt_Received	src/CMessage.h	7;"	d
Evt_StartService	src/CMessage.h	10;"	d
Evt_StopService	src/CMessage.h	9;"	d
Evt_TIMEOUT	src/CMessage.h	11;"	d
Evt_acdReRoute	src/CMessage.h	15;"	d
Evt_acdRoute	src/CMessage.h	14;"	d
Evt_acdRouteEnd	src/CMessage.h	17;"	d
Evt_acdRouteUsed	src/CMessage.h	16;"	d
Exception	include/json/value.h	/^class JSON_API Exception : public std::exception {$/;"	c	namespace:Json
F	src/unused/MD5.cpp	/^	inline MD5::uint4 MD5::F(uint4 x, uint4 y, uint4 z) {$/;"	f	class:helper::MD5
FDSIZE	src/server.cpp	17;"	d	file:
FF	src/unused/MD5.cpp	/^	inline void MD5::FF(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:helper::MD5
Factory	include/json/reader.h	/^  class JSON_API Factory {$/;"	c	class:Json::CharReader
Factory	include/json/writer.h	/^  class JSON_API Factory {$/;"	c	class:Json::StreamWriter
Features	include/json/features.h	/^class JSON_API Features {$/;"	c	namespace:Json
FindAttribute	src/tinyxml2.cpp	/^XMLAttribute* XMLElement::FindAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement
FindAttribute	src/tinyxml2.cpp	/^const XMLAttribute* XMLElement::FindAttribute( const char* name ) const$/;"	f	class:tinyxml2::XMLElement
FindKey	src/cfgFile.cpp	/^int32_t CTCfgFile::FindKey  (const char *pSection, const char *pKey, CFGEFIND *pList)$/;"	f	class:CTCfgFile
FindKey	src/unused/cfgFile.cpp	/^int32_t CTCfgFile::FindKey  (const char *pSection, const char *pKey, CFGEFIND *pList)$/;"	f	class:CTCfgFile
FindOrCreateAttribute	src/tinyxml2.cpp	/^XMLAttribute* XMLElement::FindOrCreateAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement
FindSection	src/cfgFile.cpp	/^struct CFGIENTRY *CTCfgFile::FindSection (const char *pSection)$/;"	f	class:CTCfgFile
FindSection	src/unused/cfgFile.cpp	/^struct CFGIENTRY *CTCfgFile::FindSection (const char *pSection)$/;"	f	class:CTCfgFile
FirstAttribute	src/tinyxml2.h	/^    const XMLAttribute* FirstAttribute() const {$/;"	f	class:tinyxml2::XMLElement
FirstChild	src/tinyxml2.h	/^    XMLHandle FirstChild() 													{$/;"	f	class:tinyxml2::XMLHandle
FirstChild	src/tinyxml2.h	/^    XMLNode*		FirstChild()			{$/;"	f	class:tinyxml2::XMLNode
FirstChild	src/tinyxml2.h	/^    const XMLConstHandle FirstChild() const											{$/;"	f	class:tinyxml2::XMLConstHandle
FirstChild	src/tinyxml2.h	/^    const XMLNode*  FirstChild() const		{$/;"	f	class:tinyxml2::XMLNode
FirstChildElement	src/tinyxml2.cpp	/^const XMLElement* XMLNode::FirstChildElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode
FirstChildElement	src/tinyxml2.h	/^    XMLElement* FirstChildElement( const char* value=0 )	{$/;"	f	class:tinyxml2::XMLNode
FirstChildElement	src/tinyxml2.h	/^    XMLHandle FirstChildElement( const char* value=0 )						{$/;"	f	class:tinyxml2::XMLHandle
FirstChildElement	src/tinyxml2.h	/^    const XMLConstHandle FirstChildElement( const char* value=0 ) const				{$/;"	f	class:tinyxml2::XMLConstHandle
FloatAttribute	src/tinyxml2.h	/^    float	 FloatAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement
FloatValue	src/tinyxml2.h	/^    float	 FloatValue() const				{$/;"	f	class:tinyxml2::XMLAttribute
Free	src/tinyxml2.h	/^    virtual void Free( void* mem ) {$/;"	f	class:tinyxml2::MemPoolT
FreeAllMem	src/cfgFile.cpp	/^void CTCfgFile::FreeAllMem (void)$/;"	f	class:CTCfgFile
FreeAllMem	src/unused/cfgFile.cpp	/^void CTCfgFile::FreeAllMem (void)$/;"	f	class:CTCfgFile
FreeMem	src/cfgFile.cpp	/^void CTCfgFile::FreeMem (const char *pPtr)$/;"	f	class:CTCfgFile
FreeMem	src/cfgFile.cpp	/^void CTCfgFile::FreeMem(const CFGIENTRY * pPtr)$/;"	f	class:CTCfgFile
FreeMem	src/unused/cfgFile.cpp	/^void CTCfgFile::FreeMem (const char *pPtr)$/;"	f	class:CTCfgFile
FreeMem	src/unused/cfgFile.cpp	/^void CTCfgFile::FreeMem(const CFGIENTRY * pPtr)$/;"	f	class:CTCfgFile
G	src/unused/MD5.cpp	/^	inline MD5::uint4 MD5::G(uint4 x, uint4 y, uint4 z) {$/;"	f	class:helper::MD5
GG	src/unused/MD5.cpp	/^	inline void MD5::GG(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:helper::MD5
GUID_LEN	src/uuid.h	13;"	d
GatewayManager	src/ACDCallNum.cpp	/^GatewayManager::GatewayManager()$/;"	f	class:GatewayManager
GatewayManager	src/ACDCallNum.h	/^class GatewayManager {$/;"	c
GenerationSessionId	src/SiaManager.cpp	/^SESSIONIDTYPE TSiaManager::GenerationSessionId()$/;"	f	class:TSiaManager
Get	src/CEventBuffer.h	/^	bool Get(T& data, long long dwMilliseconeds = INT32_MAX)$/;"	f	class:helper::CEventBuffer
GetAllSession	src/SiaManager.cpp	/^const std::map<SESSIONIDTYPE, TSessionLuaPtr> & TSiaManager::GetAllSession()const$/;"	f	class:TSiaManager
GetBase	src/TcpServerModule.cpp	/^struct event_base * TcpServerModule::GetBase()$/;"	f	class:TcpServerModule
GetCallId	src/SiaManager.cpp	/^const char * TSiaManager::GetCallId(std::shared_ptr<CMessage>& tranInfo)$/;"	f	class:TSiaManager
GetCalled	src/SiaSession.cpp	/^const char * TSessionLua::GetCalled()$/;"	f	class:TSessionLua
GetCaller	src/SiaSession.cpp	/^const char * TSessionLua::GetCaller()$/;"	f	class:TSessionLua
GetCharacterRef	src/tinyxml2.cpp	/^const char* XMLUtil::GetCharacterRef( const char* p, char* value, int* length )$/;"	f	class:tinyxml2::XMLUtil
GetCurrentState	src/SiaSession.cpp	/^const char * TSessionLua::GetCurrentState()$/;"	f	class:TSessionLua
GetData	src/HttpRequest.h	/^	const std::string & GetData(){ return m_data; }$/;"	f	class:HttpRequest
GetData	src/unused/HttpRequest.h	/^	const std::string & GetData(){ return m_data; }$/;"	f	class:HttpRequest
GetDocument	src/tinyxml2.h	/^    XMLDocument* GetDocument()				{$/;"	f	class:tinyxml2::XMLNode
GetDocument	src/tinyxml2.h	/^    const XMLDocument* GetDocument() const	{$/;"	f	class:tinyxml2::XMLNode
GetErrorStr1	src/tinyxml2.h	/^    const char* GetErrorStr1() const {$/;"	f	class:tinyxml2::XMLDocument
GetErrorStr2	src/tinyxml2.h	/^    const char* GetErrorStr2() const {$/;"	f	class:tinyxml2::XMLDocument
GetHeader	src/HttpRequest.h	/^	const HeaderType &GetHeader(){ return m_header; }$/;"	f	class:HttpRequest
GetHeader	src/unused/HttpRequest.h	/^	const HeaderType &GetHeader(){ return m_header; }$/;"	f	class:HttpRequest
GetMethod	src/HttpRequest.h	/^	http_method GetMethod(){ return m_method; }$/;"	f	class:HttpRequest
GetMethod	src/unused/HttpRequest.h	/^	http_method GetMethod(){ return m_method; }$/;"	f	class:HttpRequest
GetResponse	src/HttpRequest.h	/^	const std::string & GetResponse(){ return m_responseBody; }$/;"	f	class:HttpRequest
GetResponse	src/unused/HttpRequest.h	/^	const std::string & GetResponse(){ return m_responseBody; }$/;"	f	class:HttpRequest
GetScriptFile	src/SiaSession.cpp	/^const char * TSessionLua::GetScriptFile()$/;"	f	class:TSessionLua
GetSessionByCallId	src/SiaManager.cpp	/^SESSIONIDTYPE TSiaManager::GetSessionByCallId(const char * callid)$/;"	f	class:TSiaManager
GetSessionByID	src/SiaManager.cpp	/^TSessionLuaPtr TSiaManager::GetSessionByID(const SESSIONIDTYPE & id)$/;"	f	class:TSiaManager
GetStateByEvent	src/SiaSession.cpp	/^const std::string TSessionLua::GetStateByEvent(const std::string & eventname)$/;"	f	class:TSessionLua
GetStationNo	src/SiaSession.cpp	/^int TSessionLua::GetStationNo()$/;"	f	class:TSessionLua
GetStatus	src/HttpRequest.h	/^	int GetStatus(){ return m_status; }$/;"	f	class:HttpRequest
GetStatus	src/unused/HttpRequest.h	/^	int GetStatus(){ return m_status; }$/;"	f	class:HttpRequest
GetStr	src/tinyxml2.cpp	/^const char* StrPair::GetStr()$/;"	f	class:tinyxml2::StrPair
GetText	src/tinyxml2.cpp	/^const char* XMLElement::GetText() const$/;"	f	class:tinyxml2::XMLElement
GetTimeOut	src/HttpRequest.h	/^	int GetTimeOut(){ return m_timeout; }$/;"	f	class:HttpRequest
GetTimeOut	src/unused/HttpRequest.h	/^	int GetTimeOut(){ return m_timeout; }$/;"	f	class:HttpRequest
GetUri	src/HttpRequest.h	/^	const std::string & GetUri(){ return m_uri; }$/;"	f	class:HttpRequest
GetUri	src/unused/HttpRequest.h	/^	const std::string & GetUri(){ return m_uri; }$/;"	f	class:HttpRequest
GetVersion	src/cfgFile.cpp	/^uint32_t CTCfgFile::GetVersion (void)$/;"	f	class:CTCfgFile
GetVersion	src/unused/cfgFile.cpp	/^uint32_t CTCfgFile::GetVersion (void)$/;"	f	class:CTCfgFile
H	src/unused/MD5.cpp	/^	inline MD5::uint4 MD5::H(uint4 x, uint4 y, uint4 z) {$/;"	f	class:helper::MD5
HEARTBEAT_TIMEOUT	src/TcpClientModule.cpp	16;"	d	file:
HEARTBEAT_TIMEOUT	src/TcpServerModule.cpp	24;"	d	file:
HH	src/unused/MD5.cpp	/^	inline void MD5::HH(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:helper::MD5
HIREDIS_MAJOR	include/hiredis/hiredis.h	46;"	d
HIREDIS_MINOR	include/hiredis/hiredis.h	47;"	d
HIREDIS_PATCH	include/hiredis/hiredis.h	48;"	d
HIREDIS_SONAME	include/hiredis/hiredis.h	49;"	d
HISTLEN	acdd.h	24;"	d
HTTPREQUEST_HEADER	src/HttpRequest.h	2;"	d
HTTPREQUEST_HEADER	src/unused/HttpRequest.h	2;"	d
HTTP_REQ_CONNECT	src/HttpRequest.h	/^		HTTP_REQ_CONNECT = 1 << 7,$/;"	e	enum:HttpRequest::http_method
HTTP_REQ_CONNECT	src/unused/HttpRequest.h	/^		HTTP_REQ_CONNECT = 1 << 7,$/;"	e	enum:HttpRequest::http_method
HTTP_REQ_DELETE	src/HttpRequest.h	/^		HTTP_REQ_DELETE = 1 << 4,$/;"	e	enum:HttpRequest::http_method
HTTP_REQ_DELETE	src/unused/HttpRequest.h	/^		HTTP_REQ_DELETE = 1 << 4,$/;"	e	enum:HttpRequest::http_method
HTTP_REQ_GET	src/HttpRequest.h	/^		HTTP_REQ_GET = 1 << 0,$/;"	e	enum:HttpRequest::http_method
HTTP_REQ_GET	src/unused/HttpRequest.h	/^		HTTP_REQ_GET = 1 << 0,$/;"	e	enum:HttpRequest::http_method
HTTP_REQ_HEAD	src/HttpRequest.h	/^		HTTP_REQ_HEAD = 1 << 2,$/;"	e	enum:HttpRequest::http_method
HTTP_REQ_HEAD	src/unused/HttpRequest.h	/^		HTTP_REQ_HEAD = 1 << 2,$/;"	e	enum:HttpRequest::http_method
HTTP_REQ_OPTIONS	src/HttpRequest.h	/^		HTTP_REQ_OPTIONS = 1 << 5,$/;"	e	enum:HttpRequest::http_method
HTTP_REQ_OPTIONS	src/unused/HttpRequest.h	/^		HTTP_REQ_OPTIONS = 1 << 5,$/;"	e	enum:HttpRequest::http_method
HTTP_REQ_PATCH	src/HttpRequest.h	/^		HTTP_REQ_PATCH = 1 << 8$/;"	e	enum:HttpRequest::http_method
HTTP_REQ_PATCH	src/unused/HttpRequest.h	/^		HTTP_REQ_PATCH = 1 << 8$/;"	e	enum:HttpRequest::http_method
HTTP_REQ_POST	src/HttpRequest.h	/^		HTTP_REQ_POST = 1 << 1,$/;"	e	enum:HttpRequest::http_method
HTTP_REQ_POST	src/unused/HttpRequest.h	/^		HTTP_REQ_POST = 1 << 1,$/;"	e	enum:HttpRequest::http_method
HTTP_REQ_PUT	src/HttpRequest.h	/^		HTTP_REQ_PUT = 1 << 3,$/;"	e	enum:HttpRequest::http_method
HTTP_REQ_PUT	src/unused/HttpRequest.h	/^		HTTP_REQ_PUT = 1 << 3,$/;"	e	enum:HttpRequest::http_method
HTTP_REQ_TRACE	src/HttpRequest.h	/^		HTTP_REQ_TRACE = 1 << 6,$/;"	e	enum:HttpRequest::http_method
HTTP_REQ_TRACE	src/unused/HttpRequest.h	/^		HTTP_REQ_TRACE = 1 << 6,$/;"	e	enum:HttpRequest::http_method
HandleCallCleared	src/SiaSession.cpp	/^void TSessionLua::HandleCallCleared(std::shared_ptr<CMessage> &tranInfo)$/;"	f	class:TSessionLua
HandleMessage	src/SiaManager.cpp	/^bool TSiaManager::HandleMessage(std::shared_ptr<CMessage>& tranInfo)$/;"	f	class:TSiaManager
HandleMessage	src/SiaSession.cpp	/^void TSessionLua::HandleMessage(std::shared_ptr<CMessage> &tranInfo)$/;"	f	class:TSessionLua
HandleUserMsg	src/SiaSession.cpp	/^void TSessionLua::HandleUserMsg(std::shared_ptr<CMessage> &tranInfo)$/;"	f	class:TSessionLua
HasBOM	src/tinyxml2.h	/^    bool HasBOM() const {$/;"	f	class:tinyxml2::XMLDocument
HeaderType	src/HttpRequest.h	/^	typedef std::map<std::string, std::string> HeaderType;$/;"	t	class:HttpRequest
HeaderType	src/unused/HttpRequest.h	/^	typedef std::map<std::string, std::string> HeaderType;$/;"	t	class:HttpRequest
HeartbeatTimeout	src/TcpClientModule.cpp	/^void TcpClientModule::HeartbeatTimeout()$/;"	f	class:TcpClientModule
HttpClientModule	src/HttpClientModule.cpp	/^HttpClientModule::HttpClientModule(TSiaManager * own) :m_pOwn(own), m_Idlethread(0)$/;"	f	class:HttpClientModule
HttpClientModule	src/HttpClientModule.h	/^class HttpClientModule{$/;"	c
HttpClientModule	src/unused/HttpClientModule.cpp	/^HttpClientModule::HttpClientModule(TSiaManager * own) :m_pOwn(own), m_Idlethread(0)$/;"	f	class:HttpClientModule
HttpClientModule	src/unused/HttpClientModule.h	/^class HttpClientModule{$/;"	c
HttpClientThread	src/HttpClientModule.cpp	/^HttpClientThread::HttpClientThread(class HttpClientModule * own) :m_Base(NULL), m_Own(own)$/;"	f	class:HttpClientThread
HttpClientThread	src/HttpClientModule.h	/^class HttpClientThread {$/;"	c
HttpClientThread	src/unused/HttpClientModule.cpp	/^HttpClientThread::HttpClientThread(class HttpClientModule * own) :m_Base(NULL), m_Own(own)$/;"	f	class:HttpClientThread
HttpClientThread	src/unused/HttpClientModule.h	/^class HttpClientThread {$/;"	c
HttpRequest	src/HttpRequest.h	/^	HttpRequest(const std::string & sessionId, http_method method, const std::string &uri, const std::string & data = "", int timeout = 0) :m_status(0), m_method(method), m_uri(uri)$/;"	f	class:HttpRequest
HttpRequest	src/HttpRequest.h	/^class HttpRequest{$/;"	c
HttpRequest	src/unused/HttpRequest.h	/^	HttpRequest(const std::string & sessionId, http_method method, const std::string &uri, const std::string & data = "", int timeout = 0) :m_status(0), m_method(method), m_uri(uri)$/;"	f	class:HttpRequest
HttpRequest	src/unused/HttpRequest.h	/^class HttpRequest{$/;"	c
HttpRequestPtr	src/HttpRequest.h	/^typedef HttpRequest*  HttpRequestPtr;$/;"	t
HttpRequestPtr	src/unused/HttpRequest.h	/^typedef HttpRequest*  HttpRequestPtr;$/;"	t
Http_Callback_handle	src/SiaHttpServer.cpp	/^void SiaHttpServer::Http_Callback_handle(struct evhttp_request *req)$/;"	f	class:SiaHttpServer
Http_Listen	src/SiaHttpServer.cpp	/^void SiaHttpServer::Http_Listen()$/;"	f	class:SiaHttpServer
I	src/unused/MD5.cpp	/^	inline MD5::uint4 MD5::I(uint4 x, uint4 y, uint4 z) {$/;"	f	class:helper::MD5
IFNULLRETURNCAUSE	src/base.h	33;"	d
IFNULLRETURNFALSE	src/base.h	25;"	d
IFNULLRETURNFALSE	src/base.h	44;"	d
IFNULLRETURNFALSE	src/testxml.cpp	21;"	d	file:
IFNULLRETURNVOID	src/base.h	29;"	d
IFNULLRETURNVOID	src/base.h	59;"	d
IFNULLRETURNVOID	src/base.h	75;"	d
II	src/unused/MD5.cpp	/^	inline void MD5::II(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:helper::MD5
INCLUDE	Makefile	/^INCLUDE = -I.\/. -I.\/include -I.\/src -I..\/libs\/log4cplus-1.2.0\/include -I\/usr\/local\/include$/;"	m
INFINITE	src/CEventBuffer.h	10;"	d
INI_REMOVE_CR	src/cfgFile.h	7;"	d
INI_REMOVE_CR	src/unused/cfgFile.h	7;"	d
INSTALL_PATH	Makefile	/^INSTALL_PATH=\/usr\/local\/acd\/$/;"	m
INT_SIZE	src/TcpClientModule.cpp	12;"	d	file:
INT_SIZE	src/TcpServerModule.cpp	21;"	d	file:
IPADDRESS	src/server.cpp	13;"	d	file:
Identify	src/tinyxml2.cpp	/^char* XMLDocument::Identify( char* p, XMLNode** node )$/;"	f	class:tinyxml2::XMLDocument
IdleStrategy	src/strategy.cpp	/^IdleStrategy::IdleStrategy()$/;"	f	class:IdleStrategy
IdleStrategy	src/strategy.h	/^class IdleStrategy : public Strategy {$/;"	c
InArgs	include/json/value.h	/^  typedef std::vector<const PathArgument*> InArgs;$/;"	t	class:Json::Path
InitGlobalDir	acdd.cpp	/^void InitGlobalDir()$/;"	f
InsertAfterChild	src/tinyxml2.cpp	/^XMLNode* XMLNode::InsertAfterChild( XMLNode* afterThis, XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode
InsertEndChild	src/tinyxml2.cpp	/^XMLNode* XMLNode::InsertEndChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode
InsertFirstChild	src/tinyxml2.cpp	/^XMLNode* XMLNode::InsertFirstChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode
Int	include/json/config.h	/^typedef int Int;$/;"	t	namespace:Json
Int	include/json/value.h	/^  typedef Json::Int Int;$/;"	t	class:Json::Value
Int64	include/json/config.h	/^typedef __int64 Int64;$/;"	t	namespace:Json
Int64	include/json/config.h	/^typedef int64_t Int64;$/;"	t	namespace:Json
Int64	include/json/value.h	/^  typedef Json::Int64 Int64;$/;"	t	class:Json::Value
IntAttribute	src/tinyxml2.h	/^    int		 IntAttribute( const char* name ) const		{$/;"	f	class:tinyxml2::XMLElement
IntValue	src/tinyxml2.h	/^    int		 IntValue() const				{$/;"	f	class:tinyxml2::XMLAttribute
IsClose	src/SiaSession.cpp	/^bool TSessionLua::IsClose()$/;"	f	class:TSessionLua
IsConnected	src/TcpClientModule.cpp	/^bool TcpClientModule::IsConnected()$/;"	f	class:TcpClientModule
IsConnected	src/TcpServerModule.cpp	/^bool TcpClient::IsConnected()$/;"	f	class:TcpClient
IsExistSubscribeEvent	src/SiaSession.cpp	/^bool TSessionLua::IsExistSubscribeEvent()$/;"	f	class:TSessionLua
IsNameChar	src/tinyxml2.h	/^    inline static bool IsNameChar( unsigned char ch ) {$/;"	f	class:tinyxml2::XMLUtil
IsNameStartChar	src/tinyxml2.h	/^    inline static bool IsNameStartChar( unsigned char ch ) {$/;"	f	class:tinyxml2::XMLUtil
IsUTF8Continuation	src/tinyxml2.h	/^    inline static bool IsUTF8Continuation( const char p ) {$/;"	f	class:tinyxml2::XMLUtil
IsWhiteSpace	src/tinyxml2.h	/^    static bool IsWhiteSpace( char p )					{$/;"	f	class:tinyxml2::XMLUtil
ItemSize	src/tinyxml2.h	/^    virtual int ItemSize() const	{$/;"	f	class:tinyxml2::MemPoolT
JSON	src/ACDReadConfig.h	/^    JSON$/;"	e	enum:OBJECT
JSONCPP_DEPRECATED	include/json/config.h	102;"	d
JSONCPP_DEPRECATED	include/json/config.h	106;"	d
JSONCPP_DEPRECATED	include/json/config.h	108;"	d
JSONCPP_DEPRECATED	include/json/config.h	111;"	d
JSONCPP_DEPRECATED	include/json/config.h	115;"	d
JSONCPP_DISABLE_DLL_INTERFACE_WARNING	include/json/config.h	50;"	d
JSONCPP_DISABLE_DLL_INTERFACE_WARNING	include/json/config.h	55;"	d
JSONCPP_NOEXCEPT	include/json/config.h	87;"	d
JSONCPP_NOEXCEPT	include/json/config.h	90;"	d
JSONCPP_NOEXCEPT	include/json/config.h	93;"	d
JSONCPP_NOEXCEPT	include/json/config.h	96;"	d
JSONCPP_NORETURN	include/json/value.h	32;"	d
JSONCPP_NORETURN	include/json/value.h	34;"	d
JSONCPP_NORETURN	include/json/value.h	36;"	d
JSONCPP_OP_EXPLICIT	include/json/config.h	88;"	d
JSONCPP_OP_EXPLICIT	include/json/config.h	91;"	d
JSONCPP_OP_EXPLICIT	include/json/config.h	94;"	d
JSONCPP_OP_EXPLICIT	include/json/config.h	97;"	d
JSONCPP_OVERRIDE	include/json/config.h	84;"	d
JSONCPP_USING_SECURE_MEMORY	include/json/version.h	16;"	d
JSONCPP_USING_SECURE_MEMORY	include/json/version.h	18;"	d
JSONCPP_VERSION_HEXA	include/json/version.h	11;"	d
JSONCPP_VERSION_MAJOR	include/json/version.h	7;"	d
JSONCPP_VERSION_MINOR	include/json/version.h	8;"	d
JSONCPP_VERSION_PATCH	include/json/version.h	9;"	d
JSONCPP_VERSION_QUALIFIER	include/json/version.h	10;"	d
JSONCPP_VERSION_STRING	include/json/version.h	6;"	d
JSON_API	include/json/config.h	46;"	d
JSON_API	include/json/config.h	49;"	d
JSON_API	include/json/config.h	54;"	d
JSON_API	include/json/config.h	59;"	d
JSON_ASSERT	include/json/assertions.h	23;"	d
JSON_ASSERT	include/json/assertions.h	40;"	d
JSON_ASSERT_MESSAGE	include/json/assertions.h	54;"	d
JSON_AUTOLINK_H_INCLUDED	include/json/autolink.h	7;"	d
JSON_CONFIG_H_INCLUDED	include/json/config.h	7;"	d
JSON_FAIL_MESSAGE	include/json/assertions.h	30;"	d
JSON_FAIL_MESSAGE	include/json/assertions.h	44;"	d
JSON_FORWARDS_H_INCLUDED	include/json/forwards.h	7;"	d
JSON_HAS_INT64	include/json/config.h	135;"	d
JSON_HAS_INT64	include/json/config.h	147;"	d
JSON_JSON_H_INCLUDED	include/json/json.h	7;"	d
JSON_USE_CPPTL	include/json/config.h	41;"	d
JSON_USE_EXCEPTION	include/json/config.h	30;"	d
JSON_USE_INT64_DOUBLE_CONVERSION	include/json/config.h	119;"	d
JSON_VERSION_H_INCLUDED	include/json/version.h	4;"	d
JSON_WRITER_H_INCLUDED	include/json/writer.h	7;"	d
Json	include/json/allocator.h	/^namespace Json {$/;"	n
Json	include/json/config.h	/^namespace Json {$/;"	n
Json	include/json/features.h	/^namespace Json {$/;"	n
Json	include/json/forwards.h	/^namespace Json {$/;"	n
Json	include/json/reader.h	/^namespace Json {$/;"	n
Json	include/json/value.h	/^namespace Json {$/;"	n
Json	include/json/writer.h	/^namespace Json {$/;"	n
KEY_DELETE	acdd.h	34;"	d
KEY_DOWN	acdd.h	26;"	d
KEY_INSERT	acdd.h	32;"	d
KEY_LEFT	acdd.h	30;"	d
KEY_RIGHT	acdd.h	31;"	d
KEY_TAB	acdd.h	27;"	d
KEY_UP	acdd.h	25;"	d
KV	src/strategy.cpp	/^struct KV {$/;"	s	file:
KeyText	src/cfgFile.h	/^   char          KeyText [128];$/;"	m	struct:__anon11
KeyText	src/unused/cfgFile.h	/^   char          KeyText [128];$/;"	m	struct:__anon10
Kind	include/json/value.h	/^  enum Kind { kindNone = 0, kindIndex, kindKey };$/;"	g	class:Json::PathArgument
LBRedis	src/ACDCallNum.cpp	/^LBRedis::LBRedis(std::string & path)$/;"	f	class:LBRedis
LBRedis	src/ACDCallNum.h	/^class LBRedis {$/;"	c
LB_CM	src/ACDReadConfig.h	/^	LB_CM,$/;"	e	enum:CONFIG
LB_MYSQL	src/ACDReadConfig.h	/^	LB_MYSQL,$/;"	e	enum:CONFIG
LB_PROMETHEUS	src/ACDReadConfig.h	/^	LB_PROMETHEUS$/;"	e	enum:CONFIG
LB_REDIS	src/ACDReadConfig.h	/^	LB_REDIS,$/;"	e	enum:CONFIG
LB_SELF	src/ACDReadConfig.h	/^	LB_SELF,$/;"	e	enum:CONFIG
LB_SIA	src/ACDReadConfig.h	/^	LB_SIA,$/;"	e	enum:CONFIG
LDFLAGS	Makefile	/^LDFLAGS= -L\/usr\/lib64\/mysql\/ -lmysqlclient -L.\/. -L\/usr\/local\/lib -L\/usr\/lib64 -Wl,-Bstatic -static-libstdc++ -static-libgcc -levent_extra -levent_core -levent_pthreads   -Wl,-E -llua -Wl,-Bdynamic -lpthread -lm -ldl -lrt -ljsoncpp -luuid -llog4cplus -Wl,-rpath=.\/libs$/;"	m
LDJSONCPPFLAGS	Makefile	/^LDJSONCPPFLAGS = -L.\/lib .\/lib\/libjsoncpp.a .\/lib\/libhiredis.a$/;"	m
LDPROMETHEUSFLAGS	Makefile	/^LDPROMETHEUSFLAGS = -L\/usr\/local\/lib64 \/usr\/local\/lib64\/libprometheus-cpp-pull.a \/usr\/local\/lib64\/libprometheus-cpp-core.a \/usr\/local\/lib64\/libprometheus-cpp-push.a -lpthread -lz$/;"	m
LF	src/tinyxml2.cpp	/^static const char LF = LINE_FEED;$/;"	v	file:
LINE_FEED	src/tinyxml2.cpp	/^static const char LINE_FEED				= (char)0x0a;			\/\/ all line endings are normalized to LF$/;"	v	file:
LINK	Makefile	/^LINK = g++$/;"	m
LISTENQ	src/server.cpp	16;"	d	file:
LOGIN_TIMEOUT	src/TcpServerModule.cpp	23;"	d	file:
LargestInt	include/json/config.h	/^typedef Int64 LargestInt;$/;"	t	namespace:Json
LargestInt	include/json/config.h	/^typedef int LargestInt;$/;"	t	namespace:Json
LargestInt	include/json/value.h	/^  typedef Json::LargestInt LargestInt;$/;"	t	class:Json::Value
LargestUInt	include/json/config.h	/^typedef UInt64 LargestUInt;$/;"	t	namespace:Json
LargestUInt	include/json/config.h	/^typedef unsigned int LargestUInt;$/;"	t	namespace:Json
LargestUInt	include/json/value.h	/^  typedef Json::LargestUInt LargestUInt;$/;"	t	class:Json::Value
LastChild	src/tinyxml2.h	/^    XMLHandle LastChild()													{$/;"	f	class:tinyxml2::XMLHandle
LastChild	src/tinyxml2.h	/^    XMLNode*		LastChild()								{$/;"	f	class:tinyxml2::XMLNode
LastChild	src/tinyxml2.h	/^    const XMLConstHandle LastChild()	const										{$/;"	f	class:tinyxml2::XMLConstHandle
LastChild	src/tinyxml2.h	/^    const XMLNode*	LastChild() const						{$/;"	f	class:tinyxml2::XMLNode
LastChildElement	src/tinyxml2.cpp	/^const XMLElement* XMLNode::LastChildElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode
LastChildElement	src/tinyxml2.h	/^    XMLElement* LastChildElement( const char* value=0 )	{$/;"	f	class:tinyxml2::XMLNode
LastChildElement	src/tinyxml2.h	/^    XMLHandle LastChildElement( const char* _value=0 )						{$/;"	f	class:tinyxml2::XMLHandle
LastChildElement	src/tinyxml2.h	/^    const XMLConstHandle LastChildElement( const char* _value=0 ) const				{$/;"	f	class:tinyxml2::XMLConstHandle
LinkEndChild	src/tinyxml2.h	/^    XMLNode* LinkEndChild( XMLNode* addThis )	{$/;"	f	class:tinyxml2::XMLNode
LoadConfig	src/MySql.cpp	/^	bool MySql::LoadConfig(const std::string & configContext)$/;"	f	class:DataBase::MySql
LoadConfig	src/MySqlModule.cpp	/^	bool MySqlModule::LoadConfig(const std::string & configContext)$/;"	f	class:chilli::DataBase::MySqlModule
LoadFile	src/tinyxml2.cpp	/^XMLError XMLDocument::LoadFile( FILE* fp )$/;"	f	class:tinyxml2::XMLDocument
LoadFile	src/tinyxml2.cpp	/^XMLError XMLDocument::LoadFile( const char* filename )$/;"	f	class:tinyxml2::XMLDocument
LoadSiaConfig	src/SiaManager.cpp	/^void TSiaManager::LoadSiaConfig()$/;"	f	class:TSiaManager
Location	include/json/reader.h	/^  typedef const Char* Location;$/;"	t	class:Json::Reader
LogicError	include/json/value.h	/^class JSON_API LogicError : public Exception {$/;"	c	namespace:Json
Login	src/SSModule.cpp	/^void SSMoudle::Login()$/;"	f	class:SSMoudle
Login	src/SSModuleS.cpp	/^void SSMoudle::Login()$/;"	f	class:SSMoudle
Login	src/SiaTcpMonitor.cpp	/^void SiaTcpMonitor::Login()$/;"	f	class:SiaTcpMonitor
Login	src/StatModule.cpp	/^void StatMoudle::Login()$/;"	f	class:StatMoudle
MANAGERQUEUE	src/SiaManager.h	/^typedef helper::CEventBuffer<std::shared_ptr<CMessage>>  MANAGERQUEUE;$/;"	t
MAXBUFFER	src/CEventBuffer.h	/^	const unsigned long MAXBUFFER;$/;"	m	class:helper::CEventBuffer
MAXSIZE	src/server.cpp	15;"	d	file:
MAX_PATH	src/SiaManager.h	21;"	d
MAX_SIA_SERVER_STR_LENGTH	src/siaserver.cpp	21;"	d	file:
MD5	src/unused/MD5.cpp	/^	MD5::MD5()$/;"	f	class:helper::MD5
MD5	src/unused/MD5.cpp	/^	MD5::MD5(const std::string &text)$/;"	f	class:helper::MD5
MD5	src/unused/MD5.h	/^	class MD5$/;"	c	namespace:helper
MIN_SESSION_NUM	src/SiaManager.cpp	29;"	d	file:
MIN_THREAD_NUM	src/SiaManager.cpp	30;"	d	file:
MODULE_APP	Makefile	/^MODULE_APP = $(BINDIR)acd$/;"	m
MY_ACDCALLNUM_H_	src/ACDCallNum.h	12;"	d
MY_ACDNUMBERPOOL_H_	src/ACDNumberPool.h	12;"	d
MY_ACDREADCONFIG_H_	src/ACDReadConfig.h	12;"	d
MY_BASE_H_	src/base.h	12;"	d
MY_SIAPROMETHEUS_H_	src/SiaPrometheus.h	12;"	d
MY_STRATEGY_H_	src/strategy.h	12;"	d
MakeNewEntry	src/cfgFile.cpp	/^struct CFGIENTRY *CTCfgFile::MakeNewEntry (void)$/;"	f	class:CTCfgFile
MakeNewEntry	src/unused/cfgFile.cpp	/^struct CFGIENTRY *CTCfgFile::MakeNewEntry (void)$/;"	f	class:CTCfgFile
Mem	src/tinyxml2.h	/^    T* Mem()							{$/;"	f	class:tinyxml2::DynArray
Mem	src/tinyxml2.h	/^    const T* Mem() const				{$/;"	f	class:tinyxml2::DynArray
MemPool	src/tinyxml2.h	/^    MemPool() {}$/;"	f	class:tinyxml2::MemPool
MemPool	src/tinyxml2.h	/^class MemPool$/;"	c	namespace:tinyxml2
MemPoolT	src/tinyxml2.h	/^    MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}$/;"	f	class:tinyxml2::MemPoolT
MemPoolT	src/tinyxml2.h	/^class MemPoolT : public MemPool$/;"	c	namespace:tinyxml2
Members	include/json/value.h	/^  typedef std::vector<String> Members;$/;"	t	class:Json::Value
MyMutex	src/ACDCallNum.cpp	/^MyMutex::MyMutex()$/;"	f	class:MyMutex
MyMutex	src/ACDCallNum.h	/^class MyMutex {$/;"	c
MySql	src/MySql.cpp	/^	MySql::MySql()$/;"	f	class:DataBase::MySql
MySql	src/MySql.cpp	/^	MySql::MySql(std::string & id)$/;"	f	class:DataBase::MySql
MySql	src/MySql.h	/^class MySql$/;"	c	namespace:DataBase
MySqlModule	src/MySqlModule.cpp	/^	MySqlModule::MySqlModule(const std::string & id, uint32_t threadSize) :ProcessModule(id, threadSize)$/;"	f	class:chilli::DataBase::MySqlModule
MySqlModule	src/MySqlModule.h	/^class MySqlModule$/;"	c	namespace:DataBase
NEEDS_DELETE	src/tinyxml2.h	/^        NEEDS_DELETE = 0x200$/;"	e	enum:tinyxml2::StrPair::__anon2
NEEDS_ENTITY_PROCESSING	src/tinyxml2.h	/^        NEEDS_ENTITY_PROCESSING			= 0x01,$/;"	e	enum:tinyxml2::StrPair::__anon1
NEEDS_FLUSH	src/tinyxml2.h	/^        NEEDS_FLUSH = 0x100,$/;"	e	enum:tinyxml2::StrPair::__anon2
NEEDS_NEWLINE_NORMALIZATION	src/tinyxml2.h	/^        NEEDS_NEWLINE_NORMALIZATION		= 0x02,$/;"	e	enum:tinyxml2::StrPair::__anon1
NORMAL_TYPE	acdd.h	/^	NORMAL_TYPE,$/;"	e	enum:ConsoleType
NUM_ENTITIES	src/tinyxml2.cpp	/^static const int NUM_ENTITIES = 5;$/;"	m	namespace:tinyxml2	file:
Name	src/tinyxml2.cpp	/^const char* XMLAttribute::Name() const $/;"	f	class:tinyxml2::XMLAttribute
Name	src/tinyxml2.h	/^    const char* Name() const		{$/;"	f	class:tinyxml2::XMLElement
NewComment	src/tinyxml2.cpp	/^XMLComment* XMLDocument::NewComment( const char* str )$/;"	f	class:tinyxml2::XMLDocument
NewDeclaration	src/tinyxml2.cpp	/^XMLDeclaration* XMLDocument::NewDeclaration( const char* str )$/;"	f	class:tinyxml2::XMLDocument
NewElement	src/tinyxml2.cpp	/^XMLElement* XMLDocument::NewElement( const char* name )$/;"	f	class:tinyxml2::XMLDocument
NewSession	src/SiaManager.cpp	/^SESSIONIDTYPE TSiaManager::NewSession()$/;"	f	class:TSiaManager
NewSessionByCallId	src/SiaManager.cpp	/^SESSIONIDTYPE TSiaManager::NewSessionByCallId(const char * callid)$/;"	f	class:TSiaManager
NewText	src/tinyxml2.cpp	/^XMLText* XMLDocument::NewText( const char* str )$/;"	f	class:tinyxml2::XMLDocument
NewUnknown	src/tinyxml2.cpp	/^XMLUnknown* XMLDocument::NewUnknown( const char* str )$/;"	f	class:tinyxml2::XMLDocument
Next	src/tinyxml2.h	/^    const XMLAttribute* Next() const {$/;"	f	class:tinyxml2::XMLAttribute
NextSibling	src/tinyxml2.h	/^    XMLHandle NextSibling()													{$/;"	f	class:tinyxml2::XMLHandle
NextSibling	src/tinyxml2.h	/^    XMLNode*	NextSibling()								{$/;"	f	class:tinyxml2::XMLNode
NextSibling	src/tinyxml2.h	/^    const XMLConstHandle NextSibling() const										{$/;"	f	class:tinyxml2::XMLConstHandle
NextSibling	src/tinyxml2.h	/^    const XMLNode*	NextSibling() const						{$/;"	f	class:tinyxml2::XMLNode
NextSiblingElement	src/tinyxml2.cpp	/^const XMLElement* XMLNode::NextSiblingElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode
NextSiblingElement	src/tinyxml2.h	/^    XMLElement*	NextSiblingElement( const char* value=0 )	{$/;"	f	class:tinyxml2::XMLNode
NextSiblingElement	src/tinyxml2.h	/^    XMLHandle NextSiblingElement( const char* _value=0 )					{$/;"	f	class:tinyxml2::XMLHandle
NextSiblingElement	src/tinyxml2.h	/^    const XMLConstHandle NextSiblingElement( const char* _value=0 ) const			{$/;"	f	class:tinyxml2::XMLConstHandle
NoChildren	src/tinyxml2.h	/^    bool NoChildren() const					{$/;"	f	class:tinyxml2::XMLNode
Nodes	include/json/reader.h	/^  typedef std::stack<Value*> Nodes;$/;"	t	class:Json::Reader
NumberPool	src/ACDNumberPool.h	/^class NumberPool {$/;"	c
OBJ	Makefile	/^OBJ = $(OUTPUTOBJ)acdd.o $(OUTPUTOBJ)SiaManager.o \\$/;"	m
OBJECT	src/ACDReadConfig.h	/^enum OBJECT {$/;"	g
OPEN	src/tinyxml2.h	/^        OPEN,		\/\/ <foo>$/;"	e	enum:tinyxml2::XMLElement::__anon5
OUTPUTOBJ	Makefile	/^OUTPUTOBJ = .\/obj\/$/;"	m
ObjectValues	include/json/value.h	/^  typedef CppTL::SmallMap<CZString, Value> ObjectValues;$/;"	t	class:Json::Value
ObjectValues	include/json/value.h	/^  typedef std::map<CZString, Value> ObjectValues;$/;"	t	class:Json::Value
OnAccept	src/SiaTcpServer.cpp	/^TcpClient * SiaTCPServer::OnAccept(struct event_base * base, evutil_socket_t fd)$/;"	f	class:SiaTCPServer
OnAccept	src/TcpServerModule.cpp	/^TcpClient * TcpServerModule::OnAccept(event_base * base, evutil_socket_t fd)$/;"	f	class:TcpServerModule
OnConnected	src/SiaManager.cpp	/^bool TSiaManager::OnConnected(void)$/;"	f	class:TSiaManager
OnDisconnect	src/SiaManager.cpp	/^void TSiaManager::OnDisconnect(void)$/;"	f	class:TSiaManager
OnWriteble	src/SiaTcpServer.cpp	/^void SiaTCPServer::OnWriteble()$/;"	f	class:SiaTCPServer
OnWriteble	src/TcpServerModule.cpp	/^void TcpServerModule::OnWriteble()$/;"	f	class:TcpServerModule
Open	src/cfgFile.cpp	/^int32_t CTCfgFile::Open(const char * FileName)$/;"	f	class:CTCfgFile
Open	src/unused/cfgFile.cpp	/^int32_t CTCfgFile::Open(const char * FileName)$/;"	f	class:CTCfgFile
OpenElement	src/tinyxml2.cpp	/^void XMLPrinter::OpenElement( const char* name, bool compactMode )$/;"	f	class:tinyxml2::XMLPrinter
PING_INTERVAL	src/TcpClientModule.cpp	13;"	d	file:
PORT	src/server.cpp	14;"	d	file:
PRESERVE_WHITESPACE	src/tinyxml2.h	/^    PRESERVE_WHITESPACE,$/;"	e	enum:tinyxml2::Whitespace
PROMPT_OP	acdd.h	33;"	d
Parent	src/tinyxml2.h	/^    XMLNode* Parent()						{$/;"	f	class:tinyxml2::XMLNode
Parent	src/tinyxml2.h	/^    const XMLNode*	Parent() const			{$/;"	f	class:tinyxml2::XMLNode
Parse	src/tinyxml2.cpp	/^XMLError XMLDocument::Parse( const char* p, size_t len )$/;"	f	class:tinyxml2::XMLDocument
ParseAttributes	src/tinyxml2.cpp	/^char* XMLElement::ParseAttributes( char* p )$/;"	f	class:tinyxml2::XMLElement
ParseDeep	src/tinyxml2.cpp	/^char* XMLAttribute::ParseDeep( char* p, bool processEntities )$/;"	f	class:tinyxml2::XMLAttribute
ParseDeep	src/tinyxml2.cpp	/^char* XMLComment::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLComment
ParseDeep	src/tinyxml2.cpp	/^char* XMLDeclaration::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLDeclaration
ParseDeep	src/tinyxml2.cpp	/^char* XMLElement::ParseDeep( char* p, StrPair* strPair )$/;"	f	class:tinyxml2::XMLElement
ParseDeep	src/tinyxml2.cpp	/^char* XMLNode::ParseDeep( char* p, StrPair* parentEnd )$/;"	f	class:tinyxml2::XMLNode
ParseDeep	src/tinyxml2.cpp	/^char* XMLText::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLText
ParseDeep	src/tinyxml2.cpp	/^char* XMLUnknown::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLUnknown
ParseName	src/tinyxml2.cpp	/^char* StrPair::ParseName( char* p )$/;"	f	class:tinyxml2::StrPair
ParseText	src/tinyxml2.cpp	/^char* StrPair::ParseText( char* p, const char* endTag, int strFlags )$/;"	f	class:tinyxml2::StrPair
Path	include/json/value.h	/^class JSON_API Path {$/;"	c	namespace:Json
PathArgument	include/json/value.h	/^class JSON_API PathArgument {$/;"	c	namespace:Json
PeekTop	src/tinyxml2.h	/^    const T& PeekTop() const            {$/;"	f	class:tinyxml2::DynArray
Ping	src/SSModule.cpp	/^void SSMoudle::Ping()$/;"	f	class:SSMoudle
Ping	src/SSModuleS.cpp	/^void SSMoudle::Ping()$/;"	f	class:SSMoudle
Ping	src/SiaTcpMonitor.cpp	/^void SiaTcpMonitor::Ping()$/;"	f	class:SiaTcpMonitor
Ping	src/StatModule.cpp	/^void StatMoudle::Ping()$/;"	f	class:StatMoudle
Pop	src/tinyxml2.h	/^    T Pop() {$/;"	f	class:tinyxml2::DynArray
PopArr	src/tinyxml2.h	/^    void PopArr( int count ) {$/;"	f	class:tinyxml2::DynArray
PrecisionType	include/json/value.h	/^enum PrecisionType {$/;"	g	namespace:Json
PreviousSibling	src/tinyxml2.h	/^    XMLHandle PreviousSibling()												{$/;"	f	class:tinyxml2::XMLHandle
PreviousSibling	src/tinyxml2.h	/^    XMLNode*	PreviousSibling()							{$/;"	f	class:tinyxml2::XMLNode
PreviousSibling	src/tinyxml2.h	/^    const XMLConstHandle PreviousSibling() const									{$/;"	f	class:tinyxml2::XMLConstHandle
PreviousSibling	src/tinyxml2.h	/^    const XMLNode*	PreviousSibling() const					{$/;"	f	class:tinyxml2::XMLNode
PreviousSiblingElement	src/tinyxml2.cpp	/^const XMLElement* XMLNode::PreviousSiblingElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode
PreviousSiblingElement	src/tinyxml2.h	/^    XMLElement*	PreviousSiblingElement( const char* value=0 ) {$/;"	f	class:tinyxml2::XMLNode
PreviousSiblingElement	src/tinyxml2.h	/^    XMLHandle PreviousSiblingElement( const char* _value=0 )				{$/;"	f	class:tinyxml2::XMLHandle
PreviousSiblingElement	src/tinyxml2.h	/^    const XMLConstHandle PreviousSiblingElement( const char* _value=0 ) const		{$/;"	f	class:tinyxml2::XMLConstHandle
Print	src/tinyxml2.cpp	/^void XMLDocument::Print( XMLPrinter* streamer ) const$/;"	f	class:tinyxml2::XMLDocument
Print	src/tinyxml2.cpp	/^void XMLPrinter::Print( const char* format, ... )$/;"	f	class:tinyxml2::XMLPrinter
PrintError	src/tinyxml2.cpp	/^void XMLDocument::PrintError() const$/;"	f	class:tinyxml2::XMLDocument
PrintSpace	src/tinyxml2.cpp	/^void XMLPrinter::PrintSpace( int depth )$/;"	f	class:tinyxml2::XMLPrinter
PrintString	src/tinyxml2.cpp	/^void XMLPrinter::PrintString( const char* p, bool restricted )$/;"	f	class:tinyxml2::XMLPrinter
ProcessEntities	src/tinyxml2.h	/^    bool ProcessEntities() const		{$/;"	f	class:tinyxml2::XMLDocument
ProcessRecv	src/SiaTcpMonitor.cpp	/^void SiaTcpMonitor::ProcessRecv(const std::string & data)$/;"	f	class:SiaTcpMonitor
ProcessRequest	src/HttpClientModule.cpp	/^void HttpClientThread::ProcessRequest()$/;"	f	class:HttpClientThread
ProcessRequest	src/unused/HttpClientModule.cpp	/^void HttpClientThread::ProcessRequest()$/;"	f	class:HttpClientThread
ProcessTimer	src/SiaManager.cpp	/^void CSIATimer::ProcessTimer(CTimerElementPtr e)$/;"	f	class:CSIATimer
Push	src/tinyxml2.h	/^    void Push( T t ) {$/;"	f	class:tinyxml2::DynArray
PushArr	src/tinyxml2.h	/^    T* PushArr( int count ) {$/;"	f	class:tinyxml2::DynArray
PushAttribute	src/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, bool v )$/;"	f	class:tinyxml2::XMLPrinter
PushAttribute	src/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, const char* value )$/;"	f	class:tinyxml2::XMLPrinter
PushAttribute	src/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, double v )$/;"	f	class:tinyxml2::XMLPrinter
PushAttribute	src/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, int v )$/;"	f	class:tinyxml2::XMLPrinter
PushAttribute	src/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, unsigned v )$/;"	f	class:tinyxml2::XMLPrinter
PushComment	src/tinyxml2.cpp	/^void XMLPrinter::PushComment( const char* comment )$/;"	f	class:tinyxml2::XMLPrinter
PushDeclaration	src/tinyxml2.cpp	/^void XMLPrinter::PushDeclaration( const char* value )$/;"	f	class:tinyxml2::XMLPrinter
PushHeader	src/tinyxml2.cpp	/^void XMLPrinter::PushHeader( bool writeBOM, bool writeDec )$/;"	f	class:tinyxml2::XMLPrinter
PushText	src/tinyxml2.cpp	/^void XMLPrinter::PushText( bool value )$/;"	f	class:tinyxml2::XMLPrinter
PushText	src/tinyxml2.cpp	/^void XMLPrinter::PushText( const char* text, bool cdata )$/;"	f	class:tinyxml2::XMLPrinter
PushText	src/tinyxml2.cpp	/^void XMLPrinter::PushText( double value )$/;"	f	class:tinyxml2::XMLPrinter
PushText	src/tinyxml2.cpp	/^void XMLPrinter::PushText( float value )$/;"	f	class:tinyxml2::XMLPrinter
PushText	src/tinyxml2.cpp	/^void XMLPrinter::PushText( int value )$/;"	f	class:tinyxml2::XMLPrinter
PushText	src/tinyxml2.cpp	/^void XMLPrinter::PushText( unsigned value )$/;"	f	class:tinyxml2::XMLPrinter
PushUnknown	src/tinyxml2.cpp	/^void XMLPrinter::PushUnknown( const char* value )$/;"	f	class:tinyxml2::XMLPrinter
Put	src/CEventBuffer.h	/^	size_t Put(T &&data) {$/;"	f	class:helper::CEventBuffer
Put	src/CEventBuffer.h	/^	size_t Put(const T &data){$/;"	f	class:helper::CEventBuffer
PutMessage	src/HttpClientModule.cpp	/^void HttpClientModule::PutMessage(const std::string & uri, const std::string & sessionid, const std::string & cmd, const std::string & data, HttpRequest::http_method method, const HttpRequest::HeaderType & header, int timeout)$/;"	f	class:HttpClientModule
PutMessage	src/SiaTcpServer.cpp	/^void SiaTCPServer::PutMessage(int station, const std::string & sessionid, const std::string & data)$/;"	f	class:SiaTCPServer
PutMessage	src/TcpClientModule.cpp	/^void TcpClientModule::PutMessage(const std::string & sessionid, const std::string & data)$/;"	f	class:TcpClientModule
PutMessage	src/TcpServerModule.cpp	/^void TcpServerModule::PutMessage(int station, const std::string & sessionid, const std::string & data)$/;"	f	class:TcpServerModule
PutMessage	src/unused/HttpClientModule.cpp	/^void HttpClientModule::PutMessage(const std::string & uri, const std::string & sessionid, const std::string & cmd, const std::string & data, HttpRequest::http_method method, const HttpRequest::HeaderType & header, int timeout)$/;"	f	class:HttpClientModule
QueryAttribute	src/tinyxml2.h	/^	int QueryAttribute( const char* name, bool* value ) const {$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	src/tinyxml2.h	/^	int QueryAttribute( const char* name, double* value ) const {$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	src/tinyxml2.h	/^	int QueryAttribute( const char* name, float* value ) const {$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	src/tinyxml2.h	/^	int QueryAttribute( const char* name, int* value ) const {$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	src/tinyxml2.h	/^	int QueryAttribute( const char* name, unsigned int* value ) const {$/;"	f	class:tinyxml2::XMLElement
QueryBoolAttribute	src/tinyxml2.h	/^    XMLError QueryBoolAttribute( const char* name, bool* value ) const				{$/;"	f	class:tinyxml2::XMLElement
QueryBoolText	src/tinyxml2.cpp	/^XMLError XMLElement::QueryBoolText( bool* bval ) const$/;"	f	class:tinyxml2::XMLElement
QueryBoolValue	src/tinyxml2.cpp	/^XMLError XMLAttribute::QueryBoolValue( bool* value ) const$/;"	f	class:tinyxml2::XMLAttribute
QueryDoubleAttribute	src/tinyxml2.h	/^    XMLError QueryDoubleAttribute( const char* name, double* value ) const			{$/;"	f	class:tinyxml2::XMLElement
QueryDoubleText	src/tinyxml2.cpp	/^XMLError XMLElement::QueryDoubleText( double* dval ) const$/;"	f	class:tinyxml2::XMLElement
QueryDoubleValue	src/tinyxml2.cpp	/^XMLError XMLAttribute::QueryDoubleValue( double* value ) const$/;"	f	class:tinyxml2::XMLAttribute
QueryFloatAttribute	src/tinyxml2.h	/^    XMLError QueryFloatAttribute( const char* name, float* value ) const			{$/;"	f	class:tinyxml2::XMLElement
QueryFloatText	src/tinyxml2.cpp	/^XMLError XMLElement::QueryFloatText( float* fval ) const$/;"	f	class:tinyxml2::XMLElement
QueryFloatValue	src/tinyxml2.cpp	/^XMLError XMLAttribute::QueryFloatValue( float* value ) const$/;"	f	class:tinyxml2::XMLAttribute
QueryIntAttribute	src/tinyxml2.h	/^    XMLError QueryIntAttribute( const char* name, int* value ) const				{$/;"	f	class:tinyxml2::XMLElement
QueryIntText	src/tinyxml2.cpp	/^XMLError XMLElement::QueryIntText( int* ival ) const$/;"	f	class:tinyxml2::XMLElement
QueryIntValue	src/tinyxml2.cpp	/^XMLError XMLAttribute::QueryIntValue( int* value ) const$/;"	f	class:tinyxml2::XMLAttribute
QueryUnsignedAttribute	src/tinyxml2.h	/^    XMLError QueryUnsignedAttribute( const char* name, unsigned int* value ) const	{$/;"	f	class:tinyxml2::XMLElement
QueryUnsignedText	src/tinyxml2.cpp	/^XMLError XMLElement::QueryUnsignedText( unsigned* uval ) const$/;"	f	class:tinyxml2::XMLElement
QueryUnsignedValue	src/tinyxml2.cpp	/^XMLError XMLAttribute::QueryUnsignedValue( unsigned int* value ) const$/;"	f	class:tinyxml2::XMLAttribute
REDIS_BLOCK	include/hiredis/hiredis.h	53;"	d
REDIS_CONNECTED	include/hiredis/hiredis.h	57;"	d
REDIS_CONNECT_RETRIES	include/hiredis/hiredis.h	94;"	d
REDIS_CONN_TCP	include/hiredis/hiredis.h	/^    REDIS_CONN_TCP,$/;"	e	enum:redisConnectionType
REDIS_CONN_UNIX	include/hiredis/hiredis.h	/^    REDIS_CONN_UNIX,$/;"	e	enum:redisConnectionType
REDIS_CONN_USERFD	include/hiredis/hiredis.h	/^    REDIS_CONN_USERFD$/;"	e	enum:redisConnectionType
REDIS_DISCONNECTING	include/hiredis/hiredis.h	63;"	d
REDIS_ERR	include/hiredis/read.h	37;"	d
REDIS_ERR_EOF	include/hiredis/read.h	45;"	d
REDIS_ERR_IO	include/hiredis/read.h	44;"	d
REDIS_ERR_OOM	include/hiredis/read.h	47;"	d
REDIS_ERR_OTHER	include/hiredis/read.h	49;"	d
REDIS_ERR_PROTOCOL	include/hiredis/read.h	46;"	d
REDIS_ERR_TIMEOUT	include/hiredis/read.h	48;"	d
REDIS_FREEING	include/hiredis/hiredis.h	67;"	d
REDIS_INVALID_FD	include/hiredis/hiredis.h	146;"	d
REDIS_INVALID_FD	include/hiredis/hiredis.h	153;"	d
REDIS_IN_CALLBACK	include/hiredis/hiredis.h	70;"	d
REDIS_KEEPALIVE_INTERVAL	include/hiredis/hiredis.h	90;"	d
REDIS_MONITORING	include/hiredis/hiredis.h	76;"	d
REDIS_NO_AUTO_FREE	include/hiredis/hiredis.h	88;"	d
REDIS_OK	include/hiredis/read.h	38;"	d
REDIS_OPTIONS_SET_TCP	include/hiredis/hiredis.h	185;"	d
REDIS_OPTIONS_SET_UNIX	include/hiredis/hiredis.h	190;"	d
REDIS_OPT_NOAUTOFREE	include/hiredis/hiredis.h	138;"	d
REDIS_OPT_NONBLOCK	include/hiredis/hiredis.h	131;"	d
REDIS_OPT_REUSEADDR	include/hiredis/hiredis.h	132;"	d
REDIS_READER_MAX_BUF	include/hiredis/read.h	58;"	d
REDIS_REPLY_ARRAY	include/hiredis/read.h	52;"	d
REDIS_REPLY_ERROR	include/hiredis/read.h	56;"	d
REDIS_REPLY_INTEGER	include/hiredis/read.h	53;"	d
REDIS_REPLY_NIL	include/hiredis/read.h	54;"	d
REDIS_REPLY_STATUS	include/hiredis/read.h	55;"	d
REDIS_REPLY_STRING	include/hiredis/read.h	51;"	d
REDIS_REUSEADDR	include/hiredis/hiredis.h	79;"	d
REDIS_SSL	include/hiredis/hiredis.h	82;"	d
REDIS_SSLIO_H	include/hiredis/sslio.h	2;"	d
REDIS_SUBSCRIBED	include/hiredis/hiredis.h	73;"	d
ReadBOM	src/tinyxml2.cpp	/^const char* XMLUtil::ReadBOM( const char* p, bool* bom )$/;"	f	class:tinyxml2::XMLUtil
ReadBool	src/cfgFile.cpp	/^int32_t CTCfgFile::ReadBool (const char *pSection, const char *pKey, int32_t Default)$/;"	f	class:CTCfgFile
ReadBool	src/unused/cfgFile.cpp	/^int32_t CTCfgFile::ReadBool (const char *pSection, const char *pKey, int32_t Default)$/;"	f	class:CTCfgFile
ReadConfig	src/ACDReadConfig.h	/^    ReadConfig(){}$/;"	f	class:ReadConfig
ReadConfig	src/ACDReadConfig.h	/^class ReadConfig {$/;"	c
ReadConfig2Redis	src/ACDCallNum.cpp	/^ReadConfig2Redis::ReadConfig2Redis()$/;"	f	class:ReadConfig2Redis
ReadConfig2Redis	src/ACDCallNum.h	/^class ReadConfig2Redis {$/;"	c
ReadDouble	src/cfgFile.cpp	/^double CTCfgFile::ReadDouble (const char *pSection, const char *pKey, double Default)$/;"	f	class:CTCfgFile
ReadDouble	src/unused/cfgFile.cpp	/^double CTCfgFile::ReadDouble (const char *pSection, const char *pKey, double Default)$/;"	f	class:CTCfgFile
ReadInt	src/cfgFile.cpp	/^int CTCfgFile::ReadInt (const char *pSection, const char *pKey, int Default)$/;"	f	class:CTCfgFile
ReadInt	src/unused/cfgFile.cpp	/^int CTCfgFile::ReadInt (const char *pSection, const char *pKey, int Default)$/;"	f	class:CTCfgFile
ReadJSONConfig	src/ACDReadConfig.cpp	/^ReadJSONConfig::ReadJSONConfig()$/;"	f	class:ReadJSONConfig
ReadJSONConfig	src/ACDReadConfig.h	/^class ReadJSONConfig : public ReadConfig {$/;"	c
ReadJSONConfig	src/testjson.cpp	/^ReadJSONConfig::ReadJSONConfig()$/;"	f	class:ReadJSONConfig
ReadJSONConfig	src/testjson.cpp	/^class ReadJSONConfig {$/;"	c	file:
ReadString	src/cfgFile.cpp	/^const char *CTCfgFile::ReadString (const char *pSection, const char *pKey, const char *pDefault)$/;"	f	class:CTCfgFile
ReadString	src/unused/cfgFile.cpp	/^const char *CTCfgFile::ReadString (const char *pSection, const char *pKey, const char *pDefault)$/;"	f	class:CTCfgFile
ReadXMLConfig	src/ACDReadConfig.cpp	/^ReadXMLConfig::ReadXMLConfig()$/;"	f	class:ReadXMLConfig
ReadXMLConfig	src/ACDReadConfig.h	/^class ReadXMLConfig: public ReadConfig {$/;"	c
ReadXMLConfig	src/testxml.cpp	/^ReadXMLConfig::ReadXMLConfig()$/;"	f	class:ReadXMLConfig
ReadXMLConfig	src/testxml.cpp	/^class ReadXMLConfig {$/;"	c	file:
Reader	include/json/reader.h	/^class JSON_API Reader {$/;"	c	namespace:Json
RemoveSession	src/SiaManager.cpp	/^TSessionLuaPtr TSiaManager::RemoveSession(const SESSIONIDTYPE & sessionId)$/;"	f	class:TSiaManager
Reset	src/tinyxml2.cpp	/^void StrPair::Reset()$/;"	f	class:tinyxml2::StrPair
ResetHearbeat	src/TcpClientModule.cpp	/^void TcpClientModule::ResetHearbeat()$/;"	f	class:TcpClientModule
ResetHeartbeatTimer	src/TcpServerModule.cpp	/^void TcpClient::ResetHeartbeatTimer()$/;"	f	class:TcpClient
RootElement	src/tinyxml2.h	/^    XMLElement* RootElement()				{$/;"	f	class:tinyxml2::XMLDocument
RootElement	src/tinyxml2.h	/^    const XMLElement* RootElement() const	{$/;"	f	class:tinyxml2::XMLDocument
Run	src/HttpClientModule.cpp	/^void HttpClientThread::Run()$/;"	f	class:HttpClientThread
Run	src/unused/HttpClientModule.cpp	/^void HttpClientThread::Run()$/;"	f	class:HttpClientThread
RuntimeError	include/json/value.h	/^class JSON_API RuntimeError : public Exception {$/;"	c	namespace:Json
S11	src/unused/MD5.cpp	43;"	d	file:
S12	src/unused/MD5.cpp	44;"	d	file:
S13	src/unused/MD5.cpp	45;"	d	file:
S14	src/unused/MD5.cpp	46;"	d	file:
S21	src/unused/MD5.cpp	47;"	d	file:
S22	src/unused/MD5.cpp	48;"	d	file:
S23	src/unused/MD5.cpp	49;"	d	file:
S24	src/unused/MD5.cpp	50;"	d	file:
S31	src/unused/MD5.cpp	51;"	d	file:
S32	src/unused/MD5.cpp	52;"	d	file:
S33	src/unused/MD5.cpp	53;"	d	file:
S34	src/unused/MD5.cpp	54;"	d	file:
S41	src/unused/MD5.cpp	55;"	d	file:
S42	src/unused/MD5.cpp	56;"	d	file:
S43	src/unused/MD5.cpp	57;"	d	file:
S44	src/unused/MD5.cpp	58;"	d	file:
SDS_HDR	include/hiredis/sds.h	86;"	d
SDS_HDR_VAR	include/hiredis/sds.h	85;"	d
SDS_MAX_PREALLOC	include/hiredis/sds.h	36;"	d
SDS_TYPE_16	include/hiredis/sds.h	80;"	d
SDS_TYPE_32	include/hiredis/sds.h	81;"	d
SDS_TYPE_5	include/hiredis/sds.h	78;"	d
SDS_TYPE_5_LEN	include/hiredis/sds.h	87;"	d
SDS_TYPE_64	include/hiredis/sds.h	82;"	d
SDS_TYPE_8	include/hiredis/sds.h	79;"	d
SDS_TYPE_BITS	include/hiredis/sds.h	84;"	d
SDS_TYPE_MASK	include/hiredis/sds.h	83;"	d
SER_BillingRefID	src/CMessage.h	31;"	d
SER_CallID	src/CMessage.h	23;"	d
SER_Called	src/CMessage.h	24;"	d
SER_Caller	src/CMessage.h	25;"	d
SER_CompanyId	src/CMessage.h	30;"	d
SER_Connection	src/CMessage.h	22;"	d
SER_Device	src/CMessage.h	26;"	d
SER_OrgCalled	src/CMessage.h	29;"	d
SER_OrgCaller	src/CMessage.h	28;"	d
SER_SenderUri	src/CMessage.h	27;"	d
SER_SessionID	src/CMessage.h	32;"	d
SESSIONIDTYPE	src/SiaManager.h	/^typedef uint32_t	SESSIONIDTYPE;$/;"	t
SINGLE_QUOTE	src/tinyxml2.cpp	/^static const char SINGLE_QUOTE			= '\\'';$/;"	v	file:
SRC	Makefile	/^SRC = .\/$/;"	m
SSMoudle	src/SSModule.cpp	/^SSMoudle::SSMoudle(TSiaManager * own) :TcpClientModule(own)$/;"	f	class:SSMoudle
SSMoudle	src/SSModule.h	/^class SSMoudle:public TcpClientModule{$/;"	c
SSMoudle	src/SSModuleS.cpp	/^SSMoudle::SSMoudle(TSiaManager * own) :TcpServerModule(own)$/;"	f	class:SSMoudle
SSMoudle	src/SSModuleS.h	/^class SSMoudle:public TcpServerModule{$/;"	c
STR	src/base.h	21;"	d
STR	src/base.h	39;"	d
STR	src/testxml.cpp	20;"	d	file:
STRVERSION	acdd.cpp	46;"	d	file:
STRVERSION	src/StatModule.cpp	30;"	d	file:
SaveFile	src/tinyxml2.cpp	/^XMLError XMLDocument::SaveFile( FILE* fp, bool compact )$/;"	f	class:tinyxml2::XMLDocument
SaveFile	src/tinyxml2.cpp	/^XMLError XMLDocument::SaveFile( const char* filename, bool compact )$/;"	f	class:tinyxml2::XMLDocument
SealElement	src/tinyxml2.cpp	/^void XMLPrinter::SealElement()$/;"	f	class:tinyxml2::XMLPrinter
SecureAllocator	include/json/allocator.h	/^  SecureAllocator() {}$/;"	f	class:Json::SecureAllocator
SecureAllocator	include/json/allocator.h	/^  template <typename U> SecureAllocator(const SecureAllocator<U>&) {}$/;"	f	class:Json::SecureAllocator
SecureAllocator	include/json/allocator.h	/^template <typename T> class SecureAllocator {$/;"	c	namespace:Json
SelfType	include/json/value.h	/^  typedef ValueConstIterator SelfType;$/;"	t	class:Json::ValueConstIterator
SelfType	include/json/value.h	/^  typedef ValueIterator SelfType;$/;"	t	class:Json::ValueIterator
SelfType	include/json/value.h	/^  typedef ValueIteratorBase SelfType;$/;"	t	class:Json::ValueIteratorBase
Send	src/HttpRequest.h	/^	int Send(struct event_base * _base = NULL){$/;"	f	class:HttpRequest
Send	src/TcpClientModule.cpp	/^int TcpClientModule::Send(const char * data, unsigned int len, const std::string & sessionId)$/;"	f	class:TcpClientModule
Send	src/TcpServerModule.cpp	/^int TcpClient::Send(const char * data, unsigned int len, const std::string & sessionId)$/;"	f	class:TcpClient
Send	src/unused/HttpRequest.h	/^	int Send(struct event_base * _base = NULL){$/;"	f	class:HttpRequest
SendMessage	src/SiaManager.cpp	/^void CSIATimer::SendMessage(const CTimerElement * ctimer)$/;"	f	class:CSIATimer
SendMessageToMe	src/SiaManager.cpp	/^void TSiaManager::SendMessageToMe(std::shared_ptr<CMessage>&& tranInfo)$/;"	f	class:TSiaManager
SendMessageToSS	src/SiaManager.cpp	/^void TSiaManager::SendMessageToSS(const std::string & sessionid, const Json::Value & jsonData)$/;"	f	class:TSiaManager
SendMessageToSS	src/SiaManager.cpp	/^void TSiaManager::SendMessageToSS(const std::string & sessionid, const std::string & strData)$/;"	f	class:TSiaManager
SendMessageToStation	src/SiaManager.cpp	/^void TSiaManager::SendMessageToStation(int station, const std::string & sessionid, const std::string & cmd, const Json::Value & jsonData)$/;"	f	class:TSiaManager
SendMessageToStation	src/SiaManager.cpp	/^void TSiaManager::SendMessageToStation(int station, const std::string & sessionid, const std::string & cmd, const std::string & data)$/;"	f	class:TSiaManager
Set	src/tinyxml2.h	/^    void Set( char* start, char* end, int flags ) {$/;"	f	class:tinyxml2::StrPair
SetAttribute	src/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( bool v )$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	src/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( const char* v )$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	src/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( double v )$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	src/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( float v )$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	src/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( int v )$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	src/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( unsigned v )$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	src/tinyxml2.h	/^    void SetAttribute( const char* name, bool value )			{$/;"	f	class:tinyxml2::XMLElement
SetAttribute	src/tinyxml2.h	/^    void SetAttribute( const char* name, const char* value )	{$/;"	f	class:tinyxml2::XMLElement
SetAttribute	src/tinyxml2.h	/^    void SetAttribute( const char* name, double value )		{$/;"	f	class:tinyxml2::XMLElement
SetAttribute	src/tinyxml2.h	/^    void SetAttribute( const char* name, float value )		{$/;"	f	class:tinyxml2::XMLElement
SetAttribute	src/tinyxml2.h	/^    void SetAttribute( const char* name, int value )			{$/;"	f	class:tinyxml2::XMLElement
SetAttribute	src/tinyxml2.h	/^    void SetAttribute( const char* name, unsigned value )		{$/;"	f	class:tinyxml2::XMLElement
SetBOM	src/tinyxml2.h	/^    void SetBOM( bool useBOM ) {$/;"	f	class:tinyxml2::XMLDocument
SetCData	src/tinyxml2.h	/^    void SetCData( bool isCData )			{$/;"	f	class:tinyxml2::XMLText
SetCalled	src/SiaSession.cpp	/^void TSessionLua::SetCalled(const char * called)$/;"	f	class:TSessionLua
SetCaller	src/SiaSession.cpp	/^void TSessionLua::SetCaller(const char * caller)$/;"	f	class:TSessionLua
SetError	src/tinyxml2.cpp	/^void XMLDocument::SetError( XMLError error, const char* str1, const char* str2 )$/;"	f	class:tinyxml2::XMLDocument
SetHangupFunction	src/SiaSession.cpp	/^void TSessionLua::SetHangupFunction(const char *function_name)$/;"	f	class:TSessionLua
SetHeartbeat	src/TcpClientModule.cpp	/^void TcpClientModule::SetHeartbeat()$/;"	f	class:TcpClientModule
SetInternedStr	src/tinyxml2.h	/^    void SetInternedStr( const char* str ) {$/;"	f	class:tinyxml2::StrPair
SetLoginSuccess	src/TcpClientModule.cpp	/^void TcpClientModule::SetLoginSuccess()$/;"	f	class:TcpClientModule
SetName	src/tinyxml2.cpp	/^void XMLAttribute::SetName( const char* n )$/;"	f	class:tinyxml2::XMLAttribute
SetName	src/tinyxml2.h	/^    void SetName( const char* str, bool staticMem=false )	{$/;"	f	class:tinyxml2::XMLElement
SetOrigCalled	src/SiaSession.cpp	/^void TSessionLua::SetOrigCalled(const char * origcalled)$/;"	f	class:TSessionLua
SetOrigCaller	src/SiaSession.cpp	/^void TSessionLua::SetOrigCaller(const char * origcaller)$/;"	f	class:TSessionLua
SetScriptFile	src/SiaSession.cpp	/^void TSessionLua::SetScriptFile(const char * file)$/;"	f	class:TSessionLua
SetStopServiceFunction	src/SiaSession.cpp	/^void TSessionLua::SetStopServiceFunction(const char *function_name)$/;"	f	class:TSessionLua
SetStr	src/tinyxml2.cpp	/^void StrPair::SetStr( const char* str, int flags )$/;"	f	class:tinyxml2::StrPair
SetText	src/tinyxml2.cpp	/^void	XMLElement::SetText( const char* inText )$/;"	f	class:tinyxml2::XMLElement
SetText	src/tinyxml2.cpp	/^void XMLElement::SetText( bool v ) $/;"	f	class:tinyxml2::XMLElement
SetText	src/tinyxml2.cpp	/^void XMLElement::SetText( double v ) $/;"	f	class:tinyxml2::XMLElement
SetText	src/tinyxml2.cpp	/^void XMLElement::SetText( float v ) $/;"	f	class:tinyxml2::XMLElement
SetText	src/tinyxml2.cpp	/^void XMLElement::SetText( int v ) $/;"	f	class:tinyxml2::XMLElement
SetText	src/tinyxml2.cpp	/^void XMLElement::SetText( unsigned v ) $/;"	f	class:tinyxml2::XMLElement
SetTracked	src/tinyxml2.h	/^    void SetTracked() {$/;"	f	class:tinyxml2::MemPoolT
SetValue	src/tinyxml2.cpp	/^void XMLNode::SetValue( const char* str, bool staticMem )$/;"	f	class:tinyxml2::XMLNode
ShallowClone	src/tinyxml2.cpp	/^XMLNode* XMLComment::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLComment
ShallowClone	src/tinyxml2.cpp	/^XMLNode* XMLDeclaration::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLDeclaration
ShallowClone	src/tinyxml2.cpp	/^XMLNode* XMLElement::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLElement
ShallowClone	src/tinyxml2.cpp	/^XMLNode* XMLText::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLText
ShallowClone	src/tinyxml2.cpp	/^XMLNode* XMLUnknown::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLUnknown
ShallowClone	src/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* \/*document*\/ ) const	{$/;"	f	class:tinyxml2::XMLDocument
ShallowEqual	src/tinyxml2.cpp	/^bool XMLComment::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLComment
ShallowEqual	src/tinyxml2.cpp	/^bool XMLDeclaration::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLDeclaration
ShallowEqual	src/tinyxml2.cpp	/^bool XMLElement::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLElement
ShallowEqual	src/tinyxml2.cpp	/^bool XMLText::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLText
ShallowEqual	src/tinyxml2.cpp	/^bool XMLUnknown::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLUnknown
ShallowEqual	src/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* \/*compare*\/ ) const	{$/;"	f	class:tinyxml2::XMLDocument
SiaHttpServer	src/SiaHttpServer.cpp	/^SiaHttpServer::SiaHttpServer(const char *ip, const int port, TSiaManager *own)$/;"	f	class:SiaHttpServer
SiaHttpServer	src/SiaHttpServer.h	/^class SiaHttpServer {$/;"	c
SiaPrometheus	src/SiaPrometheus.cpp	/^SiaPrometheus::SiaPrometheus() {$/;"	f	class:SiaPrometheus
SiaPrometheus	src/SiaPrometheus.h	/^class SiaPrometheus$/;"	c
SiaTCPServer	src/SiaTcpServer.h	/^	explicit SiaTCPServer(TSiaManager * own, const char * ip, int port)$/;"	f	class:SiaTCPServer
SiaTCPServer	src/SiaTcpServer.h	/^class SiaTCPServer :public TcpServerModule$/;"	c
SiaTcpClient	src/SiaTcpServer.cpp	/^SiaTcpClient::SiaTcpClient(SiaTCPServer * server, TSiaManager * own, struct event_base * base, evutil_socket_t fd)$/;"	f	class:SiaTcpClient
SiaTcpClient	src/SiaTcpServer.h	/^class SiaTcpClient :public TcpClient$/;"	c
SiaTcpData	src/SiaTcpServer.h	/^	SiaTcpData(const std::string & sessionid, const std::string & data) :m_sessionId(sessionid), m_data(data)$/;"	f	class:SiaTcpData
SiaTcpData	src/SiaTcpServer.h	/^class SiaTcpData {$/;"	c
SiaTcpMonitor	src/SiaTcpMonitor.cpp	/^SiaTcpMonitor::SiaTcpMonitor(TSiaManager *own) :TcpClientModule(own)$/;"	f	class:SiaTcpMonitor
SiaTcpMonitor	src/SiaTcpMonitor.h	/^class SiaTcpMonitor:public TcpClientModule {$/;"	c
SiaUnpackjson2Message	src/SiaManager.cpp	/^bool TSiaManager::SiaUnpackjson2Message(const std::string & data, std::shared_ptr<CMessage>& tranInfo)$/;"	f	class:TSiaManager
Sia_http_CallBack_fun	src/SiaHttpServer.cpp	/^void Sia_http_CallBack_fun(struct evhttp_request *req, void *arg)$/;"	f
SipGWGroup	src/ACDCallNum.h	/^struct SipGWGroup {$/;"	s
SipGateway	src/ACDCallNum.h	/^struct SipGateway {$/;"	s
Size	src/tinyxml2.h	/^    int Size() const					{$/;"	f	class:tinyxml2::DynArray
SkipWhiteSpace	src/tinyxml2.h	/^    static char* SkipWhiteSpace( char* p )				{$/;"	f	class:tinyxml2::XMLUtil
SkipWhiteSpace	src/tinyxml2.h	/^    static const char* SkipWhiteSpace( const char* p )	{$/;"	f	class:tinyxml2::XMLUtil
Start	src/HttpClientModule.cpp	/^void HttpClientModule::Start()$/;"	f	class:HttpClientModule
Start	src/MySqlModule.cpp	/^	int MySqlModule::Start()$/;"	f	class:chilli::DataBase::MySqlModule
Start	src/SSModule.cpp	/^void SSMoudle::Start(Json::Value address)$/;"	f	class:SSMoudle
Start	src/SSModuleS.cpp	/^void SSMoudle::Start(Json::Value address)$/;"	f	class:SSMoudle
Start	src/SiaHttpServer.cpp	/^void SiaHttpServer::Start()$/;"	f	class:SiaHttpServer
Start	src/SiaManager.cpp	/^void TSiaManager::Start()$/;"	f	class:TSiaManager
Start	src/SiaManager.h	/^	void Start()$/;"	f	class:CSIATimer
Start	src/SiaSession.cpp	/^void TSessionLua::Start()$/;"	f	class:TSessionLua
Start	src/StatModule.cpp	/^void StatMoudle::Start(Json::Value address)$/;"	f	class:StatMoudle
Start	src/TcpClientModule.cpp	/^void TcpClientModule::Start(Json::Value address)$/;"	f	class:TcpClientModule
Start	src/TcpServerModule.cpp	/^void TcpServerModule::Start()$/;"	f	class:TcpServerModule
Start	src/unused/HttpClientModule.cpp	/^void HttpClientModule::Start()$/;"	f	class:HttpClientModule
StatMoudle	src/StatModule.cpp	/^StatMoudle::StatMoudle(TSiaManager * own) :TcpClientModule(own)$/;"	f	class:StatMoudle
StatMoudle	src/StatModule.h	/^class StatMoudle:public TcpClientModule{$/;"	c
StaticString	include/json/value.h	/^  explicit StaticString(const char* czstring) : c_str_(czstring) {}$/;"	f	class:Json::StaticString
StaticString	include/json/value.h	/^class JSON_API StaticString {$/;"	c	namespace:Json
Stop	src/HttpClientModule.cpp	/^void HttpClientModule::Stop()$/;"	f	class:HttpClientModule
Stop	src/MySqlModule.cpp	/^	int MySqlModule::Stop(void)$/;"	f	class:chilli::DataBase::MySqlModule
Stop	src/SSModule.cpp	/^void SSMoudle::Stop()$/;"	f	class:SSMoudle
Stop	src/SSModuleS.cpp	/^void SSMoudle::Stop()$/;"	f	class:SSMoudle
Stop	src/SiaHttpServer.cpp	/^void SiaHttpServer::Stop()$/;"	f	class:SiaHttpServer
Stop	src/SiaManager.cpp	/^void TSiaManager::Stop()$/;"	f	class:TSiaManager
Stop	src/SiaManager.h	/^	void Stop() {$/;"	f	class:CSIATimer
Stop	src/SiaSession.cpp	/^void TSessionLua::Stop()$/;"	f	class:TSessionLua
Stop	src/StatModule.cpp	/^void StatMoudle::Stop()$/;"	f	class:StatMoudle
Stop	src/TcpClientModule.cpp	/^void TcpClientModule::Stop()$/;"	f	class:TcpClientModule
Stop	src/TcpServerModule.cpp	/^void TcpServerModule::Stop(void)$/;"	f	class:TcpServerModule
Stop	src/unused/HttpClientModule.cpp	/^void HttpClientModule::Stop()$/;"	f	class:HttpClientModule
StrPair	src/tinyxml2.h	/^    StrPair() : _flags( 0 ), _start( 0 ), _end( 0 ) {}$/;"	f	class:tinyxml2::StrPair
StrPair	src/tinyxml2.h	/^class StrPair$/;"	c	namespace:tinyxml2
Strategy	src/strategy.cpp	/^Strategy::Strategy()$/;"	f	class:Strategy
Strategy	src/strategy.h	/^class Strategy {$/;"	c
StreamWriter	include/json/writer.h	/^class JSON_API StreamWriter {$/;"	c	namespace:Json
StreamWriterBuilder	include/json/writer.h	/^class JSON_API StreamWriterBuilder : public StreamWriter::Factory {$/;"	c	namespace:Json
StringEqual	src/tinyxml2.h	/^    inline static bool StringEqual( const char* p, const char* q, int nChar=INT_MAX )  {$/;"	f	class:tinyxml2::XMLUtil
StringStorage	include/json/value.h	/^    struct StringStorage {$/;"	s	class:Json::Value::CZString
StructuredError	include/json/reader.h	/^  struct StructuredError {$/;"	s	class:Json::Reader
TCPData	src/TcpClientModule.cpp	/^	TCPData(const std::string & sessionid, const std::string & data) :m_sessionId(sessionid), m_data(data)$/;"	f	class:TCPData
TCPData	src/TcpClientModule.cpp	/^class TCPData {$/;"	c	file:
TCPDataPtr	src/TcpClientModule.cpp	/^typedef TCPData* TCPDataPtr;$/;"	t	file:
TEXT_ELEMENT	src/tinyxml2.h	/^        TEXT_ELEMENT		            	= NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon1
TEXT_ELEMENT_LEAVE_ENTITIES	src/tinyxml2.h	/^        TEXT_ELEMENT_LEAVE_ENTITIES		= NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon1
TINYXML2_INCLUDED	src/tinyxml2.h	25;"	d
TINYXML2_LIB	src/tinyxml2.h	67;"	d
TINYXML2_LIB	src/tinyxml2.h	69;"	d
TINYXML2_LIB	src/tinyxml2.h	71;"	d
TINYXML2_LIB	src/tinyxml2.h	74;"	d
TIXML2_MAJOR_VERSION	src/tinyxml2.h	/^static const int TIXML2_MAJOR_VERSION = 2;$/;"	v
TIXML2_MINOR_VERSION	src/tinyxml2.h	/^static const int TIXML2_MINOR_VERSION = 2;$/;"	v
TIXML2_PATCH_VERSION	src/tinyxml2.h	/^static const int TIXML2_PATCH_VERSION = 0;$/;"	v
TIXMLASSERT	src/tinyxml2.h	80;"	d
TIXMLASSERT	src/tinyxml2.h	83;"	d
TIXMLASSERT	src/tinyxml2.h	86;"	d
TIXMLASSERT	src/tinyxml2.h	89;"	d
TIXML_SNPRINTF	src/tinyxml2.h	/^inline int TIXML_SNPRINTF( char* buffer, size_t size, const char* format, ... )$/;"	f
TIXML_SNPRINTF	src/tinyxml2.h	112;"	d
TIXML_SNPRINTF	src/tinyxml2.h	117;"	d
TIXML_SSCANF	src/tinyxml2.h	110;"	d
TIXML_SSCANF	src/tinyxml2.h	113;"	d
TIXML_SSCANF	src/tinyxml2.h	118;"	d
TIXML_UTF_LEAD_0	src/tinyxml2.cpp	/^static const unsigned char TIXML_UTF_LEAD_0 = 0xefU;$/;"	v	file:
TIXML_UTF_LEAD_1	src/tinyxml2.cpp	/^static const unsigned char TIXML_UTF_LEAD_1 = 0xbbU;$/;"	v	file:
TIXML_UTF_LEAD_2	src/tinyxml2.cpp	/^static const unsigned char TIXML_UTF_LEAD_2 = 0xbfU;$/;"	v	file:
TSessionLua	src/SiaSession.cpp	/^TSessionLua::TSessionLua(uint32_t id, const std::string & initial, TSiaManager *owner)$/;"	f	class:TSessionLua
TSessionLua	src/SiaSession.h	/^class TSessionLua {$/;"	c
TSessionLuaPtr	src/SiaSession.h	/^typedef std::shared_ptr<TSessionLua> TSessionLuaPtr;$/;"	t
TSiaManager	src/SiaManager.cpp	/^TSiaManager::TSiaManager( const char *profile)$/;"	f	class:TSiaManager
TSiaManager	src/SiaManager.h	/^class TSiaManager  {$/;"	c
TcpClient	src/TcpServerModule.cpp	/^TcpClient::TcpClient(struct event_base * base) :m_pBase(base),m_Connected(false),m_Logined(false)$/;"	f	class:TcpClient
TcpClient	src/TcpServerModule.cpp	/^TcpClient::TcpClient(struct event_base * base, evutil_socket_t fd):m_pBase(base), m_Connected(false), m_Logined(false)$/;"	f	class:TcpClient
TcpClient	src/TcpServerModule.h	/^class TcpClient {$/;"	c
TcpClientModule	src/TcpClientModule.cpp	/^TcpClientModule::TcpClientModule(TSiaManager * own) :m_Connected(false), m_Running(false),$/;"	f	class:TcpClientModule
TcpClientModule	src/TcpClientModule.h	/^class TcpClientModule {$/;"	c
TcpServerModule	src/TcpServerModule.cpp	/^TcpServerModule::TcpServerModule()$/;"	f	class:TcpServerModule
TcpServerModule	src/TcpServerModule.cpp	/^TcpServerModule::TcpServerModule(const char * ip, int port) :$/;"	f	class:TcpServerModule
TcpServerModule	src/TcpServerModule.h	/^class TcpServerModule$/;"	c
ToBool	src/tinyxml2.cpp	/^bool XMLUtil::ToBool( const char* str, bool* value )$/;"	f	class:tinyxml2::XMLUtil
ToComment	src/tinyxml2.h	/^    virtual XMLComment*		ToComment()		{$/;"	f	class:tinyxml2::XMLNode
ToComment	src/tinyxml2.h	/^    virtual XMLComment*	ToComment()					{$/;"	f	class:tinyxml2::XMLComment
ToComment	src/tinyxml2.h	/^    virtual const XMLComment*		ToComment() const		{$/;"	f	class:tinyxml2::XMLNode
ToComment	src/tinyxml2.h	/^    virtual const XMLComment* ToComment() const		{$/;"	f	class:tinyxml2::XMLComment
ToDeclaration	src/tinyxml2.h	/^    XMLDeclaration* ToDeclaration() 			{$/;"	f	class:tinyxml2::XMLHandle
ToDeclaration	src/tinyxml2.h	/^    const XMLDeclaration* ToDeclaration() const	{$/;"	f	class:tinyxml2::XMLConstHandle
ToDeclaration	src/tinyxml2.h	/^    virtual XMLDeclaration*	ToDeclaration()					{$/;"	f	class:tinyxml2::XMLDeclaration
ToDeclaration	src/tinyxml2.h	/^    virtual XMLDeclaration*	ToDeclaration()	{$/;"	f	class:tinyxml2::XMLNode
ToDeclaration	src/tinyxml2.h	/^    virtual const XMLDeclaration*	ToDeclaration() const	{$/;"	f	class:tinyxml2::XMLNode
ToDeclaration	src/tinyxml2.h	/^    virtual const XMLDeclaration* ToDeclaration() const		{$/;"	f	class:tinyxml2::XMLDeclaration
ToDocument	src/tinyxml2.h	/^    virtual XMLDocument*	ToDocument()	{$/;"	f	class:tinyxml2::XMLNode
ToDocument	src/tinyxml2.h	/^    virtual XMLDocument* ToDocument()				{$/;"	f	class:tinyxml2::XMLDocument
ToDocument	src/tinyxml2.h	/^    virtual const XMLDocument*		ToDocument() const		{$/;"	f	class:tinyxml2::XMLNode
ToDocument	src/tinyxml2.h	/^    virtual const XMLDocument* ToDocument() const	{$/;"	f	class:tinyxml2::XMLDocument
ToDouble	src/tinyxml2.cpp	/^bool XMLUtil::ToDouble( const char* str, double* value )$/;"	f	class:tinyxml2::XMLUtil
ToElement	src/tinyxml2.h	/^    XMLElement* ToElement() 					{$/;"	f	class:tinyxml2::XMLHandle
ToElement	src/tinyxml2.h	/^    const XMLElement* ToElement() const			{$/;"	f	class:tinyxml2::XMLConstHandle
ToElement	src/tinyxml2.h	/^    virtual XMLElement*		ToElement()		{$/;"	f	class:tinyxml2::XMLNode
ToElement	src/tinyxml2.h	/^    virtual XMLElement* ToElement()				{$/;"	f	class:tinyxml2::XMLElement
ToElement	src/tinyxml2.h	/^    virtual const XMLElement*		ToElement() const		{$/;"	f	class:tinyxml2::XMLNode
ToElement	src/tinyxml2.h	/^    virtual const XMLElement* ToElement() const {$/;"	f	class:tinyxml2::XMLElement
ToFloat	src/tinyxml2.cpp	/^bool XMLUtil::ToFloat( const char* str, float* value )$/;"	f	class:tinyxml2::XMLUtil
ToInt	src/tinyxml2.cpp	/^bool XMLUtil::ToInt( const char* str, int* value )$/;"	f	class:tinyxml2::XMLUtil
ToNode	src/tinyxml2.h	/^    XMLNode* ToNode()							{$/;"	f	class:tinyxml2::XMLHandle
ToNode	src/tinyxml2.h	/^    const XMLNode* ToNode() const				{$/;"	f	class:tinyxml2::XMLConstHandle
ToStr	src/tinyxml2.cpp	/^void XMLUtil::ToStr( bool v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil
ToStr	src/tinyxml2.cpp	/^void XMLUtil::ToStr( double v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil
ToStr	src/tinyxml2.cpp	/^void XMLUtil::ToStr( float v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil
ToStr	src/tinyxml2.cpp	/^void XMLUtil::ToStr( int v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil
ToStr	src/tinyxml2.cpp	/^void XMLUtil::ToStr( unsigned v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil
ToText	src/tinyxml2.h	/^    XMLText* ToText() 							{$/;"	f	class:tinyxml2::XMLHandle
ToText	src/tinyxml2.h	/^    const XMLText* ToText() const				{$/;"	f	class:tinyxml2::XMLConstHandle
ToText	src/tinyxml2.h	/^    virtual XMLText*		ToText()		{$/;"	f	class:tinyxml2::XMLNode
ToText	src/tinyxml2.h	/^    virtual XMLText* ToText()			{$/;"	f	class:tinyxml2::XMLText
ToText	src/tinyxml2.h	/^    virtual const XMLText*			ToText() const			{$/;"	f	class:tinyxml2::XMLNode
ToText	src/tinyxml2.h	/^    virtual const XMLText* ToText() const	{$/;"	f	class:tinyxml2::XMLText
ToUnknown	src/tinyxml2.h	/^    XMLUnknown* ToUnknown() 					{$/;"	f	class:tinyxml2::XMLHandle
ToUnknown	src/tinyxml2.h	/^    const XMLUnknown* ToUnknown() const			{$/;"	f	class:tinyxml2::XMLConstHandle
ToUnknown	src/tinyxml2.h	/^    virtual XMLUnknown*		ToUnknown()		{$/;"	f	class:tinyxml2::XMLNode
ToUnknown	src/tinyxml2.h	/^    virtual XMLUnknown*	ToUnknown()					{$/;"	f	class:tinyxml2::XMLUnknown
ToUnknown	src/tinyxml2.h	/^    virtual const XMLUnknown*		ToUnknown() const		{$/;"	f	class:tinyxml2::XMLNode
ToUnknown	src/tinyxml2.h	/^    virtual const XMLUnknown* ToUnknown() const		{$/;"	f	class:tinyxml2::XMLUnknown
ToUnsigned	src/tinyxml2.cpp	/^bool XMLUtil::ToUnsigned( const char* str, unsigned *value )$/;"	f	class:tinyxml2::XMLUtil
Token	include/json/reader.h	/^  class Token {$/;"	c	class:Json::Reader
TokenType	include/json/reader.h	/^  enum TokenType {$/;"	g	class:Json::Reader
Trace	src/tinyxml2.h	/^    void Trace( const char* name ) {$/;"	f	class:tinyxml2::MemPoolT
Type	src/cfgFile.h	/^   char   Type;$/;"	m	struct:CFGIENTRY
Type	src/unused/cfgFile.h	/^   char   Type;$/;"	m	struct:CFGIENTRY
UInt	include/json/config.h	/^typedef unsigned int UInt;$/;"	t	namespace:Json
UInt	include/json/value.h	/^  typedef Json::UInt UInt;$/;"	t	class:Json::Value
UInt64	include/json/config.h	/^typedef uint64_t UInt64;$/;"	t	namespace:Json
UInt64	include/json/config.h	/^typedef unsigned __int64 UInt64;$/;"	t	namespace:Json
UInt64	include/json/value.h	/^  typedef Json::UInt64 UInt64;$/;"	t	class:Json::Value
UNICODE	acdd.cpp	26;"	d	file:
Unlink	src/tinyxml2.cpp	/^void XMLNode::Unlink( XMLNode* child )$/;"	f	class:tinyxml2::XMLNode
UnsignedAttribute	src/tinyxml2.h	/^    unsigned UnsignedAttribute( const char* name ) const {$/;"	f	class:tinyxml2::XMLElement
UnsignedValue	src/tinyxml2.h	/^    unsigned UnsignedValue() const			{$/;"	f	class:tinyxml2::XMLAttribute
Untracked	src/tinyxml2.h	/^    int Untracked() const {$/;"	f	class:tinyxml2::MemPoolT
ValText	src/cfgFile.h	/^   char          ValText [128];$/;"	m	struct:__anon11
ValText	src/unused/cfgFile.h	/^   char          ValText [128];$/;"	m	struct:__anon10
Value	include/json/value.h	/^class JSON_API Value {$/;"	c	namespace:Json
Value	src/tinyxml2.cpp	/^const char* XMLAttribute::Value() const $/;"	f	class:tinyxml2::XMLAttribute
Value	src/tinyxml2.cpp	/^const char* XMLNode::Value() const $/;"	f	class:tinyxml2::XMLNode
ValueConstIterator	include/json/value.h	/^class JSON_API ValueConstIterator : public ValueIteratorBase {$/;"	c	namespace:Json
ValueHolder	include/json/value.h	/^  union ValueHolder {$/;"	u	class:Json::Value
ValueIterator	include/json/value.h	/^class JSON_API ValueIterator : public ValueIteratorBase {$/;"	c	namespace:Json
ValueIteratorBase	include/json/value.h	/^class JSON_API ValueIteratorBase {$/;"	c	namespace:Json
ValueType	include/json/value.h	/^enum ValueType {$/;"	g	namespace:Json
Visit	src/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLComment& comment )$/;"	f	class:tinyxml2::XMLPrinter
Visit	src/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLDeclaration& declaration )$/;"	f	class:tinyxml2::XMLPrinter
Visit	src/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLText& text )$/;"	f	class:tinyxml2::XMLPrinter
Visit	src/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLUnknown& unknown )$/;"	f	class:tinyxml2::XMLPrinter
Visit	src/tinyxml2.h	/^    virtual bool Visit( const XMLComment& \/*comment*\/ )				{$/;"	f	class:tinyxml2::XMLVisitor
Visit	src/tinyxml2.h	/^    virtual bool Visit( const XMLDeclaration& \/*declaration*\/ )		{$/;"	f	class:tinyxml2::XMLVisitor
Visit	src/tinyxml2.h	/^    virtual bool Visit( const XMLText& \/*text*\/ )					{$/;"	f	class:tinyxml2::XMLVisitor
Visit	src/tinyxml2.h	/^    virtual bool Visit( const XMLUnknown& \/*unknown*\/ )				{$/;"	f	class:tinyxml2::XMLVisitor
VisitEnter	src/tinyxml2.cpp	/^bool XMLPrinter::VisitEnter( const XMLDocument& doc )$/;"	f	class:tinyxml2::XMLPrinter
VisitEnter	src/tinyxml2.cpp	/^bool XMLPrinter::VisitEnter( const XMLElement& element, const XMLAttribute* attribute )$/;"	f	class:tinyxml2::XMLPrinter
VisitEnter	src/tinyxml2.h	/^    virtual bool VisitEnter( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor
VisitEnter	src/tinyxml2.h	/^    virtual bool VisitEnter( const XMLElement& \/*element*\/, const XMLAttribute* \/*firstAttribute*\/ )	{$/;"	f	class:tinyxml2::XMLVisitor
VisitExit	src/tinyxml2.cpp	/^bool XMLPrinter::VisitExit( const XMLElement& element )$/;"	f	class:tinyxml2::XMLPrinter
VisitExit	src/tinyxml2.h	/^    virtual bool VisitExit( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLPrinter
VisitExit	src/tinyxml2.h	/^    virtual bool VisitExit( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor
VisitExit	src/tinyxml2.h	/^    virtual bool VisitExit( const XMLElement& \/*element*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor
WARNING_TYPE	acdd.h	/^	WARNING_TYPE,$/;"	e	enum:ConsoleType
Whitespace	src/tinyxml2.h	/^enum Whitespace {$/;"	g	namespace:tinyxml2
WhitespaceMode	src/tinyxml2.h	/^    Whitespace WhitespaceMode() const	{$/;"	f	class:tinyxml2::XMLDocument
WriteBool	src/cfgFile.cpp	/^void CTCfgFile::WriteBool (const char *pSection, const char *pKey, int32_t Value)$/;"	f	class:CTCfgFile
WriteBool	src/unused/cfgFile.cpp	/^void CTCfgFile::WriteBool (const char *pSection, const char *pKey, int32_t Value)$/;"	f	class:CTCfgFile
WriteDouble	src/cfgFile.cpp	/^void CTCfgFile::WriteDouble (const char *pSection, const char *pKey, double Value)$/;"	f	class:CTCfgFile
WriteDouble	src/unused/cfgFile.cpp	/^void CTCfgFile::WriteDouble (const char *pSection, const char *pKey, double Value)$/;"	f	class:CTCfgFile
WriteIniFile	src/cfgFile.cpp	/^int32_t CTCfgFile::WriteIniFile (const char *pFileName)$/;"	f	class:CTCfgFile
WriteIniFile	src/unused/cfgFile.cpp	/^int32_t CTCfgFile::WriteIniFile (const char *pFileName)$/;"	f	class:CTCfgFile
WriteInt	src/cfgFile.cpp	/^void CTCfgFile::WriteInt (const char *pSection, const char *pKey, int Value)$/;"	f	class:CTCfgFile
WriteInt	src/unused/cfgFile.cpp	/^void CTCfgFile::WriteInt (const char *pSection, const char *pKey, int Value)$/;"	f	class:CTCfgFile
WriteString	src/cfgFile.cpp	/^void CTCfgFile::WriteString (const char *pSection, const char *pKey, const char *pValue)$/;"	f	class:CTCfgFile
WriteString	src/unused/cfgFile.cpp	/^void CTCfgFile::WriteString (const char *pSection, const char *pKey, const char *pValue)$/;"	f	class:CTCfgFile
XML	src/ACDReadConfig.h	/^    XML,$/;"	e	enum:OBJECT
XMLAttribute	src/tinyxml2.h	/^    XMLAttribute() : _next( 0 ), _memPool( 0 ) {}$/;"	f	class:tinyxml2::XMLAttribute
XMLAttribute	src/tinyxml2.h	/^class TINYXML2_LIB XMLAttribute$/;"	c	namespace:tinyxml2
XMLComment	src/tinyxml2.cpp	/^XMLComment::XMLComment( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLComment
XMLComment	src/tinyxml2.h	/^class TINYXML2_LIB XMLComment : public XMLNode$/;"	c	namespace:tinyxml2
XMLConstHandle	src/tinyxml2.h	/^    XMLConstHandle( const XMLConstHandle& ref )										{$/;"	f	class:tinyxml2::XMLConstHandle
XMLConstHandle	src/tinyxml2.h	/^    XMLConstHandle( const XMLNode& node )											{$/;"	f	class:tinyxml2::XMLConstHandle
XMLConstHandle	src/tinyxml2.h	/^    XMLConstHandle( const XMLNode* node )											{$/;"	f	class:tinyxml2::XMLConstHandle
XMLConstHandle	src/tinyxml2.h	/^class TINYXML2_LIB XMLConstHandle$/;"	c	namespace:tinyxml2
XMLDeclaration	src/tinyxml2.cpp	/^XMLDeclaration::XMLDeclaration( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLDeclaration
XMLDeclaration	src/tinyxml2.h	/^class TINYXML2_LIB XMLDeclaration : public XMLNode$/;"	c	namespace:tinyxml2
XMLDocument	src/tinyxml2.cpp	/^XMLDocument::XMLDocument( bool processEntities, Whitespace whitespace ) :$/;"	f	class:tinyxml2::XMLDocument
XMLDocument	src/tinyxml2.h	/^class TINYXML2_LIB XMLDocument : public XMLNode$/;"	c	namespace:tinyxml2
XMLElement	src/tinyxml2.cpp	/^XMLElement::XMLElement( XMLDocument* doc ) : XMLNode( doc ),$/;"	f	class:tinyxml2::XMLElement
XMLElement	src/tinyxml2.h	/^class TINYXML2_LIB XMLElement : public XMLNode$/;"	c	namespace:tinyxml2
XMLError	src/tinyxml2.h	/^enum XMLError {$/;"	g	namespace:tinyxml2
XMLHandle	src/tinyxml2.h	/^    XMLHandle( XMLNode& node )												{$/;"	f	class:tinyxml2::XMLHandle
XMLHandle	src/tinyxml2.h	/^    XMLHandle( XMLNode* node )												{$/;"	f	class:tinyxml2::XMLHandle
XMLHandle	src/tinyxml2.h	/^    XMLHandle( const XMLHandle& ref )										{$/;"	f	class:tinyxml2::XMLHandle
XMLHandle	src/tinyxml2.h	/^class TINYXML2_LIB XMLHandle$/;"	c	namespace:tinyxml2
XMLNode	src/tinyxml2.cpp	/^XMLNode::XMLNode( XMLDocument* doc ) :$/;"	f	class:tinyxml2::XMLNode
XMLNode	src/tinyxml2.h	/^class TINYXML2_LIB XMLNode$/;"	c	namespace:tinyxml2
XMLPrinter	src/tinyxml2.cpp	/^XMLPrinter::XMLPrinter( FILE* file, bool compact, int depth ) :$/;"	f	class:tinyxml2::XMLPrinter
XMLPrinter	src/tinyxml2.h	/^class TINYXML2_LIB XMLPrinter : public XMLVisitor$/;"	c	namespace:tinyxml2
XMLText	src/tinyxml2.h	/^    XMLText( XMLDocument* doc )	: XMLNode( doc ), _isCData( false )	{}$/;"	f	class:tinyxml2::XMLText
XMLText	src/tinyxml2.h	/^class TINYXML2_LIB XMLText : public XMLNode$/;"	c	namespace:tinyxml2
XMLUnknown	src/tinyxml2.cpp	/^XMLUnknown::XMLUnknown( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLUnknown
XMLUnknown	src/tinyxml2.h	/^class TINYXML2_LIB XMLUnknown : public XMLNode$/;"	c	namespace:tinyxml2
XMLUtil	src/tinyxml2.h	/^class XMLUtil$/;"	c	namespace:tinyxml2
XMLVisitor	src/tinyxml2.h	/^class TINYXML2_LIB XMLVisitor$/;"	c	namespace:tinyxml2
XML_CAN_NOT_CONVERT_TEXT	src/tinyxml2.h	/^    XML_CAN_NOT_CONVERT_TEXT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_COUNT	src/tinyxml2.h	/^	XML_ERROR_COUNT$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_ELEMENT_MISMATCH	src/tinyxml2.h	/^    XML_ERROR_ELEMENT_MISMATCH,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_EMPTY_DOCUMENT	src/tinyxml2.h	/^    XML_ERROR_EMPTY_DOCUMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_COULD_NOT_BE_OPENED	src/tinyxml2.h	/^    XML_ERROR_FILE_COULD_NOT_BE_OPENED,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_NOT_FOUND	src/tinyxml2.h	/^    XML_ERROR_FILE_NOT_FOUND,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_READ_ERROR	src/tinyxml2.h	/^    XML_ERROR_FILE_READ_ERROR,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_IDENTIFYING_TAG	src/tinyxml2.h	/^    XML_ERROR_IDENTIFYING_TAG,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_MISMATCHED_ELEMENT	src/tinyxml2.h	/^    XML_ERROR_MISMATCHED_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING	src/tinyxml2.h	/^    XML_ERROR_PARSING,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_ATTRIBUTE	src/tinyxml2.h	/^    XML_ERROR_PARSING_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_CDATA	src/tinyxml2.h	/^    XML_ERROR_PARSING_CDATA,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_COMMENT	src/tinyxml2.h	/^    XML_ERROR_PARSING_COMMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_DECLARATION	src/tinyxml2.h	/^    XML_ERROR_PARSING_DECLARATION,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_ELEMENT	src/tinyxml2.h	/^    XML_ERROR_PARSING_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_TEXT	src/tinyxml2.h	/^    XML_ERROR_PARSING_TEXT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_UNKNOWN	src/tinyxml2.h	/^    XML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:tinyxml2::XMLError
XML_NO_ATTRIBUTE	src/tinyxml2.h	/^    XML_NO_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
XML_NO_ERROR	src/tinyxml2.h	/^    XML_NO_ERROR = 0,$/;"	e	enum:tinyxml2::XMLError
XML_NO_TEXT_NODE	src/tinyxml2.h	/^    XML_NO_TEXT_NODE,$/;"	e	enum:tinyxml2::XMLError
XML_SUCCESS	src/tinyxml2.h	/^    XML_SUCCESS = 0,$/;"	e	enum:tinyxml2::XMLError
XML_WRONG_ATTRIBUTE_TYPE	src/tinyxml2.h	/^    XML_WRONG_ATTRIBUTE_TYPE,$/;"	e	enum:tinyxml2::XMLError
_CEVENTBUFFER_HEADER_	src/CEventBuffer.h	3;"	d
_DARWIN_C_SOURCE	include/hiredis/fmacros.h	9;"	d
_POSIX_C_SOURCE	include/hiredis/fmacros.h	5;"	d
_SIA_TCPSERVER_HEADER_	src/SiaTcpServer.h	3;"	d
_STR	src/base.h	17;"	d
_STR	src/base.h	38;"	d
_STR	src/testxml.cpp	19;"	d	file:
_STRING_HELPER_HEADER_	src/stringHelper.h	3;"	d
_STRVERSION	acdd.cpp	45;"	d	file:
_STRVERSION	src/StatModule.cpp	29;"	d	file:
_TCPSERVER_MODULE_HEADER_	src/TcpServerModule.h	3;"	d
_WIN32_HELPER_INCLUDE	include/hiredis/win32.h	2;"	d
_WIN32_WINNT	include/hiredis/sockcompat.h	47;"	d
_WIN32_WINNT	include/hiredis/sockcompat.h	48;"	d
_XOPEN_SOURCE	include/hiredis/fmacros.h	4;"	d
__DICT_H	include/hiredis/dict.h	37;"	d
__HIREDIS_ASYNC_H	include/hiredis/async.h	33;"	d
__HIREDIS_FMACRO_H	include/hiredis/fmacros.h	2;"	d
__HIREDIS_H	include/hiredis/hiredis.h	35;"	d
__HIREDIS_READ_H	include/hiredis/read.h	34;"	d
__HTTPCLIENTMODULE_HEADER__	src/HttpClientModule.h	2;"	d
__HTTPCLIENTMODULE_HEADER__	src/unused/HttpClientModule.h	2;"	d
__HTTP_SERVER_H_	src/SiaHttpServer.h	2;"	d
__NET_H	include/hiredis/net.h	36;"	d
__SDS_H	include/hiredis/sds.h	34;"	d
__SIATCPMONITOR_H_	src/SiaTcpMonitor.h	2;"	d
__SIA_H_	acdd.h	2;"	d
__SIA_MANAGER_H_	src/SiaManager.h	2;"	d
__SIA_SERVER_H_	src/siaserver.h	2;"	d
__SIA_SESSION_H_	src/SiaSession.h	2;"	d
__SOCKCOMPAT_H	include/hiredis/sockcompat.h	32;"	d
__SSMODULE_HEADER	src/SSModule.h	2;"	d
__SSMODULE_HEADER	src/SSModuleS.h	2;"	d
__STARTSERVICEMODULE_HEADER	src/StatModule.h	2;"	d
__TCPCLIENT_MODULE_HEADER_	src/TcpClientModule.h	2;"	d
__attribute__	include/hiredis/sds.h	38;"	d
_allocated	src/tinyxml2.h	/^    int _allocated;		\/\/ objects allocated$/;"	m	class:tinyxml2::DynArray
_attributePool	src/tinyxml2.h	/^    MemPoolT< sizeof(XMLAttribute) > _attributePool;$/;"	m	class:tinyxml2::XMLDocument
_blockPtrs	src/tinyxml2.h	/^    DynArray< Block*, 10 > _blockPtrs;$/;"	m	class:tinyxml2::MemPoolT
_buffer	src/tinyxml2.h	/^    DynArray< char, 20 > _buffer;$/;"	m	class:tinyxml2::XMLPrinter
_charBuffer	src/tinyxml2.h	/^    char*       _charBuffer;$/;"	m	class:tinyxml2::XMLDocument
_closingType	src/tinyxml2.h	/^    int _closingType;$/;"	m	class:tinyxml2::XMLElement
_commentPool	src/tinyxml2.h	/^    MemPoolT< sizeof(XMLComment) >	 _commentPool;$/;"	m	class:tinyxml2::XMLDocument
_compactMode	src/tinyxml2.h	/^	bool _compactMode;$/;"	m	class:tinyxml2::XMLPrinter
_currentAllocs	src/tinyxml2.h	/^    int _currentAllocs;$/;"	m	class:tinyxml2::MemPoolT
_depth	src/tinyxml2.h	/^    int _depth;$/;"	m	class:tinyxml2::XMLPrinter
_document	src/tinyxml2.h	/^    XMLDocument*	_document;$/;"	m	class:tinyxml2::XMLNode
_elementJustOpened	src/tinyxml2.h	/^    bool _elementJustOpened;$/;"	m	class:tinyxml2::XMLPrinter
_elementPool	src/tinyxml2.h	/^    MemPoolT< sizeof(XMLElement) >	 _elementPool;$/;"	m	class:tinyxml2::XMLDocument
_end	src/tinyxml2.h	/^    char*   _end;$/;"	m	class:tinyxml2::StrPair
_entityFlag	src/tinyxml2.h	/^    bool _entityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter
_errorID	src/tinyxml2.h	/^    XMLError    _errorID;$/;"	m	class:tinyxml2::XMLDocument
_errorNames	src/tinyxml2.cpp	/^const char* XMLDocument::_errorNames[XML_ERROR_COUNT] = {$/;"	m	class:tinyxml2::XMLDocument	file:
_errorNames	src/tinyxml2.h	/^	static const char* _errorNames[XML_ERROR_COUNT];$/;"	m	class:tinyxml2::XMLDocument
_errorStr1	src/tinyxml2.h	/^    const char* _errorStr1;$/;"	m	class:tinyxml2::XMLDocument
_errorStr2	src/tinyxml2.h	/^    const char* _errorStr2;$/;"	m	class:tinyxml2::XMLDocument
_firstChild	src/tinyxml2.h	/^    XMLNode*		_firstChild;$/;"	m	class:tinyxml2::XMLNode
_firstElement	src/tinyxml2.h	/^    bool _firstElement;$/;"	m	class:tinyxml2::XMLPrinter
_flags	src/tinyxml2.h	/^    int     _flags;$/;"	m	class:tinyxml2::StrPair
_fp	src/tinyxml2.h	/^    FILE* _fp;$/;"	m	class:tinyxml2::XMLPrinter
_isCData	src/tinyxml2.h	/^    bool _isCData;$/;"	m	class:tinyxml2::XMLText
_lastChild	src/tinyxml2.h	/^    XMLNode*		_lastChild;$/;"	m	class:tinyxml2::XMLNode
_maxAllocs	src/tinyxml2.h	/^    int _maxAllocs;$/;"	m	class:tinyxml2::MemPoolT
_mem	src/tinyxml2.h	/^    T*  _mem;$/;"	m	class:tinyxml2::DynArray
_memPool	src/tinyxml2.h	/^    MemPool*		_memPool;$/;"	m	class:tinyxml2::XMLNode
_memPool	src/tinyxml2.h	/^    MemPool*        _memPool;$/;"	m	class:tinyxml2::XMLAttribute
_nAllocs	src/tinyxml2.h	/^    int _nAllocs;$/;"	m	class:tinyxml2::MemPoolT
_nUntracked	src/tinyxml2.h	/^    int _nUntracked;$/;"	m	class:tinyxml2::MemPoolT
_name	src/tinyxml2.h	/^    mutable StrPair _name;$/;"	m	class:tinyxml2::XMLAttribute
_next	src/tinyxml2.h	/^    XMLAttribute*   _next;$/;"	m	class:tinyxml2::XMLAttribute
_next	src/tinyxml2.h	/^    XMLNode*		_next;$/;"	m	class:tinyxml2::XMLNode
_node	src/tinyxml2.h	/^    XMLNode* _node;$/;"	m	class:tinyxml2::XMLHandle
_node	src/tinyxml2.h	/^    const XMLNode* _node;$/;"	m	class:tinyxml2::XMLConstHandle
_parent	src/tinyxml2.h	/^    XMLNode*		_parent;$/;"	m	class:tinyxml2::XMLNode
_pool	src/tinyxml2.h	/^    T   _pool[INIT];$/;"	m	class:tinyxml2::DynArray
_prev	src/tinyxml2.h	/^    XMLNode*		_prev;$/;"	m	class:tinyxml2::XMLNode
_processEntities	src/tinyxml2.h	/^    bool        _processEntities;$/;"	m	class:tinyxml2::XMLDocument
_processEntities	src/tinyxml2.h	/^    bool _processEntities;$/;"	m	class:tinyxml2::XMLPrinter
_restrictedEntityFlag	src/tinyxml2.h	/^    bool _restrictedEntityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter
_root	src/tinyxml2.h	/^    Chunk* _root;$/;"	m	class:tinyxml2::MemPoolT
_rootAttribute	src/tinyxml2.h	/^    XMLAttribute* _rootAttribute;$/;"	m	class:tinyxml2::XMLElement
_size	src/tinyxml2.h	/^    int _size;			\/\/ number objects in use$/;"	m	class:tinyxml2::DynArray
_stack	src/tinyxml2.h	/^    DynArray< const char*, 10 > _stack;$/;"	m	class:tinyxml2::XMLPrinter
_start	src/tinyxml2.h	/^    char*   _start;$/;"	m	class:tinyxml2::StrPair
_strupr	src/cfgFile.cpp	/^void _strupr(char *str)$/;"	f
_strupr	src/unused/cfgFile.cpp	/^void _strupr(char *str)$/;"	f
_textDepth	src/tinyxml2.h	/^    int _textDepth;$/;"	m	class:tinyxml2::XMLPrinter
_textPool	src/tinyxml2.h	/^    MemPoolT< sizeof(XMLText) >		 _textPool;$/;"	m	class:tinyxml2::XMLDocument
_value	src/tinyxml2.h	/^    mutable StrPair	_value;$/;"	m	class:tinyxml2::XMLNode
_value	src/tinyxml2.h	/^    mutable StrPair _value;$/;"	m	class:tinyxml2::XMLAttribute
_whitespace	src/tinyxml2.h	/^    Whitespace  _whitespace;$/;"	m	class:tinyxml2::XMLDocument
_writeBOM	src/tinyxml2.h	/^    bool        _writeBOM;$/;"	m	class:tinyxml2::XMLDocument
access	src/siaserver.cpp	25;"	d	file:
acd_request_route	src/SiaSession.cpp	/^void TSessionLua::acd_request_route(const Json::Value & data)$/;"	f	class:TSessionLua
acd_request_route	src/SiaSession.cpp	/^void TSessionLua::acd_request_route(const std::string & data)$/;"	f	class:TSessionLua
acd_reroute	src/SiaSession.cpp	/^void TSessionLua::acd_reroute(const std::string & data)$/;"	f	class:TSessionLua
acd_route_end	src/SiaSession.cpp	/^void TSessionLua::acd_route_end(const std::string & data)$/;"	f	class:TSessionLua
acd_route_used	src/SiaSession.cpp	/^void TSessionLua::acd_route_used(const std::string & data)$/;"	f	class:TSessionLua
addRead	include/hiredis/async.h	/^        void (*addRead)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon14
addTimer	src/SiaManager.cpp	/^void CSIATimer::addTimer(evutil_socket_t fd, short event, void * arg)$/;"	f	class:CSIATimer
addWrite	include/hiredis/async.h	/^        void (*addWrite)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon14
add_event	src/server.cpp	/^static void add_event(int epollfd,int fd,int state)$/;"	f	file:
address	include/json/allocator.h	/^  const_pointer address(const_reference x) const { return std::addressof(x); }$/;"	f	class:Json::SecureAllocator
address	include/json/allocator.h	/^  pointer address(reference x) const { return std::addressof(x); }$/;"	f	class:Json::SecureAllocator
addrlen	include/hiredis/async.h	/^    size_t addrlen;$/;"	m	struct:redisAsyncContext
addrlen	include/hiredis/hiredis.h	/^    size_t addrlen;$/;"	m	struct:redisContext
algorithm	src/ACDCallNum.h	/^	std::string algorithm;            \/\/ 选择网关策略：0：轮询，1：随机$/;"	m	struct:SipGWGroup
alloc	include/hiredis/sds.h	/^    uint16_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr16
alloc	include/hiredis/sds.h	/^    uint32_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr32
alloc	include/hiredis/sds.h	/^    uint64_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr64
alloc	include/hiredis/sds.h	/^    uint8_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr8
allocate	include/json/allocator.h	/^  pointer allocate(size_type n) {$/;"	f	class:Json::SecureAllocator
allocated_	include/json/value.h	/^    unsigned int allocated_ : 1;$/;"	m	struct:Json::Value::__anon13
alltrim	src/cfgFile.cpp	/^void CTCfgFile::alltrim(char *string)  \/\/add by zsw$/;"	f	class:CTCfgFile
alltrim	src/unused/cfgFile.cpp	/^void CTCfgFile::alltrim(char *string)  \/\/add by zsw$/;"	f	class:CTCfgFile
args_	include/json/value.h	/^  Args args_;$/;"	m	class:Json::Path
arrayValue	include/json/value.h	/^  arrayValue,    \/\/\/< array value (ordered list)$/;"	e	enum:Json::ValueType
asc_tag	src/strategy.cpp	/^struct asc_tag {$/;"	s	file:
banner	acdd.cpp	/^static const char *banner =$/;"	v	file:
bare_prompt_str	acdd.cpp	/^static char bare_prompt_str[512] = "";$/;"	v	file:
bare_prompt_str_len	acdd.cpp	/^static int bare_prompt_str_len = 0;$/;"	v	file:
base	src/HttpRequest.h	/^	struct event_base * base;$/;"	m	class:HttpRequest	typeref:struct:HttpRequest::event_base
base	src/unused/HttpRequest.h	/^	struct event_base * base;$/;"	m	class:HttpRequest	typeref:struct:HttpRequest::event_base
belongs_to	src/ACDReadConfig.cpp	/^std::string ReadJSONConfig::belongs_to(void) const$/;"	f	class:ReadJSONConfig
belongs_to	src/ACDReadConfig.cpp	/^std::string ReadXMLConfig::belongs_to(void) const$/;"	f	class:ReadXMLConfig
bind	include/hiredis/sockcompat.h	78;"	d
bits_	include/json/value.h	/^  } bits_;$/;"	m	class:Json::Value	typeref:struct:Json::Value::__anon13
blocksize	src/unused/MD5.h	/^		enum { blocksize = 64 }; \/\/ VC6 won't eat a const static int here$/;"	e	enum:helper::MD5::__anon9
bool_	include/json/value.h	/^    bool bool_;$/;"	m	union:Json::Value::ValueHolder
booleanValue	include/json/value.h	/^  booleanValue,  \/\/\/< bool value$/;"	e	enum:Json::ValueType
buf	include/hiredis/read.h	/^    char *buf; \/* Read buffer *\/$/;"	m	struct:redisReader
buf	include/hiredis/sds.h	/^    char buf[];$/;"	m	struct:sdshdr16
buf	include/hiredis/sds.h	/^    char buf[];$/;"	m	struct:sdshdr32
buf	include/hiredis/sds.h	/^    char buf[];$/;"	m	struct:sdshdr5
buf	include/hiredis/sds.h	/^    char buf[];$/;"	m	struct:sdshdr64
buf	include/hiredis/sds.h	/^    char buf[];$/;"	m	struct:sdshdr8
buffer	src/TcpClientModule.cpp	/^	char buffer[INT_SIZE];$/;"	m	union:contextlen	file:
buffer	src/TcpServerModule.cpp	/^	char buffer[INT_SIZE];$/;"	m	union:contextlen	file:
buffer	src/unused/MD5.h	/^		uint1 buffer[blocksize] = { 0 }; \/\/ bytes that didn't fit in last 64 byte chunk$/;"	m	class:helper::MD5
c	include/hiredis/async.h	/^    redisContext c;$/;"	m	struct:redisAsyncContext
c99_snprintf	include/hiredis/win32.h	/^__inline int c99_snprintf(char* str, size_t size, const char* format, ...)$/;"	f
c99_vsnprintf	include/hiredis/win32.h	/^__inline int c99_vsnprintf(char* str, size_t size, const char* format, va_list ap)$/;"	f
c_str	include/json/value.h	/^  const char* c_str() const { return c_str_; }$/;"	f	class:Json::StaticString
c_str_	include/json/value.h	/^  const char* c_str_;$/;"	m	class:Json::StaticString
callee_prefix_add	src/ACDCallNum.h	/^    std::string  callee_prefix_add;   \/\/ 被叫前面补码$/;"	m	struct:CallNum
callee_prefix_add	src/ACDCallNum.h	/^    std::string  callee_prefix_add;   \/\/ 被叫前面补码$/;"	m	struct:CallNumSipGateway
callee_prefix_del	src/ACDCallNum.h	/^    int          callee_prefix_del;   \/\/ 被叫前面吃码数$/;"	m	struct:CallNum
callee_prefix_del	src/ACDCallNum.h	/^    int          callee_prefix_del;   \/\/ 被叫前面吃码数$/;"	m	struct:CallNumSipGateway
callee_suffix_add	src/ACDCallNum.h	/^    std::string  callee_suffix_add;   \/\/ 被叫后面补码$/;"	m	struct:CallNum
callee_suffix_add	src/ACDCallNum.h	/^    std::string  callee_suffix_add;   \/\/ 被叫后面补码$/;"	m	struct:CallNumSipGateway
callee_suffix_del	src/ACDCallNum.h	/^    int          callee_suffix_del;   \/\/ 被叫后面吃码数$/;"	m	struct:CallNum
callee_suffix_del	src/ACDCallNum.h	/^    int          callee_suffix_del;   \/\/ 被叫后面吃码数$/;"	m	struct:CallNumSipGateway
caller	src/ACDCallNum.h	/^    std::string  caller;              \/\/ 主叫号码，后台选择用$/;"	m	struct:CallNumPool
callfopen	src/tinyxml2.cpp	/^static FILE* callfopen( const char* filepath, const char* mode )$/;"	f	namespace:tinyxml2
callnum	src/ACDCallNum.h	/^    std::string  callnum;             \/\/ 外显号码$/;"	m	struct:CallNum
callnum_id	src/ACDCallNum.h	/^    int          callnum_id;          \/\/ 外显号码id$/;"	m	struct:CallNumPoolCallNum
callnum_pool_id	src/ACDCallNum.h	/^    int          callnum_pool_id;     \/\/ 外显号码池id$/;"	m	struct:CallNumPoolCallNum
cc_directories	acdd.h	/^struct cc_directories {$/;"	s
cfg_GetPrivateProfileBoolEx	src/cfgFile.cpp	/^int32_t cfg_GetPrivateProfileBoolEx(const char *pSection, const char *pKey, int32_t   Default, const char *pFileName)$/;"	f
cfg_GetPrivateProfileBoolEx	src/unused/cfgFile.cpp	/^int32_t cfg_GetPrivateProfileBoolEx(const char *pSection, const char *pKey, int32_t   Default, const char *pFileName)$/;"	f
cfg_GetPrivateProfileDoubleEx	src/cfgFile.cpp	/^double cfg_GetPrivateProfileDoubleEx  (const char *pSection, const char *pKey, double Default, const char *pFileName)$/;"	f
cfg_GetPrivateProfileDoubleEx	src/unused/cfgFile.cpp	/^double cfg_GetPrivateProfileDoubleEx  (const char *pSection, const char *pKey, double Default, const char *pFileName)$/;"	f
cfg_GetPrivateProfileIntEx	src/cfgFile.cpp	/^int cfg_GetPrivateProfileIntEx(const char *pSection, const char *pKey, int    Default, const char *pFileName)$/;"	f
cfg_GetPrivateProfileIntEx	src/unused/cfgFile.cpp	/^int cfg_GetPrivateProfileIntEx(const char *pSection, const char *pKey, int    Default, const char *pFileName)$/;"	f
cfg_GetPrivateProfileSectionNamesEx	src/cfgFile.cpp	/^unsigned int cfg_GetPrivateProfileSectionNamesEx(char * strReturn,$/;"	f
cfg_GetPrivateProfileSectionNamesEx	src/unused/cfgFile.cpp	/^unsigned int cfg_GetPrivateProfileSectionNamesEx(char * strReturn,$/;"	f
cfg_GetPrivateProfileStringEx	src/cfgFile.cpp	/^char    *cfg_GetPrivateProfileStringEx (const char *pSection, const char *pKey, const char  *pDefault, char *pReturnedString,  int nSize, const char *pFileName)$/;"	f
cfg_GetPrivateProfileStringEx	src/unused/cfgFile.cpp	/^char    *cfg_GetPrivateProfileStringEx (const char *pSection, const char *pKey, const char  *pDefault, char *pReturnedString,  int nSize, const char *pFileName)$/;"	f
cfg_RemoveQuotation	src/cfgFile.cpp	/^void cfg_RemoveQuotation(char *string)  $/;"	f
cfg_RemoveQuotation	src/unused/cfgFile.cpp	/^void cfg_RemoveQuotation(char *string)  $/;"	f
cfg_WritePrivateProfileBoolEx	src/cfgFile.cpp	/^void    cfg_WritePrivateProfileBoolEx   (const char *pSection, const char *pKey, int32_t   Value, const char *pFileName)$/;"	f
cfg_WritePrivateProfileBoolEx	src/unused/cfgFile.cpp	/^void    cfg_WritePrivateProfileBoolEx   (const char *pSection, const char *pKey, int32_t   Value, const char *pFileName)$/;"	f
cfg_WritePrivateProfileDoubleEx	src/cfgFile.cpp	/^void    cfg_WritePrivateProfileDoubleEx (const char *pSection, const char *pKey, double Value, const char *pFileName)$/;"	f
cfg_WritePrivateProfileDoubleEx	src/unused/cfgFile.cpp	/^void    cfg_WritePrivateProfileDoubleEx (const char *pSection, const char *pKey, double Value, const char *pFileName)$/;"	f
cfg_WritePrivateProfileIntEx	src/cfgFile.cpp	/^void    cfg_WritePrivateProfileIntEx    (const char *pSection, const char *pKey, int    Value, const char *pFileName)$/;"	f
cfg_WritePrivateProfileIntEx	src/unused/cfgFile.cpp	/^void    cfg_WritePrivateProfileIntEx    (const char *pSection, const char *pKey, int    Value, const char *pFileName)$/;"	f
cfg_WritePrivateProfileSectionEx	src/cfgFile.cpp	/^int cfg_WritePrivateProfileSectionEx(const char * pSection,$/;"	f
cfg_WritePrivateProfileSectionEx	src/unused/cfgFile.cpp	/^int cfg_WritePrivateProfileSectionEx(const char * pSection,$/;"	f
cfg_WritePrivateProfileStringEx	src/cfgFile.cpp	/^void    cfg_WritePrivateProfileStringEx (const char *pSection, const char *pKey, const char  *pValue, const char *pFileName)$/;"	f
cfg_WritePrivateProfileStringEx	src/unused/cfgFile.cpp	/^void    cfg_WritePrivateProfileStringEx (const char *pSection, const char *pKey, const char  *pValue, const char *pFileName)$/;"	f
change_current_dir	acdd.cpp	/^void change_current_dir()$/;"	f
channels	include/hiredis/async.h	/^        struct dict *channels;$/;"	m	struct:redisAsyncContext::__anon15	typeref:struct:redisAsyncContext::__anon15::dict
chilli	src/MySqlModule.cpp	/^namespace chilli{$/;"	n	file:
chunk	src/tinyxml2.h	/^        Chunk chunk[COUNT];$/;"	m	struct:tinyxml2::MemPoolT::Block
cleanup	include/hiredis/async.h	/^        void (*cleanup)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon14
cleartimer	src/SiaSession.cpp	/^void TSessionLua::cleartimer()$/;"	f	class:TSessionLua
cli_usage	acdd.cpp	/^static const char *cli_usage =$/;"	v	file:
close	include/hiredis/sockcompat.h	82;"	d
cmd	src/CMessage.h	/^	std::string cmd;$/;"	m	class:CMessage
codec	src/ACDCallNum.h	/^    std::string codec;                \/\/ 支持的音频编码 PCMA,PCMU$/;"	m	struct:SipGateway
commentAfter	include/json/value.h	/^  commentAfter, \/\/\/< a comment on the line after a value (only make sense for$/;"	e	enum:Json::CommentPlacement
commentAfterOnSameLine	include/json/value.h	/^  commentAfterOnSameLine, \/\/\/< a comment just after a value on the same line$/;"	e	enum:Json::CommentPlacement
commentBefore	include/json/value.h	/^  commentBefore = 0,      \/\/\/< a comment placed on the line before a value$/;"	e	enum:Json::CommentPlacement
commentsBefore_	include/json/reader.h	/^  String commentsBefore_;$/;"	m	class:Json::Reader
comments_	include/json/value.h	/^  Comments comments_;$/;"	m	class:Json::Value
config	src/ACDCallNum.h	/^	std::string       config;$/;"	m	class:LBRedis
conn_eventcb	src/TcpServerModule.cpp	/^void TcpServerModule::conn_eventcb(struct bufferevent *bev, short events, void * user_data)$/;"	f	class:TcpServerModule
conn_read_cb	src/TcpServerModule.cpp	/^void TcpServerModule::conn_read_cb(struct bufferevent *bev, void * user_data)$/;"	f	class:TcpServerModule
conn_writecb	src/TcpServerModule.cpp	/^void TcpServerModule::conn_writecb(struct bufferevent *bev, void *user_data)$/;"	f	class:TcpServerModule
connect	include/hiredis/sockcompat.h	79;"	d
connect	src/ACDCallNum.cpp	/^void LBRedis::connect()$/;"	f	class:LBRedis
connect_delay_timer	src/TcpClientModule.cpp	/^void TcpClientModule::connect_delay_timer(evutil_socket_t fd, short event, void *arg)$/;"	f	class:TcpClientModule
connect_event_cb	src/TcpClientModule.cpp	/^void TcpClientModule::connect_event_cb(struct bufferevent *bev, short event, void *arg)$/;"	f	class:TcpClientModule
connect_read_cb	src/TcpClientModule.cpp	/^void TcpClientModule::connect_read_cb(struct bufferevent* bev, void* arg)$/;"	f	class:TcpClientModule
connect_timeout	src/TcpClientModule.cpp	/^void TcpClientModule::connect_timeout(evutil_socket_t fd, short event, void *arg)$/;"	f	class:TcpClientModule
connect_timer	src/TcpServerModule.cpp	/^static void connect_timer(evutil_socket_t fd, short event, void *arg)$/;"	f	file:
connect_write_cb	src/TcpClientModule.cpp	/^void TcpClientModule::connect_write_cb(struct bufferevent* bev, void* arg)$/;"	f	class:TcpClientModule
connection_type	include/hiredis/hiredis.h	/^    enum redisConnectionType connection_type;$/;"	m	struct:redisContext	typeref:enum:redisContext::redisConnectionType
console_bufferInput	acdd.cpp	/^static int console_bufferInput(char *addchars, int len, char *cmd, int key)$/;"	f	file:
console_eofkey	acdd.cpp	/^static unsigned char console_eofkey(EditLine *el, int ch)$/;"	f	file:
console_history	acdd.cpp	/^static int console_history(char *cmd, int direction)$/;"	f	file:
console_readConsole	acdd.cpp	/^static BOOL console_readConsole(HANDLE conIn, char *buf, int len, int *pRed, int *key)$/;"	f	file:
const_iterator	include/json/value.h	/^  typedef ValueConstIterator const_iterator;$/;"	t	class:Json::Value
construct	include/json/allocator.h	/^  template <typename... Args> void construct(pointer p, Args&&... args) {$/;"	f	class:Json::SecureAllocator
contextlen	src/TcpClientModule.cpp	/^union contextlen {$/;"	u	file:
contextlen	src/TcpServerModule.cpp	/^union contextlen {$/;"	u	file:
count	src/unused/MD5.h	/^		uint4 count[2];   \/\/ 64bit counter for number of bits (lo, hi)$/;"	m	class:helper::MD5
createArray	include/hiredis/read.h	/^    void *(*createArray)(const redisReadTask*, int);$/;"	m	struct:redisReplyObjectFunctions
createInteger	include/hiredis/read.h	/^    void *(*createInteger)(const redisReadTask*, long long);$/;"	m	struct:redisReplyObjectFunctions
createNil	include/hiredis/read.h	/^    void *(*createNil)(const redisReadTask*);$/;"	m	struct:redisReplyObjectFunctions
createString	include/hiredis/read.h	/^    void *(*createString)(const redisReadTask*, char*, size_t);$/;"	m	struct:redisReplyObjectFunctions
csbiInfo	acdd.cpp	/^static CONSOLE_SCREEN_BUFFER_INFO csbiInfo;$/;"	v	file:
cstr_	include/json/value.h	/^    char const* cstr_; \/\/ actually, a prefixed string, unless policy is noDup$/;"	m	class:Json::Value::CZString
ctime	src/ACDCallNum.h	/^    unsigned int ctime;               \/\/ 创建时间，10位时间戳$/;"	m	struct:CallNum
ctime	src/ACDCallNum.h	/^    unsigned int ctime;               \/\/ 创建时间，10位时间戳$/;"	m	struct:CallNumPool
ctime	src/ACDCallNum.h	/^    unsigned int ctime;               \/\/ 创建时间，10位时间戳$/;"	m	struct:CallNumPoolCallNum
ctx	include/hiredis/sslio.h	/^    SSL_CTX *ctx;$/;"	m	struct:redisSsl
current_	include/json/value.h	/^  Value::ObjectValues::iterator current_;$/;"	m	class:Json::ValueIteratorBase
currentsessions	src/ACDCallNum.h	/^    int         currentsessions;      \/\/ 当前并发数，由其他模块更新$/;"	m	struct:SipGateway
data	include/hiredis/async.h	/^        void *data;$/;"	m	struct:redisAsyncContext::__anon14
data	include/hiredis/async.h	/^    void *data;$/;"	m	struct:redisAsyncContext
dataString	src/CMessage.h	/^	std::string dataString;$/;"	m	class:CMessage
db_config_path	src/ACDCallNum.h	/^	std::string db_config_path;$/;"	m	class:GatewayManager
db_config_path	src/ACDCallNum.h	/^	std::string db_config_path;$/;"	m	class:ReadConfig2Redis
deallocate	include/json/allocator.h	/^  void deallocate(volatile pointer p, size_type n) {$/;"	f	class:Json::SecureAllocator
debug	src/SiaSession.cpp	/^void TSessionLua::debug(const char * msg)$/;"	f	class:TSessionLua
decimalPlaces	include/json/value.h	/^  decimalPlaces          \/\/\/< we set max number of digits after "." in string$/;"	e	enum:Json::PrecisionType
decode	src/unused/MD5.cpp	/^	void MD5::decode(uint4 output[], const uint1 input[], size_type len)$/;"	f	class:helper::MD5
defaultRealPrecision	include/json/value.h	/^  static const UInt defaultRealPrecision;$/;"	m	class:Json::Value
defaultcaller	src/ACDCallNum.h	/^    std::string defaultcaller;        \/\/ 默认显示的主叫号码$/;"	m	struct:SipGateway
delRead	include/hiredis/async.h	/^        void (*delRead)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon14
delWrite	include/hiredis/async.h	/^        void (*delWrite)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon14
delete_event	src/server.cpp	/^static void delete_event(int epollfd,int fd,int state)$/;"	f	file:
desc	src/ACDCallNum.h	/^    std::string  desc;                \/\/ 备注$/;"	m	struct:CallNum
desc	src/ACDCallNum.h	/^    std::string  desc;                \/\/ 备注$/;"	m	struct:CallNumPool
desc_tag	src/strategy.cpp	/^struct desc_tag {$/;"	s	file:
destroy	include/json/allocator.h	/^  void destroy(pointer p) {$/;"	f	class:Json::SecureAllocator
dict	include/hiredis/dict.h	/^typedef struct dict {$/;"	s
dict	include/hiredis/dict.h	/^} dict;$/;"	t	typeref:struct:dict
dictCompareHashKeys	include/hiredis/dict.h	101;"	d
dictEntry	include/hiredis/dict.h	/^typedef struct dictEntry {$/;"	s
dictEntry	include/hiredis/dict.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictFreeEntryKey	include/hiredis/dict.h	90;"	d
dictFreeEntryVal	include/hiredis/dict.h	79;"	d
dictGetEntryKey	include/hiredis/dict.h	108;"	d
dictGetEntryVal	include/hiredis/dict.h	109;"	d
dictHashKey	include/hiredis/dict.h	106;"	d
dictIterator	include/hiredis/dict.h	/^typedef struct dictIterator {$/;"	s
dictIterator	include/hiredis/dict.h	/^} dictIterator;$/;"	t	typeref:struct:dictIterator
dictSetHashKey	include/hiredis/dict.h	94;"	d
dictSetHashVal	include/hiredis/dict.h	83;"	d
dictSize	include/hiredis/dict.h	111;"	d
dictSlots	include/hiredis/dict.h	110;"	d
dictType	include/hiredis/dict.h	/^typedef struct dictType {$/;"	s
dictType	include/hiredis/dict.h	/^} dictType;$/;"	t	typeref:struct:dictType
difference_type	include/json/value.h	/^  typedef int difference_type;$/;"	t	class:Json::ValueIterator
difference_type	include/json/value.h	/^  typedef int difference_type;$/;"	t	class:Json::ValueIteratorBase
digest	src/unused/MD5.h	/^		uint1 digest[16] = { 0 }; \/\/ the result$/;"	m	class:helper::MD5
do_command	src/ACDCallNum.cpp	/^redisReply * LBRedis::do_command(std::string & str_cmd)$/;"	f	class:LBRedis
do_epoll	src/server.cpp	/^static void do_epoll(int listenfd)$/;"	f	file:
do_read	src/server.cpp	/^static void do_read(int epollfd,int fd,char *buf)$/;"	f	file:
do_write	src/server.cpp	/^static void do_write(int epollfd,int fd,char *buf)$/;"	f	file:
document_	include/json/reader.h	/^  String document_;$/;"	m	class:Json::Reader
duplicate	include/json/value.h	/^    enum DuplicationPolicy { noDuplication = 0, duplicate, duplicateOnCopy };$/;"	e	enum:Json::Value::CZString::DuplicationPolicy
duplicateOnCopy	include/json/value.h	/^    enum DuplicationPolicy { noDuplication = 0, duplicate, duplicateOnCopy };$/;"	e	enum:Json::Value::CZString::DuplicationPolicy
element	include/hiredis/hiredis.h	/^    struct redisReply **element; \/* elements vector for REDIS_REPLY_ARRAY *\/$/;"	m	struct:redisReply	typeref:struct:redisReply::redisReply
elements	include/hiredis/hiredis.h	/^    size_t elements; \/* number of elements, for REDIS_REPLY_ARRAY *\/$/;"	m	struct:redisReply
elements	include/hiredis/read.h	/^    int elements; \/* number of elements in multibulk container *\/$/;"	m	struct:redisReadTask
encode	src/unused/MD5.cpp	/^	void MD5::encode(uint1 output[], const uint4 input[], size_type len)$/;"	f	class:helper::MD5
end_	include/json/reader.h	/^    Location end_;$/;"	m	class:Json::Reader::Token
endconsultservice	src/SiaSession.cpp	/^void TSessionLua::endconsultservice(const char * userdata)$/;"	f	class:TSessionLua
endpoint	include/hiredis/hiredis.h	/^    } endpoint;$/;"	m	struct:__anon16	typeref:union:__anon16::__anon17
entities	src/tinyxml2.cpp	/^static const Entity entities[NUM_ENTITIES] = {$/;"	m	namespace:tinyxml2	file:
entry	include/hiredis/dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
err	include/hiredis/async.h	/^    int err;$/;"	m	struct:redisAsyncContext
err	include/hiredis/hiredis.h	/^    int err; \/* Error flags, 0 when there is no error *\/$/;"	m	struct:redisContext
err	include/hiredis/read.h	/^    int err; \/* Error flags, 0 when there is no error *\/$/;"	m	struct:redisReader
error	src/SiaSession.cpp	/^void TSessionLua::error(const char * msg)$/;"	f	class:TSessionLua
errors_	include/json/reader.h	/^  Errors errors_;$/;"	m	class:Json::Reader
errstr	include/hiredis/async.h	/^    char *errstr;$/;"	m	struct:redisAsyncContext
errstr	include/hiredis/hiredis.h	/^    char errstr[128]; \/* String representation of error when applicable *\/$/;"	m	struct:redisContext
errstr	include/hiredis/read.h	/^    char errstr[128]; \/* String representation of error when applicable *\/$/;"	m	struct:redisReader
ev	include/hiredis/async.h	/^    } ev;$/;"	m	struct:redisAsyncContext	typeref:struct:redisAsyncContext::__anon14
evcon	src/HttpRequest.h	/^	struct evhttp_connection *evcon;$/;"	m	class:HttpRequest	typeref:struct:HttpRequest::evhttp_connection
evcon	src/unused/HttpRequest.h	/^	struct evhttp_connection *evcon;$/;"	m	class:HttpRequest	typeref:struct:HttpRequest::evhttp_connection
execute	src/MySqlModule.cpp	/^	void MySqlModule::execute(helper::CEventBuffer<model::EventType_t>* eventQueue)$/;"	f	class:chilli::DataBase::MySqlModule
executeQuery	src/MySql.cpp	/^	Json::Value MySql::executeQuery(const std::string & sql)$/;"	f	class:DataBase::MySql
executeQuery	src/MySqlModule.cpp	/^	Json::Value MySqlModule::executeQuery(const std::string & sql)$/;"	f	class:chilli::DataBase::MySqlModule
executeSql	src/MySqlModule.cpp	/^	void MySqlModule::executeSql()$/;"	f	class:chilli::DataBase::MySqlModule
expire_seconds	src/ACDCallNum.h	/^    int         expire_seconds;       \/\/ 注册超时时间，单位秒 DEFAULT 60$/;"	m	struct:SipGateway
extra_	include/json/reader.h	/^    Location extra_;$/;"	m	class:Json::Reader::ErrorInfo
fd	include/hiredis/hiredis.h	/^        redisFD fd;$/;"	m	union:__anon16::__anon17
fd	include/hiredis/hiredis.h	/^    redisFD fd;$/;"	m	struct:redisContext
features_	include/json/reader.h	/^  Features features_;$/;"	m	class:Json::Reader
fieldtoJson	src/MySql.cpp	/^	Json::Value fieldtoJson(const MYSQL_FIELD & field,$/;"	f	namespace:DataBase
fieldtoJson	src/MySqlModule.cpp	/^	Json::Value fieldtoJson(const MYSQL_FIELD & field, const char * row, const log4cplus::Logger & log, const std::string & logId)$/;"	f	namespace:chilli::DataBase
fileno	acdd.h	11;"	d
final	src/TcpClientModule.h	/^	virtual void ResetHearbeat() final;$/;"	m	class:TcpClientModule
final	src/TcpClientModule.h	/^	virtual void SetHeartbeat()final;$/;"	m	class:TcpClientModule
finalize	src/unused/MD5.cpp	/^	MD5& MD5::finalize()$/;"	f	class:helper::MD5
finalized	src/unused/MD5.h	/^		bool finalized;$/;"	m	class:helper::MD5
fireSend	src/MySqlModule.cpp	/^	void MySqlModule::fireSend(const fsm::FireDataType & fireData, const void * param)$/;"	f	class:chilli::DataBase::MySqlModule
flags	include/hiredis/hiredis.h	/^    int flags;$/;"	m	struct:redisContext
flags	include/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr16
flags	include/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr32
flags	include/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr64
flags	include/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr8
flags	include/hiredis/sds.h	/^    unsigned char flags; \/* 3 lsb of type, and 5 msb of string length *\/$/;"	m	struct:sdshdr5
fn	include/hiredis/async.h	/^    redisCallbackFn *fn;$/;"	m	struct:redisCallback
fn	include/hiredis/read.h	/^    redisReplyObjectFunctions *fn;$/;"	m	struct:redisReader
freeObject	include/hiredis/read.h	/^    void (*freeObject)(void*);$/;"	m	struct:redisReplyObjectFunctions
freeaddrinfo	include/hiredis/sockcompat.h	75;"	d
g_LuaMtx	src/SiaSession.cpp	/^std::mutex g_LuaMtx;$/;"	v
g_TCPClientMap	src/TcpServerModule.cpp	/^static std::map<void *, struct bufferevent*> g_TCPClientMap;$/;"	v	file:
g_TCPMutex	src/TcpServerModule.cpp	/^static std::recursive_mutex g_TCPMutex;$/;"	v	file:
g_globaldir	acdd.cpp	/^cc_directories g_globaldir;$/;"	v
g_sia	acdd.cpp	/^TSiaManager *g_sia = nullptr;$/;"	v
g_siaManager	src/SiaManager.cpp	/^TSiaManager *g_siaManager = NULL;$/;"	v
gai_strerror	include/hiredis/sockcompat.h	73;"	d
gai_strerror	include/hiredis/sockcompat.h	74;"	d
gateway	src/ACDCallNum.h	/^	SipGateway gateway;$/;"	m	struct:CallNumSipGateway
gateway_id	src/ACDCallNum.h	/^    int          gateway_id;          \/\/ 网关ID$/;"	m	struct:CallNum
getConnection	src/SiaSession.h	/^	const Json::Value & getConnection() const {$/;"	f	class:TSessionLua
getSessionID	src/SiaSession.h	/^	uint32_t getSessionID() const {$/;"	f	class:TSessionLua
get_acd_config	src/ACDReadConfig.cpp	/^bool ReadJSONConfig::get_acd_config(Json::Value & json) const$/;"	f	class:ReadJSONConfig
get_acd_config	src/ACDReadConfig.cpp	/^bool ReadJSONConfig::get_acd_config(std::string & str_ip, unsigned int & port) const$/;"	f	class:ReadJSONConfig
get_acd_config	src/ACDReadConfig.cpp	/^bool ReadXMLConfig::get_acd_config(std::string & str_ip, unsigned int & port) const$/;"	f	class:ReadXMLConfig
get_acd_config	src/testjson.cpp	/^bool ReadJSONConfig::get_acd_config(Json::Value & json) const$/;"	f	class:ReadJSONConfig
get_acd_config	src/testjson.cpp	/^bool ReadJSONConfig::get_acd_config(string & str_ip, unsigned int & port) const$/;"	f	class:ReadJSONConfig
get_acd_config	src/testxml.cpp	/^bool ReadXMLConfig::get_acd_config(string & str_ip, unsigned int & port) const$/;"	f	class:ReadXMLConfig
get_cm_conf	src/testxml.cpp	/^get_cm_conf(const XMLDocument & doc, string & str_ip, unsigned int & port)$/;"	f	file:
get_cm_config	src/ACDReadConfig.cpp	/^bool ReadJSONConfig::get_cm_config(Json::Value & json) const$/;"	f	class:ReadJSONConfig
get_cm_config	src/ACDReadConfig.cpp	/^bool ReadJSONConfig::get_cm_config(std::string & str_ip, unsigned int & port) const$/;"	f	class:ReadJSONConfig
get_cm_config	src/ACDReadConfig.cpp	/^bool ReadXMLConfig::get_cm_config(std::string & str_ip, unsigned int & port) const$/;"	f	class:ReadXMLConfig
get_cm_config	src/testjson.cpp	/^bool ReadJSONConfig::get_cm_config(Json::Value & json) const$/;"	f	class:ReadJSONConfig
get_cm_config	src/testjson.cpp	/^bool ReadJSONConfig::get_cm_config(string & str_ip, unsigned int & port) const$/;"	f	class:ReadJSONConfig
get_cm_config	src/testxml.cpp	/^bool ReadXMLConfig::get_cm_config(string & str_ip, unsigned int & port) const$/;"	f	class:ReadXMLConfig
get_config	src/ACDReadConfig.cpp	/^bool ReadJSONConfig::get_config(CONFIG who, Json::Value & json) const$/;"	f	class:ReadJSONConfig
get_config	src/ACDReadConfig.cpp	/^bool ReadXMLConfig::get_config(CONFIG who, Json::Value & json) const$/;"	f	class:ReadXMLConfig
get_config_object	src/ACDReadConfig.cpp	/^ReadConfig * ConfigObject::get_config_object(OBJECT obj)$/;"	f	class:ConfigObject
get_current_session_numbers	src/ACDCallNum.cpp	/^void GatewayManager::get_current_session_numbers(int & count)$/;"	f	class:GatewayManager
get_data_from_redis	src/ACDCallNum.cpp	/^void GatewayManager::get_data_from_redis()$/;"	f	class:GatewayManager
get_execute_path	acdd.cpp	/^static const char* get_execute_path()$/;"	f	file:
get_hiredis_context	src/ACDCallNum.cpp	/^redisContext * ReadConfig2Redis::get_hiredis_context()$/;"	f	class:ReadConfig2Redis
get_instance	src/ACDCallNum.cpp	/^GatewayManager & GatewayManager::get_instance()$/;"	f	class:GatewayManager
get_instance	src/ACDCallNum.cpp	/^ReadConfig2Redis & ReadConfig2Redis::get_instance()$/;"	f	class:ReadConfig2Redis
get_instance	src/ACDReadConfig.h	/^    static ConfigObject & get_instance() {$/;"	f	class:ConfigObject
get_modified_callee_by_callee	src/ACDCallNum.cpp	/^void GatewayManager::get_modified_callee_by_callee(std::string & callee)$/;"	f	class:GatewayManager
get_mysql_conf	src/testxml.cpp	/^get_mysql_conf(const XMLDocument & doc,$/;"	f	file:
get_mysql_config	src/ACDReadConfig.cpp	/^bool ReadJSONConfig::get_mysql_config(Json::Value & json) const$/;"	f	class:ReadJSONConfig
get_mysql_config	src/ACDReadConfig.cpp	/^bool ReadJSONConfig::get_mysql_config(std::string & str_ip, unsigned int &port, std::string & str_db, std::string & str_user, std::string & str_passwd) const$/;"	f	class:ReadJSONConfig
get_mysql_config	src/ACDReadConfig.cpp	/^bool ReadXMLConfig::get_mysql_config(std::string & str_host, unsigned int & port, std::string & str_db, std::string & str_user, std::string & str_passwd) const$/;"	f	class:ReadXMLConfig
get_mysql_config	src/testjson.cpp	/^bool ReadJSONConfig::get_mysql_config(Json::Value & json) const$/;"	f	class:ReadJSONConfig
get_mysql_config	src/testjson.cpp	/^bool ReadJSONConfig::get_mysql_config(string & str_ip, unsigned int &port, string & str_db, string & str_user, string & str_passwd) const$/;"	f	class:ReadJSONConfig
get_mysql_config	src/testxml.cpp	/^bool ReadXMLConfig::get_mysql_config(string & str_host, unsigned int & port, string & str_db, string & str_user, string & str_passwd) const$/;"	f	class:ReadXMLConfig
get_redis_config	src/ACDReadConfig.cpp	/^bool ReadJSONConfig::get_redis_config(std::string & host, unsigned int & port, std::string & auth) const$/;"	f	class:ReadJSONConfig
get_redis_config	src/ACDReadConfig.cpp	/^bool ReadXMLConfig::get_redis_config(std::string & host, unsigned int & port, std::string & auth) const$/;"	f	class:ReadXMLConfig
get_route_by_caller	src/ACDCallNum.cpp	/^void GatewayManager::get_route_by_caller(const std::string & caller)$/;"	f	class:GatewayManager
get_route_info	src/strategy.cpp	/^void IdleStrategy::get_route_info(std::string &data, const Json::Value & src, Json::Value & dst)$/;"	f	class:IdleStrategy
get_self_conf	src/testxml.cpp	/^get_self_conf(const XMLDocument & doc, string & str_ip, unsigned int & port)$/;"	f	file:
getaddrinfo	include/hiredis/sockcompat.h	72;"	d
getsockopt	include/hiredis/sockcompat.h	80;"	d
hStdout	acdd.cpp	/^static HANDLE hStdout;$/;"	v	file:
handle_SIGINT	acdd.cpp	/^static void handle_SIGINT(int sig)$/;"	f	file:
handle_SIGQUIT	acdd.cpp	/^static void handle_SIGQUIT(int sig)$/;"	f	file:
handle_accpet	src/server.cpp	/^static void handle_accpet(int epollfd,int listenfd)$/;"	f	file:
handle_events	src/server.cpp	/^handle_events(int epollfd,struct epoll_event *events,int num,int listenfd,char *buf)$/;"	f	file:
hashFunction	include/hiredis/dict.h	/^    unsigned int (*hashFunction)(const void *key);$/;"	m	struct:dictType
head	include/hiredis/async.h	/^    redisCallback *head, *tail;$/;"	m	struct:redisCallbackList
heartbeatTimeout	src/TcpClientModule.cpp	/^void TcpClientModule::heartbeatTimeout(evutil_socket_t fd, short event, void * arg)$/;"	f	class:TcpClientModule
heartbeat_timer	src/TcpServerModule.cpp	/^static void heartbeat_timer(evutil_socket_t fd, short event, void *arg)$/;"	f	file:
helper	src/CEventBuffer.h	/^namespace helper{$/;"	n
helper	src/stringHelper.h	/^namespace helper$/;"	n
helper	src/unused/MD5.cpp	/^namespace helper {$/;"	n	file:
helper	src/unused/MD5.h	/^namespace helper {$/;"	n
helper	src/uuid.h	/^namespace helper {$/;"	n
hexdigest	src/unused/MD5.cpp	/^	std::string MD5::hexdigest() const$/;"	f	class:helper::MD5
history	acdd.cpp	/^char history[HISTLEN][CMD_BUFLEN + 1];$/;"	v
hlen	src/TcpClientModule.cpp	/^	unsigned int  hlen;$/;"	m	union:contextlen	file:
hlen	src/TcpServerModule.cpp	/^	unsigned int  hlen;$/;"	m	union:contextlen	file:
host	include/hiredis/hiredis.h	/^        char *host;$/;"	m	struct:redisContext::__anon19
ht	include/hiredis/dict.h	/^    dict *ht;$/;"	m	struct:dictIterator
http_method	src/HttpRequest.h	/^	enum http_method {$/;"	g	class:HttpRequest
http_method	src/unused/HttpRequest.h	/^	enum http_method {$/;"	g	class:HttpRequest
http_on_close	src/HttpRequest.h	/^	static void http_on_close(struct evhttp_connection *evcon, void *arg)$/;"	f	class:HttpRequest
http_on_close	src/unused/HttpRequest.h	/^	static void http_on_close(struct evhttp_connection *evcon, void *arg)$/;"	f	class:HttpRequest
http_request_done	src/HttpRequest.h	/^	static void http_request_done(struct evhttp_request *req, void *arg)$/;"	f	class:HttpRequest
http_request_done	src/unused/HttpRequest.h	/^	static void http_request_done(struct evhttp_request *req, void *arg)$/;"	f	class:HttpRequest
http_uri	src/HttpRequest.h	/^	struct evhttp_uri *http_uri;$/;"	m	class:HttpRequest	typeref:struct:HttpRequest::evhttp_uri
http_uri	src/unused/HttpRequest.h	/^	struct evhttp_uri *http_uri;$/;"	m	class:HttpRequest	typeref:struct:HttpRequest::evhttp_uri
iHistory	acdd.cpp	/^int iHistory = 0;$/;"	v
iHistorySel	acdd.cpp	/^int iHistorySel = 0;$/;"	v
id	src/ACDCallNum.h	/^	int         id;                   \/\/ 记录ID，自增$/;"	m	struct:SipGWGroup
id	src/ACDCallNum.h	/^    int          id;                  \/\/ identifier$/;"	m	struct:CallNumPool
id	src/ACDCallNum.h	/^    int          id;                  \/\/ identifier$/;"	m	struct:CallNumPoolCallNum
id	src/ACDCallNum.h	/^    int         id;                   \/\/ identifier$/;"	m	struct:SipGateway
id	src/ACDCallNum.h	/^    long long    id;                  \/\/ identifier$/;"	m	struct:CallNum
id	src/ACDCallNum.h	/^    long long    id;                  \/\/ identifier$/;"	m	struct:CallNumSipGateway
id	src/strategy.cpp	/^	unsigned int id;$/;"	m	struct:KV	file:
idx	include/hiredis/read.h	/^    int idx; \/* index in parent (array) object *\/$/;"	m	struct:redisReadTask
in	src/ACDReadConfig.h	/^    std::ifstream in;$/;"	m	class:ReadJSONConfig
in	src/testjson.cpp	/^    ifstream in;$/;"	m	class:ReadJSONConfig	file:
index	include/hiredis/dict.h	/^    int index;$/;"	m	struct:dictIterator
index_	include/json/value.h	/^      ArrayIndex index_;$/;"	m	union:Json::Value::CZString::__anon12
inf	acdd.cpp	/^static const char *inf = "Type \/help <enter> to see a list of commands\\n\\n\\n";$/;"	v	file:
info	src/SiaSession.cpp	/^void TSessionLua::info(const char * msg)$/;"	f	class:TSessionLua
init	src/unused/MD5.cpp	/^	void MD5::init()$/;"	f	class:helper::MD5
inline	include/hiredis/win32.h	6;"	d
intValue	include/json/value.h	/^  intValue,      \/\/\/< signed integer value$/;"	e	enum:Json::ValueType
int_	include/json/value.h	/^    LargestInt int_;$/;"	m	union:Json::Value::ValueHolder
integer	include/hiredis/hiredis.h	/^    long long integer; \/* The integer when type is REDIS_REPLY_INTEGER *\/$/;"	m	struct:redisReply
invalid	include/hiredis/async.h	/^        redisCallbackList invalid;$/;"	m	struct:redisAsyncContext::__anon15
ioctl	include/hiredis/sockcompat.h	77;"	d
ip	include/hiredis/hiredis.h	/^            const char *ip;$/;"	m	struct:__anon16::__anon17::__anon18
ip	src/ACDCallNum.h	/^    std::string ip;                   \/\/ 网关IP地址$/;"	m	struct:SipGateway
isAllocated	include/json/value.h	/^  bool isAllocated() const { return bits_.allocated_; }$/;"	f	class:Json::Value
isStringEmpty	src/stringHelper.h	/^		static inline bool isStringEmpty(const std::string &attr)$/;"	f	namespace:helper::string
is_color	acdd.cpp	/^static int is_color = 1;$/;"	v	file:
isregister	src/ACDCallNum.h	/^    int         isregister;           \/\/ 是否注册$/;"	m	struct:SipGateway
iterator	include/json/value.h	/^  typedef ValueIterator iterator;$/;"	t	class:Json::Value
iterator_category	include/json/value.h	/^  typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:Json::ValueIteratorBase
json	src/ACDCallNum.h	/^    Json::Value json;                        \/\/ 匹配后的结果$/;"	m	class:GatewayManager
jsonData	src/CMessage.h	/^	Json::Value jsonData;$/;"	m	class:CMessage
json_available_routes	src/ACDCallNum.h	/^	Json::Value json_available_routes;       \/\/ 可用网关结果$/;"	m	class:GatewayManager
json_callnum	src/ACDCallNum.h	/^	Json::Value json_callnum;                \/\/ redis 中的外显号码记录$/;"	m	class:GatewayManager
json_callnum	src/ACDCallNum.h	/^	Json::Value json_callnum;$/;"	m	class:ReadConfig2Redis
json_callnum_pool	src/ACDCallNum.h	/^	Json::Value json_callnum_pool;           \/\/ redis 中的外显号码池记录$/;"	m	class:GatewayManager
json_callnum_pool	src/ACDCallNum.h	/^	Json::Value json_callnum_pool;$/;"	m	class:ReadConfig2Redis
json_callnum_pool_callnum	src/ACDCallNum.h	/^	Json::Value json_callnum_pool_callnum;   \/\/ redis 号码池与号码关系$/;"	m	class:GatewayManager
json_callnum_pool_callnum	src/ACDCallNum.h	/^	Json::Value json_callnum_pool_callnum;$/;"	m	class:ReadConfig2Redis
json_gateway	src/ACDCallNum.h	/^	Json::Value json_gateway;                \/\/ redis 中的网关配置信息$/;"	m	class:GatewayManager
json_gateway	src/ACDCallNum.h	/^	Json::Value json_gateway;$/;"	m	class:ReadConfig2Redis
json_gwgroup	src/ACDCallNum.h	/^	Json::Value json_gwgroup;                \/\/ 网关组$/;"	m	class:GatewayManager
json_gwgroup	src/ACDCallNum.h	/^	Json::Value json_gwgroup;$/;"	m	class:ReadConfig2Redis
jsoncpp_snprintf	include/json/config.h	72;"	d
jsoncpp_snprintf	include/json/config.h	74;"	d
key	include/hiredis/dict.h	/^    void *key;$/;"	m	struct:dictEntry
keyCompare	include/hiredis/dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType
keyDestructor	include/hiredis/dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType
keyDup	include/hiredis/dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType
key_	include/json/value.h	/^  String key_;$/;"	m	class:Json::PathArgument
kindIndex	include/json/value.h	/^  enum Kind { kindNone = 0, kindIndex, kindKey };$/;"	e	enum:Json::PathArgument::Kind
kindKey	include/json/value.h	/^  enum Kind { kindNone = 0, kindIndex, kindKey };$/;"	e	enum:Json::PathArgument::Kind
kindNone	include/json/value.h	/^  enum Kind { kindNone = 0, kindIndex, kindKey };$/;"	e	enum:Json::PathArgument::Kind
lastLen	include/hiredis/sslio.h	/^    size_t lastLen;$/;"	m	struct:redisSsl
len	include/hiredis/hiredis.h	/^    size_t len; \/* Length of string *\/$/;"	m	struct:redisReply
len	include/hiredis/read.h	/^    size_t len; \/* Buffer length *\/$/;"	m	struct:redisReader
len	include/hiredis/sds.h	/^    uint16_t len; \/* used *\/$/;"	m	struct:sdshdr16
len	include/hiredis/sds.h	/^    uint32_t len; \/* used *\/$/;"	m	struct:sdshdr32
len	include/hiredis/sds.h	/^    uint64_t len; \/* used *\/$/;"	m	struct:sdshdr64
len	include/hiredis/sds.h	/^    uint8_t len; \/* used *\/$/;"	m	struct:sdshdr8
length	src/tinyxml2.cpp	/^    int length;$/;"	m	struct:tinyxml2::Entity	file:
length_	include/json/value.h	/^      unsigned length_ : 30; \/\/ 1GB max$/;"	m	struct:Json::Value::CZString::StringStorage
libevent_fatal	acdd.cpp	/^static void libevent_fatal(int err)$/;"	f	file:
libevent_log	acdd.cpp	/^static void libevent_log(int severity, const char *msg)$/;"	f	file:
limit_	include/json/value.h	/^  ptrdiff_t limit_;$/;"	m	class:Json::Value
listenTCP	src/TcpServerModule.cpp	/^bool TcpServerModule::listenTCP(const std::string & ip, int port)$/;"	f	class:TcpServerModule
listener_cb	src/TcpServerModule.cpp	/^void TcpServerModule::listener_cb(struct evconnlistener *listener, evutil_socket_t fd, struct sockaddr *sa, int socklen, void *user_data)$/;"	f	class:TcpServerModule
load_data_from_mysql	src/ACDCallNum.cpp	/^void ReadConfig2Redis::load_data_from_mysql()$/;"	f	class:ReadConfig2Redis
load_file	src/ACDReadConfig.cpp	/^bool ReadJSONConfig::load_file(const char * json_file) throw(std::string)$/;"	f	class:ReadJSONConfig
load_file	src/ACDReadConfig.cpp	/^bool ReadXMLConfig::load_file(const char * xml_file)$/;"	f	class:ReadXMLConfig
load_json_file	src/testjson.cpp	/^bool ReadJSONConfig::load_json_file(const char * json_file) throw(string)$/;"	f	class:ReadJSONConfig
load_xml_file	src/testxml.cpp	/^bool ReadXMLConfig::load_xml_file(const char * xml_file)$/;"	f	class:ReadXMLConfig
log	src/ACDCallNum.h	/^    log4cplus::Logger log;$/;"	m	class:GatewayManager
log	src/ACDCallNum.h	/^    log4cplus::Logger log;$/;"	m	class:LBRedis
log	src/ACDCallNum.h	/^    log4cplus::Logger log;$/;"	m	class:ReadConfig2Redis
log	src/HttpClientModule.h	/^	log4cplus::Logger log;$/;"	m	class:HttpClientModule
log	src/HttpClientModule.h	/^	log4cplus::Logger log;$/;"	m	class:HttpClientThread
log	src/HttpRequest.h	/^	log4cplus::Logger log;$/;"	m	class:HttpRequest
log	src/MySql.h	/^    log4cplus::Logger log;$/;"	m	class:DataBase::MySql
log	src/SiaHttpServer.h	/^	log4cplus::Logger log;$/;"	m	class:SiaHttpServer
log	src/SiaManager.h	/^	log4cplus::Logger log;$/;"	m	class:CSIATimer
log	src/SiaManager.h	/^	log4cplus::Logger log;$/;"	m	class:TSiaManager
log	src/SiaPrometheus.h	/^    log4cplus::Logger log;$/;"	m	class:SiaPrometheus
log	src/SiaSession.h	/^	log4cplus::Logger log;$/;"	m	class:TSessionLua
log	src/TcpClientModule.h	/^	log4cplus::Logger log;$/;"	m	class:TcpClientModule
log	src/TcpServerModule.h	/^	log4cplus::Logger log;$/;"	m	class:TcpClient
log	src/TcpServerModule.h	/^	log4cplus::Logger log;$/;"	m	class:TcpServerModule
log	src/strategy.h	/^	log4cplus::Logger log;$/;"	m	class:Strategy
log	src/unused/HttpClientModule.h	/^	log4cplus::Logger log;$/;"	m	class:HttpClientModule
log	src/unused/HttpClientModule.h	/^	log4cplus::Logger log;$/;"	m	class:HttpClientThread
log	src/unused/HttpRequest.h	/^	log4cplus::Logger log;$/;"	m	class:HttpRequest
login_timer	src/TcpServerModule.cpp	/^static void login_timer(evutil_socket_t fd, short event, void *arg)$/;"	f	file:
ltrim	src/stringHelper.h	/^		static inline std::string &ltrim(std::string &s)$/;"	f	namespace:helper::string
m_AddTimerMap	src/SiaManager.h	/^	helper::CEventBuffer<CTimerElementPtr> m_AddTimerMap;$/;"	m	class:CSIATimer
m_Base	src/HttpClientModule.h	/^	struct event_base * m_Base;$/;"	m	class:HttpClientThread	typeref:struct:HttpClientThread::event_base
m_Base	src/SiaManager.h	/^	struct event_base * m_Base;$/;"	m	class:CSIATimer	typeref:struct:CSIATimer::event_base
m_Base	src/TcpServerModule.h	/^	struct event_base * m_Base = nullptr;$/;"	m	class:TcpServerModule	typeref:struct:TcpServerModule::event_base
m_Base	src/unused/HttpClientModule.h	/^	struct event_base * m_Base;$/;"	m	class:HttpClientThread	typeref:struct:HttpClientThread::event_base
m_CMClientModule	src/SiaManager.h	/^	TcpClientModule * m_CMClientModule = nullptr;$/;"	m	class:TSiaManager
m_CMPort	src/SiaManager.h	/^    uint32_t          m_CMPort;$/;"	m	class:TSiaManager
m_CMServerIp	src/SiaManager.h	/^    std::string       m_CMServerIp;$/;"	m	class:TSiaManager
m_CTimer	src/SiaManager.h	/^	CSIATimer*		m_CTimer;$/;"	m	class:CTimerElement
m_Called	src/SiaSession.h	/^	std::string       m_Called;$/;"	m	class:TSessionLua
m_Caller	src/SiaSession.h	/^	std::string       m_Caller;$/;"	m	class:TSessionLua
m_Callid2SessionMap	src/SiaManager.h	/^	std::map<std::string, SESSIONIDTYPE>   m_Callid2SessionMap;$/;"	m	class:TSiaManager
m_Connected	src/TcpClientModule.h	/^	std::atomic<bool>	m_Connected;$/;"	m	class:TcpClientModule
m_Connected	src/TcpServerModule.h	/^	std::atomic<bool>   m_Connected;$/;"	m	class:TcpClient
m_Connects	src/SiaTcpServer.h	/^	std::map<int, TcpClient *> m_Connects;$/;"	m	class:SiaTCPServer
m_CurrentState	src/SiaSession.h	/^	std::string       m_CurrentState;$/;"	m	class:TSessionLua
m_DataBase	src/MySql.h	/^	std::string m_DataBase;$/;"	m	class:DataBase::MySql
m_DataBase	src/MySqlModule.h	/^	std::string m_DataBase;$/;"	m	class:DataBase::MySqlModule
m_DataMtx	src/SiaTcpServer.h	/^	std::mutex m_DataMtx;$/;"	m	class:SiaTCPServer
m_Datas	src/SiaTcpServer.h	/^	std::multimap<int, SiaTcpData> m_Datas;$/;"	m	class:SiaTCPServer
m_Datas	src/TcpClientModule.h	/^	helper::CEventBuffer<class TCPData *> m_Datas;$/;"	m	class:TcpClientModule
m_EventQueue	src/SiaSession.h	/^	helper::CEventBuffer<std::shared_ptr<CMessage>>  m_EventQueue;   \/\/业务线程在此获取消息，并执行$/;"	m	class:TSessionLua
m_FlowPath	src/SiaManager.h	/^	std::string	      m_FlowPath;$/;"	m	class:TSiaManager
m_Host	src/MySql.h	/^	std::string m_Host;$/;"	m	class:DataBase::MySql
m_Host	src/MySqlModule.h	/^	std::string m_Host;$/;"	m	class:DataBase::MySqlModule
m_HttpRequests	src/HttpClientModule.h	/^	helper::CEventBuffer<HttpRequestPtr> m_HttpRequests;$/;"	m	class:HttpClientModule
m_HttpRequests	src/unused/HttpClientModule.h	/^	helper::CEventBuffer<HttpRequestPtr> m_HttpRequests;$/;"	m	class:HttpClientModule
m_IPv4	src/SiaManager.h	/^    std::string       m_IPv4;$/;"	m	class:TSiaManager
m_IPv4PORT	src/SiaManager.h	/^    uint32_t          m_IPv4PORT;$/;"	m	class:TSiaManager
m_Id	src/TcpServerModule.h	/^	int64_t			  m_Id;$/;"	m	class:TcpClient
m_Idlethread	src/HttpClientModule.h	/^	std::atomic<uint32_t> m_Idlethread;$/;"	m	class:HttpClientModule
m_Idlethread	src/unused/HttpClientModule.h	/^	std::atomic<uint32_t> m_Idlethread;$/;"	m	class:HttpClientModule
m_Logined	src/TcpServerModule.h	/^	std::atomic_bool    m_Logined;$/;"	m	class:TcpClient
m_MainThread	src/SiaManager.h	/^	std::thread m_MainThread;$/;"	m	class:TSiaManager
m_MaxThreadSize	src/HttpClientModule.h	/^	const uint32_t m_MaxThreadSize = 2048;$/;"	m	class:HttpClientModule
m_MaxThreadSize	src/unused/HttpClientModule.h	/^	const uint32_t m_MaxThreadSize = 2048;$/;"	m	class:HttpClientModule
m_OrigCalled	src/SiaSession.h	/^	std::string       m_OrigCalled;$/;"	m	class:TSessionLua
m_OrigCaller	src/SiaSession.h	/^	std::string       m_OrigCaller;$/;"	m	class:TSessionLua
m_Own	src/HttpClientModule.h	/^	HttpClientModule * const m_Own = nullptr;$/;"	m	class:HttpClientThread
m_Own	src/SiaTcpServer.h	/^	TSiaManager * m_Own = nullptr;$/;"	m	class:SiaTCPServer
m_Own	src/TcpClientModule.h	/^	TSiaManager * m_Own = nullptr;$/;"	m	class:TcpClientModule
m_Own	src/unused/HttpClientModule.h	/^	HttpClientModule * const m_Own = nullptr;$/;"	m	class:HttpClientThread
m_Password	src/MySql.h	/^	std::string m_Password;$/;"	m	class:DataBase::MySql
m_Password	src/MySqlModule.h	/^	std::string m_Password;$/;"	m	class:DataBase::MySqlModule
m_Port	src/MySql.h	/^	uint32_t m_Port = 3306;$/;"	m	class:DataBase::MySql
m_Port	src/MySqlModule.h	/^	uint32_t m_Port = 3306;$/;"	m	class:DataBase::MySqlModule
m_Prometheus	src/SiaPrometheus.h	/^    std::thread m_Prometheus;$/;"	m	class:SiaPrometheus
m_Running	src/TcpClientModule.h	/^	std::atomic_bool    m_Running;$/;"	m	class:TcpClientModule
m_ScriptFile	src/SiaSession.h	/^	std::string       m_ScriptFile;$/;"	m	class:TSessionLua
m_Server	src/SiaTcpServer.h	/^	SiaTCPServer * m_Server = nullptr;$/;"	m	class:SiaTcpClient
m_Sessions	src/SiaManager.h	/^	std::map<SESSIONIDTYPE, TSessionLuaPtr> m_Sessions;$/;"	m	class:TSiaManager
m_SiaServerIp	src/SiaManager.h	/^	std::string       m_SiaServerIp;$/;"	m	class:TSiaManager
m_SqlBuffer	src/MySqlModule.h	/^	helper::CEventBuffer<chilli::model::SQLEventType_t> m_SqlBuffer;$/;"	m	class:DataBase::MySqlModule
m_TCPServerModule	src/SiaManager.h	/^	TcpServerModule * m_TCPServerModule = nullptr;$/;"	m	class:TSiaManager
m_TcpPort	src/SiaManager.h	/^	uint32_t          m_TcpPort = -1;$/;"	m	class:TSiaManager
m_TimeoutTimes	src/TcpClientModule.h	/^	uint32_t            m_TimeoutTimes = 0;$/;"	m	class:TcpClientModule
m_Timer	src/SiaManager.h	/^	CSIATimer         m_Timer;$/;"	m	class:TSiaManager
m_TimerMap	src/SiaManager.h	/^	std::map<uint32_t, CTimerElementPtr> m_TimerMap;$/;"	m	class:CSIATimer
m_TimerOutId	src/SiaSession.h	/^	uint32_t          m_TimerOutId;$/;"	m	class:TSessionLua
m_UserID	src/MySql.h	/^	std::string m_UserID;$/;"	m	class:DataBase::MySql
m_UserID	src/MySqlModule.h	/^	std::string m_UserID;$/;"	m	class:DataBase::MySqlModule
m_Writeble	src/TcpClientModule.h	/^	struct event      * m_Writeble = nullptr;$/;"	m	class:TcpClientModule	typeref:struct:TcpClientModule::event
m_Writeble	src/TcpServerModule.h	/^	struct event      * m_Writeble = nullptr;$/;"	m	class:TcpServerModule	typeref:struct:TcpServerModule::event
m_bev	src/TcpClientModule.h	/^	struct bufferevent* m_bev = nullptr;$/;"	m	class:TcpClientModule	typeref:struct:TcpClientModule::bufferevent
m_bev	src/TcpServerModule.h	/^	struct bufferevent* m_bev = nullptr;$/;"	m	class:TcpClient	typeref:struct:TcpClient::bufferevent
m_callclearedRegister	src/SiaSession.h	/^	string              m_callclearedRegister;           \/\/停止服务回调函数$/;"	m	class:TSessionLua
m_cmd	src/HttpClientModule.cpp	/^	std::string		    m_cmd;$/;"	m	class:AsynHttpRequest	file:
m_cmd	src/unused/HttpClientModule.cpp	/^	std::string		    m_cmd;$/;"	m	class:AsynHttpRequest	file:
m_connect_deley_timer	src/TcpClientModule.h	/^	struct event      * m_connect_deley_timer = nullptr;$/;"	m	class:TcpClientModule	typeref:struct:TcpClientModule::event
m_connect_timeout	src/MySql.h	/^	uint32_t m_connect_timeout = 5;$/;"	m	class:DataBase::MySql
m_connect_timeout	src/MySqlModule.h	/^	uint32_t m_connect_timeout = 5;$/;"	m	class:DataBase::MySqlModule
m_connect_timer	src/TcpClientModule.h	/^	struct event      * m_connect_timer = nullptr;$/;"	m	class:TcpClientModule	typeref:struct:TcpClientModule::event
m_connect_timer	src/TcpServerModule.h	/^	struct event      * m_connect_timer = nullptr;$/;"	m	class:TcpClient	typeref:struct:TcpClient::event
m_connection	src/SiaSession.h	/^	Json::Value       m_connection;$/;"	m	class:TSessionLua
m_cv	src/CEventBuffer.h	/^	std::condition_variable m_cv;$/;"	m	class:helper::CEventBuffer
m_data	src/HttpRequest.h	/^	std::string m_data;$/;"	m	class:HttpRequest
m_data	src/SiaTcpServer.h	/^	std::string m_data;$/;"	m	class:SiaTcpData
m_data	src/TcpClientModule.cpp	/^	std::string m_data;$/;"	m	class:TCPData	file:
m_data	src/unused/HttpRequest.h	/^	std::string m_data;$/;"	m	class:HttpRequest
m_dataBuffer	src/CEventBuffer.h	/^	std::list<T> m_dataBuffer;$/;"	m	class:helper::CEventBuffer
m_event_to_next_state_map	src/SiaSession.h	/^	std::map<string, string> m_event_to_next_state_map;  \/\/脚本事件跳转表,脚本的下一个状态表$/;"	m	class:TSessionLua
m_eventtimer	src/SiaManager.h	/^	struct event *	m_eventtimer = nullptr;$/;"	m	class:CTimerElement	typeref:struct:CTimerElement::event
m_fromStation	src/SiaSession.h	/^	int               m_fromStation = -1;$/;"	m	class:TSessionLua
m_hangupRegister	src/SiaSession.h	/^	string              m_hangupRegister;                \/\/挂机回调函数$/;"	m	class:TSessionLua
m_header	src/HttpRequest.h	/^	std::map<std::string, std::string>m_header;$/;"	m	class:HttpRequest
m_header	src/unused/HttpRequest.h	/^	std::map<std::string, std::string>m_header;$/;"	m	class:HttpRequest
m_heartbeatTimeout	src/TcpClientModule.h	/^	struct event      * m_heartbeatTimeout = nullptr;$/;"	m	class:TcpClientModule	typeref:struct:TcpClientModule::event
m_heartbeat_timer	src/TcpServerModule.h	/^	struct event      * m_heartbeat_timer = nullptr;$/;"	m	class:TcpClient	typeref:struct:TcpClient::event
m_httpMode	src/HttpClientModule.cpp	/^	HttpClientModule *  m_httpMode;$/;"	m	class:AsynHttpRequest	file:
m_httpMode	src/unused/HttpClientModule.cpp	/^	HttpClientModule *  m_httpMode;$/;"	m	class:AsynHttpRequest	file:
m_id	src/MySql.h	/^    std::string m_id;$/;"	m	class:DataBase::MySql
m_id	src/SiaManager.h	/^	uint32_t		m_id;$/;"	m	class:CTimerElement
m_initial	src/SiaSession.h	/^	const std::string m_initial;$/;"	m	class:TSessionLua
m_interval	src/SiaManager.h	/^	uint32_t		m_interval;$/;"	m	class:CTimerElement
m_invokeId	src/SiaManager.h	/^	uint64_t m_invokeId;$/;"	m	class:TSiaManager
m_listenthread	src/SiaHttpServer.h	/^	std::thread m_listenthread;$/;"	m	class:SiaHttpServer
m_localip	src/SiaHttpServer.h	/^	string          m_localip;$/;"	m	class:SiaHttpServer
m_login_timer	src/TcpServerModule.h	/^	struct event      * m_login_timer = nullptr;$/;"	m	class:TcpClient	typeref:struct:TcpClient::event
m_mainqueue	src/SiaManager.h	/^	MANAGERQUEUE      m_mainqueue;$/;"	m	class:TSiaManager
m_max_session_num	src/SiaManager.h	/^	uint32_t		  m_max_session_num;$/;"	m	class:TSiaManager
m_method	src/HttpRequest.h	/^	http_method m_method;$/;"	m	class:HttpRequest
m_method	src/unused/HttpRequest.h	/^	http_method m_method;$/;"	m	class:HttpRequest
m_module	src/SiaTcpServer.h	/^	TSiaManager * m_module = nullptr;$/;"	m	class:SiaTcpClient
m_mtx	src/CEventBuffer.h	/^	std::mutex m_mtx;$/;"	m	class:helper::CEventBuffer
m_mtx	src/SiaManager.h	/^	std::mutex m_mtx;$/;"	m	class:CSIATimer
m_owner	src/SiaSession.h	/^	TSiaManager      *m_owner;$/;"	m	class:TSessionLua
m_pBase	src/SiaHttpServer.h	/^	struct event_base * m_pBase ;$/;"	m	class:SiaHttpServer	typeref:struct:SiaHttpServer::event_base
m_pBase	src/TcpClientModule.h	/^	struct event_base * m_pBase = nullptr;$/;"	m	class:TcpClientModule	typeref:struct:TcpClientModule::event_base
m_pBase	src/TcpServerModule.h	/^	struct event_base * m_pBase = nullptr;$/;"	m	class:TcpClient	typeref:struct:TcpClient::event_base
m_pCurEntry	src/cfgFile.h	/^	struct  CFGIENTRY *m_pCurEntry;$/;"	m	class:CTCfgFile	typeref:struct:CTCfgFile::CFGIENTRY
m_pCurEntry	src/unused/cfgFile.h	/^	struct  CFGIENTRY *m_pCurEntry;$/;"	m	class:CTCfgFile	typeref:struct:CTCfgFile::CFGIENTRY
m_pEntry	src/cfgFile.h	/^	struct  CFGIENTRY *m_pEntry;$/;"	m	class:CTCfgFile	typeref:struct:CTCfgFile::CFGIENTRY
m_pEntry	src/unused/cfgFile.h	/^	struct  CFGIENTRY *m_pEntry;$/;"	m	class:CTCfgFile	typeref:struct:CTCfgFile::CFGIENTRY
m_pHttp_server	src/SiaHttpServer.h	/^	struct evhttp * m_pHttp_server ;$/;"	m	class:SiaHttpServer	typeref:struct:SiaHttpServer::evhttp
m_pIniFile	src/cfgFile.h	/^	FILE    *m_pIniFile;$/;"	m	class:CTCfgFile
m_pIniFile	src/unused/cfgFile.h	/^	FILE    *m_pIniFile;$/;"	m	class:CTCfgFile
m_pOwn	src/HttpClientModule.cpp	/^	TSiaManager		  * m_pOwn;$/;"	m	class:AsynHttpRequest	file:
m_pOwn	src/HttpClientModule.h	/^	TSiaManager		  * m_pOwn;$/;"	m	class:HttpClientModule
m_pOwn	src/SiaHttpServer.h	/^	TSiaManager *   m_pOwn;$/;"	m	class:SiaHttpServer
m_pOwn	src/unused/HttpClientModule.cpp	/^	TSiaManager		  * m_pOwn;$/;"	m	class:AsynHttpRequest	file:
m_pOwn	src/unused/HttpClientModule.h	/^	TSiaManager		  * m_pOwn;$/;"	m	class:HttpClientModule
m_ping_timer	src/TcpClientModule.h	/^	struct event      * m_ping_timer = nullptr;$/;"	m	class:TcpClientModule	typeref:struct:TcpClientModule::event
m_port	src/SiaHttpServer.h	/^	uint32_t        m_port;$/;"	m	class:SiaHttpServer
m_profile	src/SiaManager.h	/^	char              m_profile[MAX_PATH];   \/\/配置文件$/;"	m	class:TSiaManager
m_requestTimes	src/HttpRequest.h	/^	uint32_t m_requestTimes;$/;"	m	class:HttpRequest
m_requestTimes	src/unused/HttpRequest.h	/^	uint32_t m_requestTimes;$/;"	m	class:HttpRequest
m_responseBody	src/HttpRequest.h	/^	std::string m_responseBody;$/;"	m	class:HttpRequest
m_responseBody	src/unused/HttpRequest.h	/^	std::string m_responseBody;$/;"	m	class:HttpRequest
m_result	src/cfgFile.h	/^	char    m_result [255];$/;"	m	class:CTCfgFile
m_result	src/unused/cfgFile.h	/^	char    m_result [255];$/;"	m	class:CTCfgFile
m_serveruri	src/SiaManager.h	/^	std::string       m_serveruri;$/;"	m	class:TSiaManager
m_sessionId	src/HttpRequest.h	/^	std::string m_sessionId;$/;"	m	class:HttpRequest
m_sessionId	src/SiaSession.h	/^	const uint32_t    m_sessionId;$/;"	m	class:TSessionLua
m_sessionId	src/SiaTcpServer.h	/^	std::string m_sessionId;$/;"	m	class:SiaTcpData
m_sessionId	src/TcpClientModule.cpp	/^	std::string m_sessionId;$/;"	m	class:TCPData	file:
m_sessionId	src/unused/HttpRequest.h	/^	std::string m_sessionId;$/;"	m	class:HttpRequest
m_sessionMtx	src/SiaManager.h	/^	std::recursive_mutex	m_sessionMtx;$/;"	m	class:TSiaManager
m_station	src/SiaTcpServer.h	/^	int32_t m_station = -1;$/;"	m	class:SiaTcpClient
m_stationno	src/SiaManager.h	/^	uint32_t          m_stationno;$/;"	m	class:TSiaManager
m_status	src/HttpRequest.h	/^	int m_status;$/;"	m	class:HttpRequest
m_status	src/unused/HttpRequest.h	/^	int m_status;$/;"	m	class:HttpRequest
m_tcpAddr	src/TcpClientModule.h	/^	Json::Value m_tcpAddr;$/;"	m	class:TcpClientModule
m_tcpIP	src/TcpServerModule.h	/^	std::string m_tcpIP;$/;"	m	class:TcpServerModule
m_tcpIndex	src/TcpClientModule.h	/^	uint32_t	m_tcpIndex = 0;$/;"	m	class:TcpClientModule
m_tcpIp	src/TcpClientModule.h	/^	std::string m_tcpIp;$/;"	m	class:TcpClientModule
m_tcpPort	src/TcpClientModule.h	/^	int			m_tcpPort = 0;$/;"	m	class:TcpClientModule
m_tcpPort	src/TcpServerModule.h	/^	int m_tcpPort = -1;$/;"	m	class:TcpServerModule
m_theSender	src/SiaManager.h	/^	TSiaManager *       m_theSender;$/;"	m	class:CSIATimer
m_thread	src/HttpClientModule.h	/^	std::thread			m_thread;$/;"	m	class:HttpClientThread
m_thread	src/SiaManager.h	/^	std::thread			m_thread;$/;"	m	class:CSIATimer
m_thread	src/SiaSession.h	/^	std::thread	     m_thread;$/;"	m	class:TSessionLua
m_thread	src/TcpClientModule.h	/^	std::thread m_thread;$/;"	m	class:TcpClientModule
m_thread	src/TcpServerModule.h	/^	std::thread m_thread;$/;"	m	class:TcpServerModule
m_thread	src/unused/HttpClientModule.h	/^	std::thread			m_thread;$/;"	m	class:HttpClientThread
m_threads	src/HttpClientModule.h	/^	std::vector<std::shared_ptr<HttpClientThread>> m_threads;$/;"	m	class:HttpClientModule
m_threads	src/unused/HttpClientModule.h	/^	std::vector<std::shared_ptr<HttpClientThread>> m_threads;$/;"	m	class:HttpClientModule
m_timeout	src/HttpRequest.h	/^	int m_timeout;$/;"	m	class:HttpRequest
m_timeout	src/unused/HttpRequest.h	/^	int m_timeout;$/;"	m	class:HttpRequest
m_timerId	src/SiaManager.h	/^	std::atomic<uint32_t> m_timerId;$/;"	m	class:CSIATimer
m_uri	src/HttpRequest.h	/^	std::string m_uri;$/;"	m	class:HttpRequest
m_uri	src/unused/HttpRequest.h	/^	std::string m_uri;$/;"	m	class:HttpRequest
m_value	src/SiaManager.h	/^	uint32_t		m_value; $/;"	m	class:CTimerElement
m_version	src/SiaManager.h	/^	std::string       m_version;$/;"	m	class:TSiaManager
main	acdd.cpp	/^int main(int argc, char **argv)$/;"	f
main	redis.cpp	/^int main()$/;"	f
main	src/server.cpp	/^int main(int argc,char *argv[])$/;"	f
main	src/testjson.cpp	/^main(int argc, char ** argv)$/;"	f
main	src/testxml.cpp	/^main(int argc, char ** argv)$/;"	f
make_session	src/HttpRequest.h	/^	static const std::string make_session()$/;"	f	class:HttpRequest
make_session	src/unused/HttpRequest.h	/^	static const std::string make_session()$/;"	f	class:HttpRequest
map_	include/json/value.h	/^    ObjectValues* map_;$/;"	m	union:Json::Value::ValueHolder
maxInt	include/json/value.h	/^  static const Int maxInt;$/;"	m	class:Json::Value
maxInt64	include/json/value.h	/^  static const Int64 maxInt64;$/;"	m	class:Json::Value
maxLargestInt	include/json/value.h	/^  static const LargestInt maxLargestInt;$/;"	m	class:Json::Value
maxLargestUInt	include/json/value.h	/^  static const LargestUInt maxLargestUInt;$/;"	m	class:Json::Value
maxUInt	include/json/value.h	/^  static const UInt maxUInt;$/;"	m	class:Json::Value
maxUInt64	include/json/value.h	/^  static const UInt64 maxUInt64;$/;"	m	class:Json::Value
max_size	include/json/allocator.h	/^  size_type max_size() const { return size_t(-1) \/ sizeof(T); }$/;"	f	class:Json::SecureAllocator
maxbuf	include/hiredis/read.h	/^    size_t maxbuf; \/* Max length of unused buffer *\/$/;"	m	struct:redisReader
maxsessions	src/ACDCallNum.h	/^    int         maxsessions;          \/\/ 最大并发数量$/;"	m	struct:SipGateway
md5	src/unused/MD5.cpp	/^	std::string MD5::md5() const$/;"	f	class:helper::MD5
mem	src/tinyxml2.h	/^        char    mem[SIZE];$/;"	m	union:tinyxml2::MemPoolT::Chunk
memo	src/ACDCallNum.h	/^	std::string memo;                 \/\/ 描述$/;"	m	struct:SipGWGroup
memo	src/ACDCallNum.h	/^    std::string memo;                 \/\/ 描述$/;"	m	struct:SipGateway
message	include/json/reader.h	/^    String message;$/;"	m	struct:Json::Reader::StructuredError
message_	include/json/reader.h	/^    String message_;$/;"	m	class:Json::Reader::ErrorInfo
minInt	include/json/value.h	/^  static const Int minInt;$/;"	m	class:Json::Value
minInt64	include/json/value.h	/^  static const Int64 minInt64;$/;"	m	class:Json::Value
minLargestInt	include/json/value.h	/^  static const LargestInt minLargestInt;$/;"	m	class:Json::Value
mkpath	src/mkpath.h	/^static int mkpath(const std::string &s, int mode = 0755)$/;"	f
modify_event	src/server.cpp	/^static void modify_event(int epollfd,int fd,int state)$/;"	f	file:
msg_	include/json/value.h	/^  String msg_;$/;"	m	class:Json::Exception
mtx	src/ACDCallNum.h	/^	std::mutex mtx;$/;"	m	class:MyMutex
mysql	src/ACDCallNum.h	/^	DataBase::MySql mysql;$/;"	m	class:ReadConfig2Redis
mysql	src/SiaSession.h	/^    DataBase::MySql mysql;$/;"	m	class:TSessionLua
name	src/ACDCallNum.h	/^	std::string name;                 \/\/ 网关名称$/;"	m	struct:SipGWGroup
name	src/ACDCallNum.h	/^    std::string name;                 \/\/ 网关名称$/;"	m	struct:SipGateway
next	include/hiredis/async.h	/^    struct redisCallback *next; \/* simple singly linked list *\/$/;"	m	struct:redisCallback	typeref:struct:redisCallback::redisCallback
next	include/hiredis/dict.h	/^    struct dictEntry *next;$/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry
next	src/tinyxml2.h	/^        Chunk*  next;$/;"	m	union:tinyxml2::MemPoolT::Chunk
nextEntry	include/hiredis/dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
nfds_t	include/hiredis/sockcompat.h	/^typedef ULONG nfds_t;$/;"	t
nlen	src/TcpClientModule.cpp	/^	unsigned int  nlen;$/;"	m	union:contextlen	file:
nlen	src/TcpServerModule.cpp	/^	unsigned int  nlen;$/;"	m	union:contextlen	file:
noDuplication	include/json/value.h	/^    enum DuplicationPolicy { noDuplication = 0, duplicate, duplicateOnCopy };$/;"	e	enum:Json::Value::CZString::DuplicationPolicy
nodes_	include/json/reader.h	/^  Nodes nodes_;$/;"	m	class:Json::Reader
null	include/json/value.h	/^  static const Value& null; \/\/\/< We regret this reference to a global instance;$/;"	m	class:Json::Value
nullRef	include/json/value.h	/^  static const Value& nullRef; \/\/\/< just a kludge for binary-compatibility; same$/;"	m	class:Json::Value
nullValue	include/json/value.h	/^  nullValue = 0, \/\/\/< 'null' value$/;"	e	enum:Json::ValueType
numberOfCommentPlacement	include/json/value.h	/^  numberOfCommentPlacement$/;"	e	enum:Json::CommentPlacement
obj	include/hiredis/read.h	/^    void *obj; \/* holds user-generated value for a read task *\/$/;"	m	struct:redisReadTask
objectValue	include/json/value.h	/^  objectValue    \/\/\/< object value (collection of name\/value pairs).$/;"	e	enum:Json::ValueType
obuf	include/hiredis/hiredis.h	/^    char *obuf; \/* Write buffer *\/$/;"	m	struct:redisContext
offset_limit	include/json/reader.h	/^    ptrdiff_t offset_limit;$/;"	m	struct:Json::Reader::StructuredError
offset_start	include/json/reader.h	/^    ptrdiff_t offset_start;$/;"	m	struct:Json::Reader::StructuredError
onClosed	src/SiaTcpServer.cpp	/^void SiaTcpClient::onClosed()$/;"	f	class:SiaTcpClient
onClosed	src/TcpClientModule.cpp	/^void TcpClientModule::onClosed()$/;"	f	class:TcpClientModule
onClosed	src/TcpServerModule.cpp	/^void TcpClient::onClosed()$/;"	f	class:TcpClient
onConnect	include/hiredis/async.h	/^    redisConnectCallback *onConnect;$/;"	m	struct:redisAsyncContext
onConnectDelay	src/TcpClientModule.cpp	/^void TcpClientModule::onConnectDelay()$/;"	f	class:TcpClientModule
onConnectTimeOut	src/TcpClientModule.cpp	/^void TcpClientModule::onConnectTimeOut()$/;"	f	class:TcpClientModule
onConnected	src/TcpClientModule.cpp	/^void TcpClientModule::onConnected()$/;"	f	class:TcpClientModule
onConnected	src/TcpServerModule.cpp	/^void TcpClient::onConnected()$/;"	f	class:TcpClient
onDisconnect	include/hiredis/async.h	/^    redisDisconnectCallback *onDisconnect;$/;"	m	struct:redisAsyncContext
onError	src/SiaTcpServer.cpp	/^void SiaTcpClient::onError(long err)$/;"	f	class:SiaTcpClient
onError	src/TcpClientModule.cpp	/^void TcpClientModule::onError(long err)$/;"	f	class:TcpClientModule
onError	src/TcpServerModule.cpp	/^void TcpClient::onError(long err)$/;"	f	class:TcpClient
onHeartbeatTimeout	src/TcpServerModule.cpp	/^void TcpClient::onHeartbeatTimeout()$/;"	f	class:TcpClient
onLogin	src/SiaTcpServer.cpp	/^bool SiaTcpClient::onLogin(const std::string & data)$/;"	f	class:SiaTcpClient
onLogin	src/TcpServerModule.cpp	/^bool TcpClient::onLogin(const std::string & data)$/;"	f	class:TcpClient
onLoginSuccess	src/TcpServerModule.cpp	/^void TcpClient::onLoginSuccess()$/;"	f	class:TcpClient
onLoginTimeout	src/TcpServerModule.cpp	/^void TcpClient::onLoginTimeout()$/;"	f	class:TcpClient
onReceived	src/SSModule.cpp	/^void SSMoudle::onReceived(const std::string & data)$/;"	f	class:SSMoudle
onReceived	src/SSModuleS.cpp	/^void SSMoudle::onReceived(const std::string & data)$/;"	f	class:SSMoudle
onReceived	src/SiaTcpMonitor.cpp	/^void SiaTcpMonitor::onReceived(const std::string & data)$/;"	f	class:SiaTcpMonitor
onReceived	src/SiaTcpServer.cpp	/^void SiaTcpClient::onReceived(const std::string & data)$/;"	f	class:SiaTcpClient
onReceived	src/StatModule.cpp	/^void StatMoudle::onReceived(const std::string & data)$/;"	f	class:StatMoudle
onReceived	src/TcpServerModule.cpp	/^void TcpClient::onReceived(const std::string & data)$/;"	f	class:TcpClient
onResponse	src/HttpClientModule.cpp	/^	virtual void onResponse()$/;"	f	class:AsynHttpRequest
onResponse	src/HttpRequest.h	/^	virtual void onResponse(){}$/;"	f	class:HttpRequest
onResponse	src/unused/HttpClientModule.cpp	/^	virtual void onResponse()$/;"	f	class:AsynHttpRequest
onResponse	src/unused/HttpRequest.h	/^	virtual void onResponse(){}$/;"	f	class:HttpRequest
onSend	src/TcpServerModule.cpp	/^void TcpClient::onSend()$/;"	f	class:TcpClient
onWriteble	src/TcpClientModule.cpp	/^void TcpClientModule::onWriteble()$/;"	f	class:TcpClientModule
onWriteble	src/TcpServerModule.cpp	/^static void onWriteble(evutil_socket_t fd, short event, void *arg)$/;"	f	file:
onwriteble	src/TcpClientModule.cpp	/^void TcpClientModule::onwriteble(evutil_socket_t fd, short event, void *arg)$/;"	f	class:TcpClientModule
operator !=	include/json/allocator.h	/^bool operator!=(const SecureAllocator<T>&, const SecureAllocator<U>&) {$/;"	f	namespace:Json
operator !=	include/json/value.h	/^  bool operator!=(const SelfType& other) const { return !isEqual(other); }$/;"	f	class:Json::ValueIteratorBase
operator ()	src/strategy.cpp	/^	bool operator()(const Json::Value & i, const Json::Value & j) {$/;"	f	struct:asc_tag
operator ()	src/strategy.cpp	/^	bool operator()(const Json::Value & i, const Json::Value & j) {$/;"	f	struct:desc_tag
operator *	include/json/value.h	/^  reference operator*() const { return deref(); }$/;"	f	class:Json::ValueConstIterator
operator *	include/json/value.h	/^  reference operator*() const { return deref(); }$/;"	f	class:Json::ValueIterator
operator ++	include/json/value.h	/^  SelfType operator++(int) {$/;"	f	class:Json::ValueConstIterator
operator ++	include/json/value.h	/^  SelfType operator++(int) {$/;"	f	class:Json::ValueIterator
operator ++	include/json/value.h	/^  SelfType& operator++() {$/;"	f	class:Json::ValueConstIterator
operator ++	include/json/value.h	/^  SelfType& operator++() {$/;"	f	class:Json::ValueIterator
operator -	include/json/value.h	/^  difference_type operator-(const SelfType& other) const {$/;"	f	class:Json::ValueIteratorBase
operator --	include/json/value.h	/^  SelfType operator--(int) {$/;"	f	class:Json::ValueConstIterator
operator --	include/json/value.h	/^  SelfType operator--(int) {$/;"	f	class:Json::ValueIterator
operator --	include/json/value.h	/^  SelfType& operator--() {$/;"	f	class:Json::ValueConstIterator
operator --	include/json/value.h	/^  SelfType& operator--() {$/;"	f	class:Json::ValueIterator
operator ->	include/json/value.h	/^  pointer operator->() const { return &deref(); }$/;"	f	class:Json::ValueConstIterator
operator ->	include/json/value.h	/^  pointer operator->() const { return &deref(); }$/;"	f	class:Json::ValueIterator
operator <<	src/unused/MD5.cpp	/^	std::ostream& operator<<(std::ostream& out, MD5 & md5)$/;"	f	namespace:helper
operator =	src/CMessage.h	/^	CMessage& operator = (CMessage&& other) {$/;"	f	class:CMessage
operator =	src/tinyxml2.h	/^    XMLConstHandle& operator=( const XMLConstHandle& ref )							{$/;"	f	class:tinyxml2::XMLConstHandle
operator =	src/tinyxml2.h	/^    XMLHandle& operator=( const XMLHandle& ref )							{$/;"	f	class:tinyxml2::XMLHandle
operator ==	include/json/allocator.h	/^bool operator==(const SecureAllocator<T>&, const SecureAllocator<U>&) {$/;"	f	namespace:Json
operator ==	include/json/value.h	/^  bool operator==(const SelfType& other) const { return isEqual(other); }$/;"	f	class:Json::ValueIteratorBase
operator []	src/tinyxml2.h	/^    T& operator[](int i)				{$/;"	f	class:tinyxml2::DynArray
operator []	src/tinyxml2.h	/^    const T& operator[](int i) const	{$/;"	f	class:tinyxml2::DynArray
operator const char*	include/json/value.h	/^  operator const char*() const { return c_str_; }$/;"	f	class:Json::StaticString
options	include/hiredis/hiredis.h	/^    int options;$/;"	m	struct:__anon16
override	include/json/reader.h	/^  CharReader* newCharReader() const override;$/;"	m	class:Json::CharReaderBuilder
override	include/json/reader.h	/^  ~CharReaderBuilder() override;$/;"	m	class:Json::CharReaderBuilder
override	include/json/value.h	/^  char const* what() const JSONCPP_NOEXCEPT override;$/;"	m	class:Json::Exception
override	include/json/value.h	/^  ~Exception() JSONCPP_NOEXCEPT override;$/;"	m	class:Json::Exception
override	include/json/writer.h	/^  StreamWriter* newStreamWriter() const override;$/;"	m	class:Json::StreamWriterBuilder
override	include/json/writer.h	/^  ~StreamWriterBuilder() override;$/;"	m	class:Json::StreamWriterBuilder
override	src/MySqlModule.h	/^	virtual bool LoadConfig(const std::string & configContext) override;$/;"	m	class:DataBase::MySqlModule
override	src/MySqlModule.h	/^	virtual int Start() override;$/;"	m	class:DataBase::MySqlModule
override	src/MySqlModule.h	/^	virtual int Stop() override;$/;"	m	class:DataBase::MySqlModule
override	src/MySqlModule.h	/^	virtual void execute(helper::CEventBuffer<model::EventType_t> * eventQueue) override;$/;"	m	class:DataBase::MySqlModule
override	src/MySqlModule.h	/^	virtual void run() override;$/;"	m	class:DataBase::MySqlModule
override	src/SSModule.h	/^	virtual void Login() override;$/;"	m	class:SSMoudle
override	src/SSModule.h	/^	virtual void Ping() override;$/;"	m	class:SSMoudle
override	src/SSModule.h	/^	virtual void Start(Json::Value address) override;$/;"	m	class:SSMoudle
override	src/SSModule.h	/^	virtual void Stop() override;$/;"	m	class:SSMoudle
override	src/SSModule.h	/^	virtual void onReceived(const std::string & data) override;$/;"	m	class:SSMoudle
override	src/SSModuleS.h	/^	virtual void Login() override;$/;"	m	class:SSMoudle
override	src/SSModuleS.h	/^	virtual void Ping() override;$/;"	m	class:SSMoudle
override	src/SSModuleS.h	/^	virtual void Start(Json::Value address) override;$/;"	m	class:SSMoudle
override	src/SSModuleS.h	/^	virtual void Stop() override;$/;"	m	class:SSMoudle
override	src/SSModuleS.h	/^	virtual void onReceived(const std::string & data) override;$/;"	m	class:SSMoudle
override	src/SiaTcpMonitor.h	/^	virtual void Login() override;$/;"	m	class:SiaTcpMonitor
override	src/SiaTcpMonitor.h	/^	virtual void Ping() override;$/;"	m	class:SiaTcpMonitor
override	src/SiaTcpMonitor.h	/^	virtual void onReceived(const std::string & data) override;$/;"	m	class:SiaTcpMonitor
override	src/SiaTcpServer.h	/^	virtual TcpClient * OnAccept(struct event_base * base, evutil_socket_t fd) override;$/;"	m	class:SiaTCPServer
override	src/SiaTcpServer.h	/^	virtual bool onLogin(const std::string & data) override;$/;"	m	class:SiaTcpClient
override	src/SiaTcpServer.h	/^	virtual void OnWriteble() override;$/;"	m	class:SiaTCPServer
override	src/SiaTcpServer.h	/^	virtual void PutMessage(int station, const std::string & sessionid, const std::string & data) override;$/;"	m	class:SiaTCPServer
override	src/SiaTcpServer.h	/^	virtual void onClosed() override;$/;"	m	class:SiaTcpClient
override	src/SiaTcpServer.h	/^	virtual void onError(long err) override;$/;"	m	class:SiaTcpClient
override	src/SiaTcpServer.h	/^	virtual void onReceived(const std::string & data)override;$/;"	m	class:SiaTcpClient
override	src/StatModule.h	/^	virtual void Login() override;$/;"	m	class:StatMoudle
override	src/StatModule.h	/^	virtual void Ping() override;$/;"	m	class:StatMoudle
override	src/StatModule.h	/^	virtual void Start(Json::Value address) override;$/;"	m	class:StatMoudle
override	src/StatModule.h	/^	virtual void Stop() override;$/;"	m	class:StatMoudle
override	src/StatModule.h	/^	virtual void onReceived(const std::string & data) override;$/;"	m	class:StatMoudle
override	src/strategy.h	/^	void get_route_info(std::string & data, const Json::Value & src, Json::Value & dst) override;$/;"	m	class:IdleStrategy
pKey	src/cfgFile.h	/^   struct CFGIENTRY *pKey;$/;"	m	struct:__anon11	typeref:struct:__anon11::CFGIENTRY
pKey	src/unused/cfgFile.h	/^   struct CFGIENTRY *pKey;$/;"	m	struct:__anon10	typeref:struct:__anon10::CFGIENTRY
pNext	src/cfgFile.h	/^   struct CFGIENTRY *pNext;$/;"	m	struct:CFGIENTRY	typeref:struct:CFGIENTRY::CFGIENTRY
pNext	src/unused/cfgFile.h	/^   struct CFGIENTRY *pNext;$/;"	m	struct:CFGIENTRY	typeref:struct:CFGIENTRY::CFGIENTRY
pPrev	src/cfgFile.h	/^   struct CFGIENTRY *pPrev;$/;"	m	struct:CFGIENTRY	typeref:struct:CFGIENTRY::CFGIENTRY
pPrev	src/unused/cfgFile.h	/^   struct CFGIENTRY *pPrev;$/;"	m	struct:CFGIENTRY	typeref:struct:CFGIENTRY::CFGIENTRY
pSec	src/cfgFile.h	/^   struct CFGIENTRY *pSec;$/;"	m	struct:__anon11	typeref:struct:__anon11::CFGIENTRY
pSec	src/unused/cfgFile.h	/^   struct CFGIENTRY *pSec;$/;"	m	struct:__anon10	typeref:struct:__anon10::CFGIENTRY
pText	src/cfgFile.h	/^   char  *pText;$/;"	m	struct:CFGIENTRY
pText	src/unused/cfgFile.h	/^   char  *pText;$/;"	m	struct:CFGIENTRY
parent	include/hiredis/read.h	/^    struct redisReadTask *parent; \/* parent task *\/$/;"	m	struct:redisReadTask	typeref:struct:redisReadTask::redisReadTask
password	src/ACDCallNum.h	/^    std::string password;             \/\/ 注册密码$/;"	m	struct:SipGateway
path	include/hiredis/hiredis.h	/^        char *path;$/;"	m	struct:redisContext::__anon20
pattern	src/tinyxml2.cpp	/^    const char* pattern;$/;"	m	struct:tinyxml2::Entity	file:
patterns	include/hiredis/async.h	/^        struct dict *patterns;$/;"	m	struct:redisAsyncContext::__anon15	typeref:struct:redisAsyncContext::__anon15::dict
pendingWrite	include/hiredis/sslio.h	/^    int pendingWrite;$/;"	m	struct:redisSsl
pending_subs	include/hiredis/async.h	/^    int pending_subs;$/;"	m	struct:redisCallback
ping_timer	src/TcpClientModule.cpp	/^void TcpClientModule::ping_timer(evutil_socket_t fd, short event, void *arg)$/;"	f	class:TcpClientModule
pointer	include/json/value.h	/^  typedef Value* pointer;$/;"	t	class:Json::ValueIterator
pointer	include/json/value.h	/^  typedef const Value* pointer;$/;"	t	class:Json::ValueConstIterator
policy_	include/json/value.h	/^      unsigned policy_ : 2;$/;"	m	struct:Json::Value::CZString::StringStorage
poll	include/hiredis/sockcompat.h	85;"	d
port	include/hiredis/hiredis.h	/^            int port;$/;"	m	struct:__anon16::__anon17::__anon18
port	include/hiredis/hiredis.h	/^        int port;$/;"	m	struct:redisContext::__anon19
port	src/ACDCallNum.h	/^    int         port;                 \/\/ 网关端口$/;"	m	struct:SipGateway
pos	include/hiredis/read.h	/^    size_t pos; \/* Buffer cursor *\/$/;"	m	struct:redisReader
print_banner	acdd.cpp	/^static void print_banner(FILE *stream, int color)$/;"	f	file:
privdata	include/hiredis/async.h	/^    void *privdata;$/;"	m	struct:redisCallback
privdata	include/hiredis/dict.h	/^    void *privdata;$/;"	m	struct:dict
privdata	include/hiredis/read.h	/^    void *privdata; \/* user-settable arbitrary field *\/$/;"	m	struct:redisReadTask
privdata	include/hiredis/read.h	/^    void *privdata;$/;"	m	struct:redisReader
processRequest	src/HttpClientModule.cpp	/^void HttpClientThread::processRequest(evutil_socket_t fd, short event, void *arg)$/;"	f	class:HttpClientThread
processRequest	src/unused/HttpClientModule.cpp	/^void HttpClientThread::processRequest(evutil_socket_t fd, short event, void *arg)$/;"	f	class:HttpClientThread
processTimer	src/SiaManager.cpp	/^void CSIATimer::processTimer(evutil_socket_t fd, short event, void *arg)$/;"	f	class:CSIATimer
process_command	acdd.cpp	/^static int process_command(const std::string & cmd)$/;"	f	file:
prompt	acdd.cpp	/^static char *prompt(EditLine *e) { return prompt_str; }$/;"	f	file:
prompt_str	acdd.cpp	/^static char prompt_str[512] = "";$/;"	v	file:
rate	src/strategy.cpp	/^	double       rate;$/;"	m	struct:KV	file:
rc	src/ACDCallNum.h	/^	redisContext *    rc;$/;"	m	class:LBRedis
read	acdd.h	12;"	d
reader	include/hiredis/hiredis.h	/^    redisReader *reader; \/* Protocol reader *\/$/;"	m	struct:redisContext
reader	src/ACDReadConfig.h	/^    Json::Reader reader;$/;"	m	class:ReadJSONConfig
reader	src/testjson.cpp	/^    Json::Reader reader;$/;"	m	class:ReadJSONConfig	file:
realValue	include/json/value.h	/^  realValue,     \/\/\/< double value$/;"	e	enum:Json::ValueType
real_	include/json/value.h	/^    double real_;$/;"	m	union:Json::Value::ValueHolder
rebind	include/json/allocator.h	/^  template <typename U> struct rebind { using other = SecureAllocator<U>; };$/;"	s	class:Json::SecureAllocator
receiver	src/CMessage.h	/^	uint32_t receiver = 0;$/;"	m	class:CMessage
recv	include/hiredis/sockcompat.h	83;"	d
redisAsyncContext	include/hiredis/async.h	/^typedef struct redisAsyncContext {$/;"	s
redisAsyncContext	include/hiredis/async.h	/^} redisAsyncContext;$/;"	t	typeref:struct:redisAsyncContext
redisCallback	include/hiredis/async.h	/^typedef struct redisCallback {$/;"	s
redisCallback	include/hiredis/async.h	/^} redisCallback;$/;"	t	typeref:struct:redisCallback
redisCallbackFn	include/hiredis/async.h	/^typedef void (redisCallbackFn)(struct redisAsyncContext*, void*, void*);$/;"	t
redisCallbackList	include/hiredis/async.h	/^typedef struct redisCallbackList {$/;"	s
redisCallbackList	include/hiredis/async.h	/^} redisCallbackList;$/;"	t	typeref:struct:redisCallbackList
redisConnectCallback	include/hiredis/async.h	/^typedef void (redisConnectCallback)(const struct redisAsyncContext*, int status);$/;"	t
redisConnectionType	include/hiredis/hiredis.h	/^enum redisConnectionType {$/;"	g
redisContext	include/hiredis/hiredis.h	/^typedef struct redisContext {$/;"	s
redisContext	include/hiredis/hiredis.h	/^} redisContext;$/;"	t	typeref:struct:redisContext
redisDisconnectCallback	include/hiredis/async.h	/^typedef void (redisDisconnectCallback)(const struct redisAsyncContext*, int status);$/;"	t
redisFD	include/hiredis/hiredis.h	/^typedef int redisFD;$/;"	t
redisFD	include/hiredis/hiredis.h	/^typedef unsigned long long redisFD; \/* SOCKET = 64-bit UINT_PTR *\/$/;"	t
redisFD	include/hiredis/hiredis.h	/^typedef unsigned long redisFD;      \/* SOCKET = 32-bit UINT_PTR *\/$/;"	t
redisFreeSsl	include/hiredis/sslio.h	/^static inline void redisFreeSsl(redisSsl *ssl) {$/;"	f
redisOptions	include/hiredis/hiredis.h	/^} redisOptions;$/;"	t	typeref:struct:__anon16
redisReadTask	include/hiredis/read.h	/^typedef struct redisReadTask {$/;"	s
redisReadTask	include/hiredis/read.h	/^} redisReadTask;$/;"	t	typeref:struct:redisReadTask
redisReader	include/hiredis/read.h	/^typedef struct redisReader {$/;"	s
redisReader	include/hiredis/read.h	/^} redisReader;$/;"	t	typeref:struct:redisReader
redisReaderGetError	include/hiredis/read.h	106;"	d
redisReaderGetObject	include/hiredis/read.h	105;"	d
redisReaderSetPrivdata	include/hiredis/read.h	104;"	d
redisReply	include/hiredis/hiredis.h	/^typedef struct redisReply {$/;"	s
redisReply	include/hiredis/hiredis.h	/^} redisReply;$/;"	t	typeref:struct:redisReply
redisReplyObjectFunctions	include/hiredis/read.h	/^typedef struct redisReplyObjectFunctions {$/;"	s
redisReplyObjectFunctions	include/hiredis/read.h	/^} redisReplyObjectFunctions;$/;"	t	typeref:struct:redisReplyObjectFunctions
redisSsl	include/hiredis/sslio.h	/^typedef struct redisSsl {$/;"	s
redisSsl	include/hiredis/sslio.h	/^} redisSsl;$/;"	t	typeref:struct:redisSsl
redisSslCreate	include/hiredis/sslio.h	/^static inline int redisSslCreate(struct redisContext *c, const char *ca,$/;"	f
redisSslRead	include/hiredis/sslio.h	/^static inline int redisSslRead(struct redisContext *c, char *s, size_t n) {$/;"	f
redisSslWrite	include/hiredis/sslio.h	/^static inline int redisSslWrite(struct redisContext *c) {$/;"	f
redisTimerCallback	include/hiredis/async.h	/^typedef void(redisTimerCallback)(void *timer, void *privdata);$/;"	t
reference	include/json/value.h	/^  typedef Value& reference;$/;"	t	class:Json::ValueIterator
reference	include/json/value.h	/^  typedef const Value& reference;$/;"	t	class:Json::ValueConstIterator
replaceString	src/stringHelper.h	/^		static inline std::string & replaceString(std::string& str,const std::string& old_value,const std::string& new_value){$/;"	f	namespace:helper::string
replies	include/hiredis/async.h	/^    redisCallbackList replies;$/;"	m	struct:redisAsyncContext
reply	include/hiredis/read.h	/^    void *reply; \/* Temporary reply pointer *\/$/;"	m	struct:redisReader
reset	src/SiaSession.cpp	/^void TSessionLua::reset()$/;"	f	class:TSessionLua
ridx	include/hiredis/read.h	/^    int ridx; \/* Index of current read task *\/$/;"	m	struct:redisReader
rotate_left	src/unused/MD5.cpp	/^	inline MD5::uint4 MD5::rotate_left(uint4 x, int n) {$/;"	f	class:helper::MD5
rstack	include/hiredis/read.h	/^    redisReadTask rstack[9];$/;"	m	struct:redisReader
rtrim	src/stringHelper.h	/^		static inline std::string &rtrim(std::string &s)$/;"	f	namespace:helper::string
ruleid	src/ACDCallNum.h	/^    int ruleid;                       \/\/ 号码轮询规则id$/;"	m	struct:CallNumPool
run	src/MySqlModule.cpp	/^	void MySqlModule::run()$/;"	f	class:chilli::DataBase::MySqlModule
run	src/SiaManager.cpp	/^void CSIATimer::run()$/;"	f	class:CSIATimer
run	src/SiaManager.cpp	/^void TSiaManager::run()$/;"	f	class:TSiaManager
run	src/SiaPrometheus.cpp	/^void SiaPrometheus::run(void)$/;"	f	class:SiaPrometheus
run	src/SiaSession.cpp	/^void TSessionLua::run()$/;"	f	class:TSessionLua
run	src/TcpClientModule.cpp	/^void TcpClientModule::run()$/;"	f	class:TcpClientModule
s_free	include/hiredis/sdsalloc.h	42;"	d
s_malloc	include/hiredis/sdsalloc.h	40;"	d
s_realloc	include/hiredis/sdsalloc.h	41;"	d
saddr	include/hiredis/async.h	/^    struct sockaddr *saddr;$/;"	m	struct:redisAsyncContext	typeref:struct:redisAsyncContext::sockaddr
saddr	include/hiredis/hiredis.h	/^    struct sockadr *saddr;$/;"	m	struct:redisContext	typeref:struct:redisContext::sockadr
save_data_2_redis	src/ACDCallNum.cpp	/^void ReadConfig2Redis::save_data_2_redis()$/;"	f	class:ReadConfig2Redis
scheduleTimer	include/hiredis/async.h	/^        void (*scheduleTimer)(void *privdata, struct timeval tv);$/;"	m	struct:redisAsyncContext::__anon14
screen_size	acdd.cpp	/^static void screen_size(int *x, int *y)$/;"	f	file:
sds	include/hiredis/sds.h	/^typedef char *sds;$/;"	t
sdsalloc	include/hiredis/sds.h	/^static inline size_t sdsalloc(const sds s) {$/;"	f
sdsavail	include/hiredis/sds.h	/^static inline size_t sdsavail(const sds s) {$/;"	f
sdshdr16	include/hiredis/sds.h	/^struct __attribute__ ((__packed__)) sdshdr16 {$/;"	s
sdshdr32	include/hiredis/sds.h	/^struct __attribute__ ((__packed__)) sdshdr32 {$/;"	s
sdshdr5	include/hiredis/sds.h	/^struct __attribute__ ((__packed__)) sdshdr5 {$/;"	s
sdshdr64	include/hiredis/sds.h	/^struct __attribute__ ((__packed__)) sdshdr64 {$/;"	s
sdshdr8	include/hiredis/sds.h	/^struct __attribute__ ((__packed__)) sdshdr8 {$/;"	s
sdsinclen	include/hiredis/sds.h	/^static inline void sdsinclen(sds s, size_t inc) {$/;"	f
sdslen	include/hiredis/sds.h	/^static inline size_t sdslen(const sds s) {$/;"	f
sdssetalloc	include/hiredis/sds.h	/^static inline void sdssetalloc(sds s, size_t newlen) {$/;"	f
sdssetlen	include/hiredis/sds.h	/^static inline void sdssetlen(sds s, size_t newlen) {$/;"	f
send	include/hiredis/sockcompat.h	84;"	d
sender	src/CMessage.h	/^	uint32_t sender = 0;$/;"	m	class:CMessage
setComment	include/json/value.h	/^  void setComment(const char* comment, CommentPlacement placement) {$/;"	f	class:Json::Value
setComment	include/json/value.h	/^  void setComment(const char* comment, size_t len, CommentPlacement placement) {$/;"	f	class:Json::Value
setIsAllocated	include/json/value.h	/^  void setIsAllocated(bool v) { bits_.allocated_ = v; }$/;"	f	class:Json::Value
setType	include/json/value.h	/^  void setType(ValueType v) { bits_.value_type_ = static_cast<unsigned char> (v); }$/;"	f	class:Json::Value
set_id	src/MySql.cpp	/^    void MySql::set_id(const std::string & id)$/;"	f	class:DataBase::MySql
set_sql_config	src/ACDCallNum.cpp	/^void GatewayManager::set_sql_config(const std::string & path)$/;"	f	class:GatewayManager
set_sql_config	src/ACDCallNum.cpp	/^void ReadConfig2Redis::set_sql_config(const std::string & path)$/;"	f	class:ReadConfig2Redis
setsockopt	include/hiredis/sockcompat.h	81;"	d
settimer	src/SiaSession.cpp	/^uint32_t TSessionLua::settimer(uint32_t m_second)$/;"	f	class:TSessionLua
settings_	include/json/reader.h	/^  Json::Value settings_;$/;"	m	class:Json::CharReaderBuilder
settings_	include/json/writer.h	/^  Json::Value settings_;$/;"	m	class:Json::StreamWriterBuilder
siaSleep	src/SiaManager.cpp	/^void siaSleep(int millsecond)$/;"	f
siaversion	acdd.cpp	/^const char* siaversion = "sia " STRVERSION(SIAVERSION);$/;"	v
significantDigits	include/json/value.h	/^  significantDigits = 0, \/\/\/< we set max number of significant digits in string$/;"	e	enum:Json::PrecisionType
sipgwgroupid	src/ACDCallNum.h	/^    int         sipgwgroupid;         \/\/ 网关分组id$/;"	m	struct:SipGateway
size	include/hiredis/dict.h	/^    unsigned long size;$/;"	m	struct:dict
size	src/CEventBuffer.h	/^	size_t size()$/;"	f	class:helper::CEventBuffer
size_t	include/json/value.h	/^  typedef unsigned int size_t;$/;"	t	class:Json::ValueIterator
size_t	include/json/value.h	/^  typedef unsigned int size_t;$/;"	t	class:Json::ValueIteratorBase
size_type	src/unused/MD5.h	/^		typedef unsigned int size_type; \/\/ must be 32bit$/;"	t	class:helper::MD5
sizemask	include/hiredis/dict.h	/^    unsigned long sizemask;$/;"	m	struct:dict
snprintf	include/hiredis/win32.h	14;"	d
socket	include/hiredis/sockcompat.h	76;"	d
socket_bind	src/server.cpp	/^static int socket_bind(const char* ip,int port)$/;"	f	file:
sort	src/ACDCallNum.cpp	/^void GatewayManager::sort()$/;"	f	class:GatewayManager
source_addr	include/hiredis/hiredis.h	/^            const char *source_addr;$/;"	m	struct:__anon16::__anon17::__anon18
source_addr	include/hiredis/hiredis.h	/^        char *source_addr;$/;"	m	struct:redisContext::__anon19
sout_	include/json/writer.h	/^  OStream* sout_; \/\/ not owned; will not delete$/;"	m	class:Json::StreamWriter
ssize_t	include/hiredis/sockcompat.h	/^typedef signed long ssize_t;$/;"	t
ssl	include/hiredis/hiredis.h	/^    struct redisSsl *ssl;$/;"	m	struct:redisContext	typeref:struct:redisContext::redisSsl
ssl	include/hiredis/sslio.h	/^    SSL *ssl;$/;"	m	struct:redisSsl
start	src/SiaPrometheus.cpp	/^void SiaPrometheus::start()$/;"	f	class:SiaPrometheus
start_	include/json/reader.h	/^    Location start_;$/;"	m	class:Json::Reader::Token
start_	include/json/value.h	/^  ptrdiff_t start_;$/;"	m	class:Json::Value
state	src/unused/MD5.h	/^		uint4 state[4];   \/\/ digest so far$/;"	m	class:helper::MD5
station	src/CMessage.h	/^	int32_t station = -1;$/;"	m	class:CMessage
stop	src/SiaPrometheus.cpp	/^void SiaPrometheus::stop()$/;"	f	class:SiaPrometheus
stopservice	src/SiaSession.cpp	/^void TSessionLua::stopservice()$/;"	f	class:TSessionLua
storage_	include/json/value.h	/^      StringStorage storage_;$/;"	m	union:Json::Value::CZString::__anon12
str	include/hiredis/hiredis.h	/^    char *str; \/* Used for both REDIS_REPLY_ERROR and REDIS_REPLY_STRING *\/$/;"	m	struct:redisReply
strdup	acdd.h	10;"	d
strerror_r	include/hiredis/win32.h	43;"	d
string	src/stringHelper.h	/^	namespace string $/;"	n	namespace:helper
stringValue	include/json/value.h	/^  stringValue,   \/\/\/< UTF-8 string value$/;"	e	enum:Json::ValueType
string_	include/json/value.h	/^    char* string_; \/\/ if allocated_, ptr to { unsigned, char[] }.$/;"	m	union:Json::Value::ValueHolder
sub	include/hiredis/async.h	/^    } sub;$/;"	m	struct:redisAsyncContext	typeref:struct:redisAsyncContext::__anon15
swap	include/json/value.h	/^inline void swap(Value& a, Value& b) { a.swap(b); }$/;"	f	namespace:Json
sys_script	acdd.h	/^	std::string sys_script;$/;"	m	struct:cc_directories
table	include/hiredis/dict.h	/^    dictEntry **table;$/;"	m	struct:dict
tail	include/hiredis/async.h	/^    redisCallback *head, *tail;$/;"	m	struct:redisCallbackList
tcp	include/hiredis/hiredis.h	/^        } tcp;$/;"	m	union:__anon16::__anon17	typeref:struct:__anon16::__anon17::__anon18
tcp	include/hiredis/hiredis.h	/^    } tcp;$/;"	m	struct:redisContext	typeref:struct:redisContext::__anon19
timeout	include/hiredis/hiredis.h	/^    const struct timeval *timeout;$/;"	m	struct:__anon16	typeref:struct:__anon16::timeval
timeout	include/hiredis/hiredis.h	/^    struct timeval *timeout;$/;"	m	struct:redisContext	typeref:struct:redisContext::timeval
timerClear	src/SiaManager.cpp	/^uint32_t CSIATimer::timerClear(uint32_t timerid)$/;"	f	class:CSIATimer
timerClear	src/SiaManager.h	/^	uint32_t  timerClear(uint32_t timerID) { return m_Timer.timerClear(timerID); }$/;"	f	class:TSiaManager
timerSet	src/SiaManager.cpp	/^uint32_t CSIATimer::timerSet(uint32_t value, uint32_t lefttime)$/;"	f	class:CSIATimer
timerSet	src/SiaManager.h	/^	uint32_t  timerSet(uint32_t value, uint32_t lefttime) { return m_Timer.timerSet(value, lefttime); }$/;"	f	class:TSiaManager
tinyxml2	src/tinyxml2.cpp	/^namespace tinyxml2$/;"	n	file:
tinyxml2	src/tinyxml2.h	/^namespace tinyxml2$/;"	n
tls_cleanup	src/tls.h	/^		tls_cleanup(tls_key_type k)$/;"	f	namespace:__anon8
tls_cleanup	src/tls.h	/^		tls_cleanup(tls_key_type key)$/;"	f	namespace:__anon8
tls_get_value	src/tls.h	/^		tls_get_value(tls_key_type key)$/;"	f	namespace:__anon8
tls_get_value	src/tls.h	/^	void * tls_get_value(tls_key_type k)$/;"	f	namespace:__anon8
tls_init	src/tls.h	/^		tls_init(tls_init_cleanup_func_type cleanupfunc)$/;"	f	namespace:__anon8
tls_init	src/tls.h	/^		tls_init(tls_init_cleanup_func_type)$/;"	f	namespace:__anon8
tls_init_cleanup_func_type	src/tls.h	/^	typedef void(*tls_init_cleanup_func_type)(void *);$/;"	t	namespace:__anon8
tls_key_type	src/tls.h	/^typedef DWORD tls_key_type;$/;"	t
tls_key_type	src/tls.h	/^typedef pthread_key_t * tls_key_type;$/;"	t
tls_set_value	src/tls.h	/^		tls_set_value(tls_key_type k, void * value)$/;"	f	namespace:__anon8
tls_set_value	src/tls.h	/^		tls_set_value(tls_key_type key, tls_value_type value)$/;"	f	namespace:__anon8
tls_value_type	src/tls.h	/^typedef void * tls_value_type;$/;"	t
toLower	src/stringHelper.h	/^		static inline std::string & toLower(std::string &str)$/;"	f	namespace:helper::string
toUpper	src/stringHelper.h	/^		static inline std::string & toUpper(std::string & str)$/;"	f	namespace:helper::string
tokenArrayBegin	include/json/reader.h	/^    tokenArrayBegin,$/;"	e	enum:Json::Reader::TokenType
tokenArrayEnd	include/json/reader.h	/^    tokenArrayEnd,$/;"	e	enum:Json::Reader::TokenType
tokenArraySeparator	include/json/reader.h	/^    tokenArraySeparator,$/;"	e	enum:Json::Reader::TokenType
tokenComment	include/json/reader.h	/^    tokenComment,$/;"	e	enum:Json::Reader::TokenType
tokenEndOfStream	include/json/reader.h	/^    tokenEndOfStream = 0,$/;"	e	enum:Json::Reader::TokenType
tokenError	include/json/reader.h	/^    tokenError$/;"	e	enum:Json::Reader::TokenType
tokenFalse	include/json/reader.h	/^    tokenFalse,$/;"	e	enum:Json::Reader::TokenType
tokenMemberSeparator	include/json/reader.h	/^    tokenMemberSeparator,$/;"	e	enum:Json::Reader::TokenType
tokenNull	include/json/reader.h	/^    tokenNull,$/;"	e	enum:Json::Reader::TokenType
tokenNumber	include/json/reader.h	/^    tokenNumber,$/;"	e	enum:Json::Reader::TokenType
tokenObjectBegin	include/json/reader.h	/^    tokenObjectBegin,$/;"	e	enum:Json::Reader::TokenType
tokenObjectEnd	include/json/reader.h	/^    tokenObjectEnd,$/;"	e	enum:Json::Reader::TokenType
tokenString	include/json/reader.h	/^    tokenString,$/;"	e	enum:Json::Reader::TokenType
tokenTrue	include/json/reader.h	/^    tokenTrue,$/;"	e	enum:Json::Reader::TokenType
token_	include/json/reader.h	/^    Token token_;$/;"	m	class:Json::Reader::ErrorInfo
tpCOMMENT	src/cfgFile.h	14;"	d
tpCOMMENT	src/unused/cfgFile.h	14;"	d
tpKEYVALUE	src/cfgFile.h	13;"	d
tpKEYVALUE	src/unused/cfgFile.h	13;"	d
tpNULL	src/cfgFile.h	11;"	d
tpNULL	src/unused/cfgFile.h	11;"	d
tpSECTION	src/cfgFile.h	12;"	d
tpSECTION	src/unused/cfgFile.h	12;"	d
trace	src/SiaSession.cpp	/^void TSessionLua::trace(const char * msg)$/;"	f	class:TSessionLua
transform	src/unused/MD5.cpp	/^	void MD5::transform(const uint1 block[blocksize])$/;"	f	class:helper::MD5
transport	src/ACDCallNum.h	/^    std::string transport;            \/\/ 传输协议，udp or tcp$/;"	m	struct:SipGateway
trim	src/stringHelper.h	/^		static inline std::string &trim(std::string &s)$/;"	f	namespace:helper::string
type	include/hiredis/dict.h	/^    dictType *type;$/;"	m	struct:dict
type	include/hiredis/hiredis.h	/^    int type; \/* REDIS_REPLY_* *\/$/;"	m	struct:redisReply
type	include/hiredis/hiredis.h	/^    int type;$/;"	m	struct:__anon16
type	include/hiredis/read.h	/^    int type;$/;"	m	struct:redisReadTask
type_	include/json/reader.h	/^    TokenType type_;$/;"	m	class:Json::Reader::Token
uint1	src/unused/MD5.h	/^		typedef unsigned char uint1; \/\/  8bit$/;"	t	class:helper::MD5
uint4	src/unused/MD5.h	/^		typedef unsigned int uint4;  \/\/ 32bit$/;"	t	class:helper::MD5
uintValue	include/json/value.h	/^  uintValue,     \/\/\/< unsigned integer value$/;"	e	enum:Json::ValueType
uint_	include/json/value.h	/^    LargestUInt uint_;$/;"	m	union:Json::Value::ValueHolder
unix_sock	include/hiredis/hiredis.h	/^    } unix_sock;$/;"	m	struct:redisContext	typeref:struct:redisContext::__anon20
unix_socket	include/hiredis/hiredis.h	/^        const char *unix_socket;$/;"	m	union:__anon16::__anon17
update	src/unused/MD5.cpp	/^	void MD5::update(const char * input, size_type length)$/;"	f	class:helper::MD5
update	src/unused/MD5.cpp	/^	void MD5::update(const unsigned char * input, size_type length)$/;"	f	class:helper::MD5
update_current_sessions_by_route_id	src/ACDCallNum.cpp	/^void GatewayManager::update_current_sessions_by_route_id(int id, int t)$/;"	f	class:GatewayManager
used	include/hiredis/dict.h	/^    unsigned long used;$/;"	m	struct:dict
user_script	acdd.h	/^	std::string user_script;$/;"	m	struct:cc_directories
username	src/ACDCallNum.h	/^    std::string username;             \/\/ 注册用户名$/;"	m	struct:SipGateway
utime	src/ACDCallNum.h	/^    unsigned int utime;               \/\/ 更新时间，10位时间戳$/;"	m	struct:CallNum
utime	src/ACDCallNum.h	/^    unsigned int utime;               \/\/ 更新时间，10位时间戳$/;"	m	struct:CallNumPool
utime	src/ACDCallNum.h	/^    unsigned int utime;               \/\/ 更新时间，10位时间戳$/;"	m	struct:CallNumPoolCallNum
uuid	src/uuid.h	/^	std::string uuid()$/;"	f	namespace:helper
va_copy	include/hiredis/win32.h	10;"	d
val	include/hiredis/dict.h	/^    void *val;$/;"	m	struct:dictEntry
valDestructor	include/hiredis/dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType
valDup	include/hiredis/dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType
value	src/ACDReadConfig.h	/^    Json::Value value;$/;"	m	class:ReadJSONConfig
value	src/testjson.cpp	/^    Json::Value value;$/;"	m	class:ReadJSONConfig	file:
value	src/tinyxml2.cpp	/^    char value;$/;"	m	struct:tinyxml2::Entity	file:
value_	include/json/value.h	/^  } value_;$/;"	m	class:Json::Value	typeref:union:Json::Value::ValueHolder
value_type	include/json/value.h	/^  typedef Value value_type;$/;"	t	class:Json::ValueIterator
value_type	include/json/value.h	/^  typedef const Value value_type;$/;"	t	class:Json::ValueConstIterator
value_type	include/json/value.h	/^  typedef std::string value_type;$/;"	t	class:Json::Value
value_type_	include/json/value.h	/^    unsigned int value_type_ : 8;$/;"	m	struct:Json::Value::__anon13
verbose	src/SiaSession.cpp	/^void verbose(char * type, char *fmt)$/;"	f
wOldColorAttrs	acdd.cpp	/^static WORD wOldColorAttrs;$/;"	v	file:
wantRead	include/hiredis/sslio.h	/^    int wantRead;$/;"	m	struct:redisSsl
warn	src/SiaSession.cpp	/^void TSessionLua::warn(const char * msg)$/;"	f	class:TSessionLua
xmldoc	src/ACDReadConfig.h	/^    tinyxml2::XMLDocument xmldoc;$/;"	m	class:ReadXMLConfig
xmldoc	src/testxml.cpp	/^    XMLDocument xmldoc;$/;"	m	class:ReadXMLConfig	file:
~AsynHttpRequest	src/HttpClientModule.cpp	/^	virtual ~AsynHttpRequest(){$/;"	f	class:AsynHttpRequest
~AsynHttpRequest	src/unused/HttpClientModule.cpp	/^	virtual ~AsynHttpRequest(){$/;"	f	class:AsynHttpRequest
~CEventBuffer	src/CEventBuffer.h	/^	virtual ~CEventBuffer(void){}$/;"	f	class:helper::CEventBuffer
~CSIATimer	src/SiaManager.h	/^	~CSIATimer() {$/;"	f	class:CSIATimer
~CTCfgFile	src/cfgFile.cpp	/^CTCfgFile::~CTCfgFile (void)$/;"	f	class:CTCfgFile
~CTCfgFile	src/unused/cfgFile.cpp	/^CTCfgFile::~CTCfgFile (void)$/;"	f	class:CTCfgFile
~CTimerElement	src/SiaManager.h	/^	~CTimerElement() {$/;"	f	class:CTimerElement
~ConfigObject	src/ACDReadConfig.cpp	/^ConfigObject::~ConfigObject()$/;"	f	class:ConfigObject
~DynArray	src/tinyxml2.h	/^    ~DynArray() {$/;"	f	class:tinyxml2::DynArray
~HttpClientModule	src/HttpClientModule.cpp	/^HttpClientModule::~HttpClientModule()$/;"	f	class:HttpClientModule
~HttpClientModule	src/unused/HttpClientModule.cpp	/^HttpClientModule::~HttpClientModule()$/;"	f	class:HttpClientModule
~HttpClientThread	src/HttpClientModule.cpp	/^HttpClientThread::~HttpClientThread()$/;"	f	class:HttpClientThread
~HttpClientThread	src/unused/HttpClientModule.cpp	/^HttpClientThread::~HttpClientThread()$/;"	f	class:HttpClientThread
~HttpRequest	src/HttpRequest.h	/^	virtual ~HttpRequest(){$/;"	f	class:HttpRequest
~HttpRequest	src/unused/HttpRequest.h	/^	virtual ~HttpRequest(){$/;"	f	class:HttpRequest
~IdleStrategy	src/strategy.cpp	/^IdleStrategy::~IdleStrategy()$/;"	f	class:IdleStrategy
~LBRedis	src/ACDCallNum.cpp	/^LBRedis::~LBRedis()$/;"	f	class:LBRedis
~MemPool	src/tinyxml2.h	/^    virtual ~MemPool() {}$/;"	f	class:tinyxml2::MemPool
~MemPoolT	src/tinyxml2.h	/^    ~MemPoolT() {$/;"	f	class:tinyxml2::MemPoolT
~MyMutex	src/ACDCallNum.cpp	/^MyMutex::~MyMutex()$/;"	f	class:MyMutex
~MySql	src/MySql.cpp	/^	MySql::~MySql(void)$/;"	f	class:DataBase::MySql
~MySqlModule	src/MySqlModule.cpp	/^	MySqlModule::~MySqlModule(void)$/;"	f	class:chilli::DataBase::MySqlModule
~ReadConfig	src/ACDReadConfig.h	/^    ~ReadConfig(){}$/;"	f	class:ReadConfig
~ReadJSONConfig	src/ACDReadConfig.cpp	/^ReadJSONConfig::~ReadJSONConfig()$/;"	f	class:ReadJSONConfig
~ReadJSONConfig	src/testjson.cpp	/^ReadJSONConfig::~ReadJSONConfig()$/;"	f	class:ReadJSONConfig
~SSMoudle	src/SSModule.cpp	/^SSMoudle::~SSMoudle()$/;"	f	class:SSMoudle
~SSMoudle	src/SSModuleS.cpp	/^SSMoudle::~SSMoudle()$/;"	f	class:SSMoudle
~SiaHttpServer	src/SiaHttpServer.cpp	/^SiaHttpServer::~SiaHttpServer()$/;"	f	class:SiaHttpServer
~SiaPrometheus	src/SiaPrometheus.cpp	/^SiaPrometheus::~SiaPrometheus()$/;"	f	class:SiaPrometheus
~SiaTcpClient	src/SiaTcpServer.cpp	/^SiaTcpClient::~SiaTcpClient()$/;"	f	class:SiaTcpClient
~SiaTcpMonitor	src/SiaTcpMonitor.cpp	/^SiaTcpMonitor::~SiaTcpMonitor()$/;"	f	class:SiaTcpMonitor
~StatMoudle	src/StatModule.cpp	/^StatMoudle::~StatMoudle()$/;"	f	class:StatMoudle
~StrPair	src/tinyxml2.cpp	/^StrPair::~StrPair()$/;"	f	class:tinyxml2::StrPair
~Strategy	src/strategy.cpp	/^Strategy::~Strategy()$/;"	f	class:Strategy
~TSessionLua	src/SiaSession.cpp	/^TSessionLua::~TSessionLua()$/;"	f	class:TSessionLua
~TSiaManager	src/SiaManager.cpp	/^TSiaManager::~TSiaManager()$/;"	f	class:TSiaManager
~TcpClient	src/TcpServerModule.cpp	/^TcpClient::~TcpClient()$/;"	f	class:TcpClient
~TcpClientModule	src/TcpClientModule.cpp	/^TcpClientModule::~TcpClientModule()$/;"	f	class:TcpClientModule
~TcpServerModule	src/TcpServerModule.cpp	/^TcpServerModule::~TcpServerModule(void)$/;"	f	class:TcpServerModule
~XMLAttribute	src/tinyxml2.h	/^    virtual ~XMLAttribute()	{}$/;"	f	class:tinyxml2::XMLAttribute
~XMLComment	src/tinyxml2.cpp	/^XMLComment::~XMLComment()$/;"	f	class:tinyxml2::XMLComment
~XMLDeclaration	src/tinyxml2.cpp	/^XMLDeclaration::~XMLDeclaration()$/;"	f	class:tinyxml2::XMLDeclaration
~XMLDocument	src/tinyxml2.cpp	/^XMLDocument::~XMLDocument()$/;"	f	class:tinyxml2::XMLDocument
~XMLElement	src/tinyxml2.cpp	/^XMLElement::~XMLElement()$/;"	f	class:tinyxml2::XMLElement
~XMLNode	src/tinyxml2.cpp	/^XMLNode::~XMLNode()$/;"	f	class:tinyxml2::XMLNode
~XMLPrinter	src/tinyxml2.h	/^    virtual ~XMLPrinter()	{}$/;"	f	class:tinyxml2::XMLPrinter
~XMLText	src/tinyxml2.h	/^    virtual ~XMLText()												{}$/;"	f	class:tinyxml2::XMLText
~XMLUnknown	src/tinyxml2.cpp	/^XMLUnknown::~XMLUnknown()$/;"	f	class:tinyxml2::XMLUnknown
~XMLVisitor	src/tinyxml2.h	/^    virtual ~XMLVisitor() {}$/;"	f	class:tinyxml2::XMLVisitor
